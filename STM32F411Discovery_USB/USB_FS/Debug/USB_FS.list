
USB_FS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a68  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006c00  08006c00  00007c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00008100  2**0
                  CONTENTS
  4 .ARM          00000008  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c70  08006c70  00008100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08006c78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  20000100  08006d78  00008100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  08006d78  00008d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3de  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029da  00000000  00000000  0001550e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00017ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000848  00000000  00000000  00018a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c4c  00000000  00000000  00019270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f50d  00000000  00000000  00030ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ed3  00000000  00000000  000403c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c729c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  000c72e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c9f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006be8 	.word	0x08006be8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08006be8 	.word	0x08006be8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b598      	push	{r3, r4, r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f97a 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f81a 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f880 	bl	80005e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f005 fe42 	bl	8006170 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(data, strlen(data));
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <main+0x3c>)
 80004ee:	681c      	ldr	r4, [r3, #0]
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <main+0x3c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe6f 	bl	80001d8 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	4620      	mov	r0, r4
 8000502:	f005 fef3 	bl	80062ec <CDC_Transmit_FS>
	  HAL_Delay(2000);
 8000506:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800050a:	f000 f9d5 	bl	80008b8 <HAL_Delay>
	  CDC_Transmit_FS(data, strlen(data));
 800050e:	bf00      	nop
 8000510:	e7ec      	b.n	80004ec <main+0x14>
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 fb32 	bl	8006b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a26      	ldr	r2, [pc, #152]	@ (80005e0 <SystemClock_Config+0xc8>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <SystemClock_Config+0xc8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000588:	2319      	movs	r3, #25
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800058c:	23c0      	movs	r3, #192	@ 0xc0
 800058e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 feaf 	bl	8002300 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f870 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f911 	bl	80027f0 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d4:	f000 f85a 	bl	800068c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	@ 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a1f      	ldr	r2, [pc, #124]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <MX_GPIO_Init+0xa0>)
 800065a:	f000 fbe7 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800065e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_GPIO_Init+0xa0>)
 8000678:	f000 fa54 	bl	8000b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020c00 	.word	0x40020c00

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a0f      	ldr	r2, [pc, #60]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 f89b 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <OTG_FS_IRQHandler+0x10>)
 800074e:	f000 fcca 	bl	80010e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20001600 	.word	0x20001600

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000784:	f7ff ffea 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	@ (80007c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	@ (80007cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f006 f9f7 	bl	8006ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff fe91 	bl	80004d8 <main>
  bx  lr    
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80007c4:	08006c78 	.word	0x08006c78
  ldr r2, =_sbss
 80007c8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80007cc:	20001d04 	.word	0x20001d04

080007d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <HAL_Init+0x40>)
 80007de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <HAL_Init+0x40>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_Init+0x40>)
 80007f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f94f 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff46 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023c00 	.word	0x40023c00

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f967 	bl	8000b0a <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f92f 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000004 	.word	0x20000004
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	@ (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000000c 	.word	0x2000000c
 800089c:	2000011c 	.word	0x2000011c

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000011c 	.word	0x2000011c

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff ffee 	bl	80008a0 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffde 	bl	80008a0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000000c 	.word	0x2000000c

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	@ (800099c <__NVIC_EnableIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	@ (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	@ (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	@ 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff29 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff3e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff31 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e159      	b.n	8000df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8148 	bne.w	8000dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80a2 	beq.w	8000dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b57      	ldr	r3, [pc, #348]	@ (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a56      	ldr	r2, [pc, #344]	@ (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b54      	ldr	r3, [pc, #336]	@ (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a52      	ldr	r2, [pc, #328]	@ (8000e10 <HAL_GPIO_Init+0x2ec>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a49      	ldr	r2, [pc, #292]	@ (8000e14 <HAL_GPIO_Init+0x2f0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d019      	beq.n	8000d26 <HAL_GPIO_Init+0x202>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a48      	ldr	r2, [pc, #288]	@ (8000e18 <HAL_GPIO_Init+0x2f4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d013      	beq.n	8000d22 <HAL_GPIO_Init+0x1fe>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a47      	ldr	r2, [pc, #284]	@ (8000e1c <HAL_GPIO_Init+0x2f8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d00d      	beq.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a46      	ldr	r2, [pc, #280]	@ (8000e20 <HAL_GPIO_Init+0x2fc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d007      	beq.n	8000d1a <HAL_GPIO_Init+0x1f6>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a45      	ldr	r2, [pc, #276]	@ (8000e24 <HAL_GPIO_Init+0x300>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_GPIO_Init+0x1f2>
 8000d12:	2304      	movs	r3, #4
 8000d14:	e008      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d16:	2307      	movs	r3, #7
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d26:	2300      	movs	r3, #0
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	f002 0203 	and.w	r2, r2, #3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d38:	4935      	ldr	r1, [pc, #212]	@ (8000e10 <HAL_GPIO_Init+0x2ec>)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d94:	4a24      	ldr	r2, [pc, #144]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000de8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3301      	adds	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	f67f aea2 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3724      	adds	r7, #36	@ 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40013800 	.word	0x40013800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	619a      	str	r2, [r3, #24]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af02      	add	r7, sp, #8
 8000e64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e101      	b.n	8001074 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f005 fb76 	bl	800657c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e9e:	d102      	bne.n	8000ea6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 ff6f 	bl	8002d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7c1a      	ldrb	r2, [r3, #16]
 8000eb8:	f88d 2000 	strb.w	r2, [sp]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec0:	f001 fe4e 	bl	8002b60 <USB_CoreInit>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d005      	beq.n	8000ed6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e0ce      	b.n	8001074 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 ff67 	bl	8002db0 <USB_SetCurrentMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e0bf      	b.n	8001074 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e04a      	b.n	8000f90 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3315      	adds	r3, #21
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3314      	adds	r3, #20
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	b298      	uxth	r0, r3
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	332e      	adds	r3, #46	@ 0x2e
 8000f36:	4602      	mov	r2, r0
 8000f38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	3318      	adds	r3, #24
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	331c      	adds	r3, #28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3320      	adds	r3, #32
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	3324      	adds	r3, #36	@ 0x24
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3af      	bcc.n	8000efa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e044      	b.n	800102a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3301      	adds	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3b5      	bcc.n	8000fa0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7c1a      	ldrb	r2, [r3, #16]
 800103c:	f88d 2000 	strb.w	r2, [sp]
 8001040:	3304      	adds	r3, #4
 8001042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001044:	f001 ff00 	bl	8002e48 <USB_DevInit>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2202      	movs	r2, #2
 8001052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00c      	b.n	8001074 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f002 ff44 	bl	8003efa <USB_DevDisconnect>

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_PCD_Start+0x1c>
 8001094:	2302      	movs	r3, #2
 8001096:	e022      	b.n	80010de <HAL_PCD_Start+0x62>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d009      	beq.n	80010c0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fe51 	bl	8002d6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fef2 	bl	8003eb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010e6:	b590      	push	{r4, r7, lr}
 80010e8:	b08d      	sub	sp, #52	@ 0x34
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 ffb0 	bl	8004062 <USB_GetMode>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	f040 848c 	bne.w	8001a22 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 ff14 	bl	8003f3c <USB_ReadInterrupts>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8482 	beq.w	8001a20 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f002 ff01 	bl	8003f3c <USB_ReadInterrupts>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b02      	cmp	r3, #2
 8001142:	d107      	bne.n	8001154 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f002 0202 	and.w	r2, r2, #2
 8001152:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 feef 	bl	8003f3c <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b10      	cmp	r3, #16
 8001166:	d161      	bne.n	800122c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0210 	bic.w	r2, r2, #16
 8001176:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f003 020f 	and.w	r2, r3, #15
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	3304      	adds	r3, #4
 8001196:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	0c5b      	lsrs	r3, r3, #17
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d124      	bne.n	80011ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d035      	beq.n	800121c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	6a38      	ldr	r0, [r7, #32]
 80011c4:	f002 fd26 	bl	8003c14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d4:	441a      	add	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e6:	441a      	add	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	e016      	b.n	800121c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	0c5b      	lsrs	r3, r3, #17
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d110      	bne.n	800121c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001200:	2208      	movs	r2, #8
 8001202:	4619      	mov	r1, r3
 8001204:	6a38      	ldr	r0, [r7, #32]
 8001206:	f002 fd05 	bl	8003c14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001216:	441a      	add	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0210 	orr.w	r2, r2, #16
 800122a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fe83 	bl	8003f3c <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800123c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001240:	f040 80a7 	bne.w	8001392 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fe88 	bl	8003f62 <USB_ReadDevAllOutEpInterrupt>
 8001252:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001254:	e099      	b.n	800138a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 808e 	beq.w	800137e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 feac 	bl	8003fca <USB_ReadDevOutEPInterrupt>
 8001272:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	015a      	lsls	r2, r3, #5
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4413      	add	r3, r2
 8001286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800128a:	461a      	mov	r2, r3
 800128c:	2301      	movs	r3, #1
 800128e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fea2 	bl	8001fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012ae:	461a      	mov	r2, r3
 80012b0:	2308      	movs	r3, #8
 80012b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 ff78 	bl	80021ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d008      	beq.n	80012d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012d2:	461a      	mov	r2, r3
 80012d4:	2310      	movs	r3, #16
 80012d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d030      	beq.n	8001344 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	2b80      	cmp	r3, #128	@ 0x80
 80012ec:	d109      	bne.n	8001302 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80012fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001300:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f005 fa21 	bl	8006774 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800133e:	461a      	mov	r2, r3
 8001340:	2302      	movs	r3, #2
 8001342:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	015a      	lsls	r2, r3, #5
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800135a:	461a      	mov	r2, r3
 800135c:	2320      	movs	r3, #32
 800135e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001376:	461a      	mov	r2, r3
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	3301      	adds	r3, #1
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001386:	085b      	lsrs	r3, r3, #1
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800138a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138c:	2b00      	cmp	r3, #0
 800138e:	f47f af62 	bne.w	8001256 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fdd0 	bl	8003f3c <USB_ReadInterrupts>
 800139c:	4603      	mov	r3, r0
 800139e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013a6:	f040 80db 	bne.w	8001560 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fdf1 	bl	8003f96 <USB_ReadDevAllInEpInterrupt>
 80013b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80013ba:	e0cd      	b.n	8001558 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80c2 	beq.w	800154c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fe17 	bl	8004006 <USB_ReadDevInEPInterrupt>
 80013d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d057      	beq.n	8001494 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	2201      	movs	r2, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69f9      	ldr	r1, [r7, #28]
 8001400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001404:	4013      	ands	r3, r2
 8001406:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	015a      	lsls	r2, r3, #5
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	4413      	add	r3, r2
 8001410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001414:	461a      	mov	r2, r3
 8001416:	2301      	movs	r3, #1
 8001418:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	799b      	ldrb	r3, [r3, #6]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d132      	bne.n	8001488 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3320      	adds	r3, #32
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4403      	add	r3, r0
 8001442:	331c      	adds	r3, #28
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4419      	add	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4403      	add	r3, r0
 8001456:	3320      	adds	r3, #32
 8001458:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	2b00      	cmp	r3, #0
 800145e:	d113      	bne.n	8001488 <HAL_PCD_IRQHandler+0x3a2>
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3324      	adds	r3, #36	@ 0x24
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d108      	bne.n	8001488 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001480:	461a      	mov	r2, r3
 8001482:	2101      	movs	r1, #1
 8001484:	f002 fe1e 	bl	80040c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f005 f8f5 	bl	800667e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	015a      	lsls	r2, r3, #5
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014aa:	461a      	mov	r2, r3
 80014ac:	2308      	movs	r3, #8
 80014ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	015a      	lsls	r2, r3, #5
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014c6:	461a      	mov	r2, r3
 80014c8:	2310      	movs	r3, #16
 80014ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014e2:	461a      	mov	r2, r3
 80014e4:	2340      	movs	r3, #64	@ 0x40
 80014e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d023      	beq.n	800153a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f4:	6a38      	ldr	r0, [r7, #32]
 80014f6:	f001 fe0b 	bl	8003110 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	3310      	adds	r3, #16
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	3304      	adds	r3, #4
 800150c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	78db      	ldrb	r3, [r3, #3]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2200      	movs	r2, #0
 800151a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f005 f938 	bl	8006798 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001534:	461a      	mov	r2, r3
 8001536:	2302      	movs	r3, #2
 8001538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fcbb 	bl	8001ec2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	3301      	adds	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155a:	2b00      	cmp	r3, #0
 800155c:	f47f af2e 	bne.w	80013bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fce9 	bl	8003f3c <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001574:	d122      	bne.n	80015bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800159c:	2100      	movs	r1, #0
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fea2 	bl	80022e8 <HAL_PCDEx_LPM_Callback>
 80015a4:	e002      	b.n	80015ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f005 f8d6 	bl	8006758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80015ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fcbb 	bl	8003f3c <USB_ReadInterrupts>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015d0:	d112      	bne.n	80015f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f005 f892 	bl	800670c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80015f6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fc9d 	bl	8003f3c <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800160c:	f040 80b7 	bne.w	800177e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2110      	movs	r1, #16
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd70 	bl	8003110 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001634:	e046      	b.n	80016c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001642:	461a      	mov	r2, r3
 8001644:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001648:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800165a:	0151      	lsls	r1, r2, #5
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	440a      	add	r2, r1
 8001660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001664:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001668:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001676:	461a      	mov	r2, r3
 8001678:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800167c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800168e:	0151      	lsls	r1, r2, #5
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	440a      	add	r2, r1
 8001694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001698:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800169c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ae:	0151      	lsls	r1, r2, #5
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	440a      	add	r2, r1
 80016b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c0:	3301      	adds	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	461a      	mov	r2, r3
 80016ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d3b2      	bcc.n	8001636 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016de:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80016e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7bdb      	ldrb	r3, [r3, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d016      	beq.n	800171a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016fc:	f043 030b 	orr.w	r3, r3, #11
 8001700:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001712:	f043 030b 	orr.w	r3, r3, #11
 8001716:	6453      	str	r3, [r2, #68]	@ 0x44
 8001718:	e015      	b.n	8001746 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001728:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800172c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001730:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001740:	f043 030b 	orr.w	r3, r3, #11
 8001744:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001754:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001758:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001768:	461a      	mov	r2, r3
 800176a:	f002 fcab 	bl	80040c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fbda 	bl	8003f3c <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800178e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001792:	d123      	bne.n	80017dc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fc70 	bl	800407e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fd2d 	bl	8003202 <USB_GetDevSpeed>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681c      	ldr	r4, [r3, #0]
 80017b4:	f001 f9c8 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 80017b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017be:	461a      	mov	r2, r3
 80017c0:	4620      	mov	r0, r4
 80017c2:	f001 fa31 	bl	8002c28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f004 ff81 	bl	80066ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80017da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fbab 	bl	8003f3c <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d10a      	bne.n	8001806 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f004 ff5e 	bl	80066b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f002 0208 	and.w	r2, r2, #8
 8001804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fb96 	bl	8003f3c <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001816:	2b80      	cmp	r3, #128	@ 0x80
 8001818:	d123      	bne.n	8001862 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
 800182a:	e014      	b.n	8001856 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fb08 	bl	8001e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	461a      	mov	r2, r3
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	4293      	cmp	r3, r2
 8001860:	d3e4      	bcc.n	800182c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fb68 	bl	8003f3c <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001876:	d13c      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001878:	2301      	movs	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
 800187c:	e02b      	b.n	80018d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3318      	adds	r3, #24
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d115      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da12      	bge.n	80018d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3317      	adds	r3, #23
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fac8 	bl	8001e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	3301      	adds	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	4293      	cmp	r3, r2
 80018e0:	d3cd      	bcc.n	800187e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fb20 	bl	8003f3c <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001906:	d156      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001908:	2301      	movs	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	e045      	b.n	800199a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d12e      	bne.n	8001994 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001936:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	da2b      	bge.n	8001994 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001948:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800194c:	429a      	cmp	r2, r3
 800194e:	d121      	bne.n	8001994 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10a      	bne.n	8001994 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800198c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001990:	6053      	str	r3, [r2, #4]
            break;
 8001992:	e008      	b.n	80019a6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	3301      	adds	r3, #1
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	791b      	ldrb	r3, [r3, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d3b3      	bcc.n	800190e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80019b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fabe 	bl	8003f3c <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ca:	d10a      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f004 fef5 	bl	80067bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 faa8 	bl	8003f3c <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d115      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f004 fee5 	bl	80067d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	e000      	b.n	8001a22 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a20:	bf00      	nop
    }
  }
}
 8001a22:	3734      	adds	r7, #52	@ 0x34
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}

08001a28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_PCD_SetAddress+0x1a>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e012      	b.n	8001a68 <HAL_PCD_SetAddress+0x40>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fa07 	bl	8003e6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	70fb      	strb	r3, [r7, #3]
 8001a82:	460b      	mov	r3, r1
 8001a84:	803b      	strh	r3, [r7, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da0f      	bge.n	8001ab6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 020f 	and.w	r2, r3, #15
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	3310      	adds	r3, #16
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	705a      	strb	r2, [r3, #1]
 8001ab4:	e00f      	b.n	8001ad6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ae2:	883a      	ldrh	r2, [r7, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	78ba      	ldrb	r2, [r7, #2]
 8001aec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	785b      	ldrb	r3, [r3, #1]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b00:	78bb      	ldrb	r3, [r7, #2]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d102      	bne.n	8001b0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_PCD_EP_Open+0xaa>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e00e      	b.n	8001b38 <HAL_PCD_EP_Open+0xc8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68f9      	ldr	r1, [r7, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fb8f 	bl	800324c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001b36:	7afb      	ldrb	r3, [r7, #11]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da0f      	bge.n	8001b74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	f003 020f 	and.w	r2, r3, #15
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	3310      	adds	r3, #16
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	705a      	strb	r2, [r3, #1]
 8001b72:	e00f      	b.n	8001b94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	f003 020f 	and.w	r2, r3, #15
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_PCD_EP_Close+0x6e>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e00e      	b.n	8001bcc <HAL_PCD_EP_Close+0x8c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fbcd 	bl	800335c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	460b      	mov	r3, r1
 8001be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	799b      	ldrb	r3, [r3, #6]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	799b      	ldrb	r3, [r3, #6]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6979      	ldr	r1, [r7, #20]
 8001c3c:	f001 fc6a 	bl	8003514 <USB_EPStartXfer>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001c6c:	681b      	ldr	r3, [r3, #0]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	460b      	mov	r3, r1
 8001c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	f003 020f 	and.w	r2, r3, #15
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3310      	adds	r3, #16
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	799b      	ldrb	r3, [r3, #6]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	799b      	ldrb	r3, [r3, #6]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6979      	ldr	r1, [r7, #20]
 8001ce0:	f001 fc18 	bl	8003514 <USB_EPStartXfer>

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	7912      	ldrb	r2, [r2, #4]
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e04f      	b.n	8001dac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da0f      	bge.n	8001d34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f003 020f 	and.w	r2, r3, #15
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	3310      	adds	r3, #16
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	705a      	strb	r2, [r3, #1]
 8001d32:	e00d      	b.n	8001d50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_EP_SetStall+0x82>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e01d      	b.n	8001dac <HAL_PCD_EP_SetStall+0xbe>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 ffa0 	bl	8003cc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7999      	ldrb	r1, [r3, #6]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f002 f991 	bl	80040c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	7912      	ldrb	r2, [r2, #4]
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e042      	b.n	8001e58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0f      	bge.n	8001dfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3310      	adds	r3, #16
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	705a      	strb	r2, [r3, #1]
 8001df8:	e00f      	b.n	8001e1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 020f 	and.w	r2, r3, #15
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_PCD_EP_ClrStall+0x86>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e00e      	b.n	8001e58 <HAL_PCD_EP_ClrStall+0xa4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 ffa9 	bl	8003da0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da0c      	bge.n	8001e8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	3310      	adds	r3, #16
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e00c      	b.n	8001ea8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 020f 	and.w	r2, r3, #15
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68f9      	ldr	r1, [r7, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fdc8 	bl	8003a44 <USB_EPStopXfer>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08a      	sub	sp, #40	@ 0x28
 8001ec6:	af02      	add	r7, sp, #8
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d901      	bls.n	8001efa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06b      	b.n	8001fd2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d902      	bls.n	8001f16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f1e:	e02a      	b.n	8001f76 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d902      	bls.n	8001f3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68d9      	ldr	r1, [r3, #12]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4603      	mov	r3, r0
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f001 fe1d 	bl	8003b98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	441a      	add	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	441a      	add	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d809      	bhi.n	8001fa0 <PCD_WriteEmptyTxFifo+0xde>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d203      	bcs.n	8001fa0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1bf      	bne.n	8001f20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d811      	bhi.n	8001fd0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	6939      	ldr	r1, [r7, #16]
 8001fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fcc:	4013      	ands	r3, r2
 8001fce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	333c      	adds	r3, #60	@ 0x3c
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	799b      	ldrb	r3, [r3, #6]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d17b      	bne.n	800210a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4a61      	ldr	r2, [pc, #388]	@ (80021a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	f240 80b9 	bls.w	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80b3 	beq.w	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002044:	6093      	str	r3, [r2, #8]
 8002046:	e0a7      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800205e:	461a      	mov	r2, r3
 8002060:	2320      	movs	r3, #32
 8002062:	6093      	str	r3, [r2, #8]
 8002064:	e098      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 8093 	bne.w	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	4a4b      	ldr	r2, [pc, #300]	@ (80021a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d90f      	bls.n	800209a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002090:	461a      	mov	r2, r3
 8002092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002096:	6093      	str	r3, [r2, #8]
 8002098:	e07e      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	0159      	lsls	r1, r3, #5
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	440b      	add	r3, r1
 80020bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	1ad2      	subs	r2, r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d114      	bne.n	80020fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020e4:	461a      	mov	r2, r3
 80020e6:	2101      	movs	r1, #1
 80020e8:	f001 ffec 	bl	80040c4 <USB_EP0_OutStart>
 80020ec:	e006      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	441a      	add	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f004 faa0 	bl	8006648 <HAL_PCD_DataOutStageCallback>
 8002108:	e046      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4a26      	ldr	r2, [pc, #152]	@ (80021a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d124      	bne.n	800215c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002128:	461a      	mov	r2, r3
 800212a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800212e:	6093      	str	r3, [r2, #8]
 8002130:	e032      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002148:	461a      	mov	r2, r3
 800214a:	2320      	movs	r3, #32
 800214c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f004 fa77 	bl	8006648 <HAL_PCD_DataOutStageCallback>
 800215a:	e01d      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d114      	bne.n	800218c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002184:	461a      	mov	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f001 ff9c 	bl	80040c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f004 fa58 	bl	8006648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	4f54300a 	.word	0x4f54300a
 80021a8:	4f54310a 	.word	0x4f54310a

080021ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	333c      	adds	r3, #60	@ 0x3c
 80021c4:	3304      	adds	r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a15      	ldr	r2, [pc, #84]	@ (8002234 <PCD_EP_OutSetupPacket_int+0x88>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d90e      	bls.n	8002200 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f8:	461a      	mov	r2, r3
 80021fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f004 fa0f 	bl	8006624 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <PCD_EP_OutSetupPacket_int+0x88>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d90c      	bls.n	8002228 <PCD_EP_OutSetupPacket_int+0x7c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	799b      	ldrb	r3, [r3, #6]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	f001 ff4e 	bl	80040c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	4f54300a 	.word	0x4f54300a

08002238 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
 8002244:	4613      	mov	r3, r2
 8002246:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002256:	883b      	ldrh	r3, [r7, #0]
 8002258:	0419      	lsls	r1, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	430a      	orrs	r2, r1
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
 8002264:	e028      	b.n	80022b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e00d      	b.n	8002296 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	3340      	adds	r3, #64	@ 0x40
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	3301      	adds	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	3b01      	subs	r3, #1
 800229c:	429a      	cmp	r2, r3
 800229e:	d3ec      	bcc.n	800227a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022a0:	883b      	ldrh	r3, [r7, #0]
 80022a2:	0418      	lsls	r0, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	4302      	orrs	r2, r0
 80022b0:	3340      	adds	r3, #64	@ 0x40
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e267      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d075      	beq.n	800240a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d00c      	beq.n	8002344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b85      	ldr	r3, [pc, #532]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d112      	bne.n	800235c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002336:	4b82      	ldr	r3, [pc, #520]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002342:	d10b      	bne.n	800235c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4b7e      	ldr	r3, [pc, #504]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05b      	beq.n	8002408 <HAL_RCC_OscConfig+0x108>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d157      	bne.n	8002408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e242      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002364:	d106      	bne.n	8002374 <HAL_RCC_OscConfig+0x74>
 8002366:	4b76      	ldr	r3, [pc, #472]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e01d      	b.n	80023b0 <HAL_RCC_OscConfig+0xb0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x98>
 800237e:	4b70      	ldr	r3, [pc, #448]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6f      	ldr	r2, [pc, #444]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b6d      	ldr	r3, [pc, #436]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6c      	ldr	r2, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0xb0>
 8002398:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a68      	ldr	r2, [pc, #416]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a65      	ldr	r2, [pc, #404]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fa72 	bl	80008a0 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe fa6e 	bl	80008a0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	@ 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e207      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0xc0>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fa5e 	bl	80008a0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fa5a 	bl	80008a0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1f3      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b51      	ldr	r3, [pc, #324]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0xe8>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d063      	beq.n	80024de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x152>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1c7      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4937      	ldr	r1, [pc, #220]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e03a      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	4b34      	ldr	r3, [pc, #208]	@ (8002544 <HAL_RCC_OscConfig+0x244>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fa13 	bl	80008a0 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247e:	f7fe fa0f 	bl	80008a0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e1a8      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4925      	ldr	r1, [pc, #148]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCC_OscConfig+0x244>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe f9f2 	bl	80008a0 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c0:	f7fe f9ee 	bl	80008a0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e187      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d036      	beq.n	8002558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <HAL_RCC_OscConfig+0x248>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe f9d2 	bl	80008a0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe f9ce 	bl	80008a0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e167      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_OscConfig+0x240>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x200>
 800251e:	e01b      	b.n	8002558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_OscConfig+0x248>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe f9bb 	bl	80008a0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	e00e      	b.n	800254c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252e:	f7fe f9b7 	bl	80008a0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d907      	bls.n	800254c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e150      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
 8002540:	40023800 	.word	0x40023800
 8002544:	42470000 	.word	0x42470000
 8002548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b88      	ldr	r3, [pc, #544]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ea      	bne.n	800252e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8097 	beq.w	8002694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b81      	ldr	r3, [pc, #516]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b7d      	ldr	r3, [pc, #500]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	4a7c      	ldr	r2, [pc, #496]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	@ 0x40
 8002586:	4b7a      	ldr	r3, [pc, #488]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b77      	ldr	r3, [pc, #476]	@ (8002774 <HAL_RCC_OscConfig+0x474>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b74      	ldr	r3, [pc, #464]	@ (8002774 <HAL_RCC_OscConfig+0x474>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a73      	ldr	r2, [pc, #460]	@ (8002774 <HAL_RCC_OscConfig+0x474>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7fe f977 	bl	80008a0 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe f973 	bl	80008a0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e10c      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002774 <HAL_RCC_OscConfig+0x474>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x2ea>
 80025dc:	4b64      	ldr	r3, [pc, #400]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e0:	4a63      	ldr	r2, [pc, #396]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x324>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x30c>
 80025f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	4a5b      	ldr	r2, [pc, #364]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6713      	str	r3, [r2, #112]	@ 0x70
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x324>
 800260c:	4b58      	ldr	r3, [pc, #352]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	4a57      	ldr	r2, [pc, #348]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	@ 0x70
 8002618:	4b55      	ldr	r3, [pc, #340]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261c:	4a54      	ldr	r2, [pc, #336]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe f938 	bl	80008a0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe f934 	bl	80008a0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0cb      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264a:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0ee      	beq.n	8002634 <HAL_RCC_OscConfig+0x334>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002658:	f7fe f922 	bl	80008a0 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	e00a      	b.n	8002676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe f91e 	bl	80008a0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0b5      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002676:	4b3e      	ldr	r3, [pc, #248]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ee      	bne.n	8002660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	4a38      	ldr	r2, [pc, #224]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002692:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a1 	beq.w	80027e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269e:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d05c      	beq.n	8002764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d141      	bne.n	8002736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_RCC_OscConfig+0x478>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe f8f2 	bl	80008a0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe f8ee 	bl	80008a0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e087      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	491b      	ldr	r1, [pc, #108]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_RCC_OscConfig+0x478>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe f8c7 	bl	80008a0 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe f8c3 	bl	80008a0 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e05c      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x416>
 8002734:	e054      	b.n	80027e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_RCC_OscConfig+0x478>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe f8b0 	bl	80008a0 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe f8ac 	bl	80008a0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e045      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCC_OscConfig+0x470>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x444>
 8002762:	e03d      	b.n	80027e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e038      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
 8002770:	40023800 	.word	0x40023800
 8002774:	40007000 	.word	0x40007000
 8002778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800277c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ec <HAL_RCC_OscConfig+0x4ec>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d028      	beq.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d121      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d11a      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d111      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0cc      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b68      	ldr	r3, [pc, #416]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d90c      	bls.n	800282c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800284e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a52      	ldr	r2, [pc, #328]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d044      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e067      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4934      	ldr	r1, [pc, #208]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fd ffde 	bl	80008a0 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fd ffda 	bl	80008a0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d20c      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd ff3e 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08006c58 	.word	0x08006c58
 80029b4:	20000004 	.word	0x20000004
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b090      	sub	sp, #64	@ 0x40
 80029c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029cc:	2300      	movs	r3, #0
 80029ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d4:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d00d      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x40>
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	f200 80a1 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x16c>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ee:	e09b      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x184>)
 80029f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80029f4:	e09b      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f6:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x188>)
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029fa:	e098      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a04:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a06:	4b4d      	ldr	r3, [pc, #308]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d028      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a12:	4b4a      	ldr	r3, [pc, #296]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	2200      	movs	r2, #0
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a24:	2100      	movs	r1, #0
 8002a26:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a28:	fb03 f201 	mul.w	r2, r3, r1
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	fb00 f303 	mul.w	r3, r0, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	4a43      	ldr	r2, [pc, #268]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a36:	fba0 1202 	umull	r1, r2, r0, r2
 8002a3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a3c:	460a      	mov	r2, r1
 8002a3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a42:	4413      	add	r3, r2
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	61fa      	str	r2, [r7, #28]
 8002a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a56:	f7fd fbc7 	bl	80001e8 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a62:	e053      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4b35      	ldr	r3, [pc, #212]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	617a      	str	r2, [r7, #20]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a76:	f04f 0b00 	mov.w	fp, #0
 8002a7a:	4652      	mov	r2, sl
 8002a7c:	465b      	mov	r3, fp
 8002a7e:	f04f 0000 	mov.w	r0, #0
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	0159      	lsls	r1, r3, #5
 8002a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a8c:	0150      	lsls	r0, r2, #5
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	ebb2 080a 	subs.w	r8, r2, sl
 8002a96:	eb63 090b 	sbc.w	r9, r3, fp
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002aa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aae:	ebb2 0408 	subs.w	r4, r2, r8
 8002ab2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	00eb      	lsls	r3, r5, #3
 8002ac0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac4:	00e2      	lsls	r2, r4, #3
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	461d      	mov	r5, r3
 8002aca:	eb14 030a 	adds.w	r3, r4, sl
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	eb45 030b 	adc.w	r3, r5, fp
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	028b      	lsls	r3, r1, #10
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aec:	4621      	mov	r1, r4
 8002aee:	028a      	lsls	r2, r1, #10
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	2200      	movs	r2, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	60fa      	str	r2, [r7, #12]
 8002afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b00:	f7fd fb72 	bl	80001e8 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3740      	adds	r7, #64	@ 0x40
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	017d7840 	.word	0x017d7840

08002b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000004 	.word	0x20000004

08002b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b60:	b084      	sub	sp, #16
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	f107 001c 	add.w	r0, r7, #28
 8002b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d123      	bne.n	8002bc2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f001 fae2 	bl	8004180 <USB_CoreReset>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e01b      	b.n	8002bfa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f001 fad6 	bl	8004180 <USB_CoreReset>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bd8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bec:	e005      	b.n	8002bfa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bfa:	7fbb      	ldrb	r3, [r7, #30]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10b      	bne.n	8002c18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f043 0206 	orr.w	r2, r3, #6
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c24:	b004      	add	sp, #16
 8002c26:	4770      	bx	lr

08002c28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d165      	bne.n	8002d08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <USB_SetTurnaroundTime+0x11c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d906      	bls.n	8002c52 <USB_SetTurnaroundTime+0x2a>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4a40      	ldr	r2, [pc, #256]	@ (8002d48 <USB_SetTurnaroundTime+0x120>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d202      	bcs.n	8002c52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e062      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4a3c      	ldr	r2, [pc, #240]	@ (8002d48 <USB_SetTurnaroundTime+0x120>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d306      	bcc.n	8002c68 <USB_SetTurnaroundTime+0x40>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d4c <USB_SetTurnaroundTime+0x124>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d202      	bcs.n	8002c68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c62:	230e      	movs	r3, #14
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e057      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <USB_SetTurnaroundTime+0x124>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d306      	bcc.n	8002c7e <USB_SetTurnaroundTime+0x56>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4a37      	ldr	r2, [pc, #220]	@ (8002d50 <USB_SetTurnaroundTime+0x128>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d202      	bcs.n	8002c7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c78:	230d      	movs	r3, #13
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e04c      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4a33      	ldr	r2, [pc, #204]	@ (8002d50 <USB_SetTurnaroundTime+0x128>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d306      	bcc.n	8002c94 <USB_SetTurnaroundTime+0x6c>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4a32      	ldr	r2, [pc, #200]	@ (8002d54 <USB_SetTurnaroundTime+0x12c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d802      	bhi.n	8002c94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e041      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a2f      	ldr	r2, [pc, #188]	@ (8002d54 <USB_SetTurnaroundTime+0x12c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d906      	bls.n	8002caa <USB_SetTurnaroundTime+0x82>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <USB_SetTurnaroundTime+0x130>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d802      	bhi.n	8002caa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ca4:	230b      	movs	r3, #11
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e036      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4a2a      	ldr	r2, [pc, #168]	@ (8002d58 <USB_SetTurnaroundTime+0x130>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d906      	bls.n	8002cc0 <USB_SetTurnaroundTime+0x98>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4a29      	ldr	r2, [pc, #164]	@ (8002d5c <USB_SetTurnaroundTime+0x134>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d802      	bhi.n	8002cc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002cba:	230a      	movs	r3, #10
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e02b      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a26      	ldr	r2, [pc, #152]	@ (8002d5c <USB_SetTurnaroundTime+0x134>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d906      	bls.n	8002cd6 <USB_SetTurnaroundTime+0xae>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <USB_SetTurnaroundTime+0x138>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d202      	bcs.n	8002cd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e020      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4a21      	ldr	r2, [pc, #132]	@ (8002d60 <USB_SetTurnaroundTime+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d306      	bcc.n	8002cec <USB_SetTurnaroundTime+0xc4>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4a20      	ldr	r2, [pc, #128]	@ (8002d64 <USB_SetTurnaroundTime+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d802      	bhi.n	8002cec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e015      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <USB_SetTurnaroundTime+0x13c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d906      	bls.n	8002d02 <USB_SetTurnaroundTime+0xda>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <USB_SetTurnaroundTime+0x140>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d202      	bcs.n	8002d02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e00a      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d02:	2306      	movs	r3, #6
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e007      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d0e:	2309      	movs	r3, #9
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e001      	b.n	8002d18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d14:	2309      	movs	r3, #9
 8002d16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	00d8acbf 	.word	0x00d8acbf
 8002d48:	00e4e1c0 	.word	0x00e4e1c0
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	01067380 	.word	0x01067380
 8002d54:	011a499f 	.word	0x011a499f
 8002d58:	01312cff 	.word	0x01312cff
 8002d5c:	014ca43f 	.word	0x014ca43f
 8002d60:	016e3600 	.word	0x016e3600
 8002d64:	01a6ab1f 	.word	0x01a6ab1f
 8002d68:	01e84800 	.word	0x01e84800

08002d6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 0201 	bic.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d115      	bne.n	8002dfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002dde:	200a      	movs	r0, #10
 8002de0:	f7fd fd6a 	bl	80008b8 <HAL_Delay>
      ms += 10U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	330a      	adds	r3, #10
 8002de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f001 f939 	bl	8004062 <USB_GetMode>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d01e      	beq.n	8002e34 <USB_SetCurrentMode+0x84>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002dfa:	d9f0      	bls.n	8002dde <USB_SetCurrentMode+0x2e>
 8002dfc:	e01a      	b.n	8002e34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d115      	bne.n	8002e30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e10:	200a      	movs	r0, #10
 8002e12:	f7fd fd51 	bl	80008b8 <HAL_Delay>
      ms += 10U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	330a      	adds	r3, #10
 8002e1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f001 f920 	bl	8004062 <USB_GetMode>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <USB_SetCurrentMode+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e2c:	d9f0      	bls.n	8002e10 <USB_SetCurrentMode+0x60>
 8002e2e:	e001      	b.n	8002e34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e005      	b.n	8002e40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2bc8      	cmp	r3, #200	@ 0xc8
 8002e38:	d101      	bne.n	8002e3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e48:	b084      	sub	sp, #16
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	e009      	b.n	8002e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	3340      	adds	r3, #64	@ 0x40
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	2200      	movs	r2, #0
 8002e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0e      	cmp	r3, #14
 8002e80:	d9f2      	bls.n	8002e68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11c      	bne.n	8002ec4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ec2:	e00b      	b.n	8002edc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ee8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10d      	bne.n	8002f0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ef8:	2100      	movs	r1, #0
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f968 	bl	80031d0 <USB_SetDevSpeed>
 8002f00:	e008      	b.n	8002f14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f02:	2101      	movs	r1, #1
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f963 	bl	80031d0 <USB_SetDevSpeed>
 8002f0a:	e003      	b.n	8002f14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f0c:	2103      	movs	r1, #3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f95e 	bl	80031d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f14:	2110      	movs	r1, #16
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8fa 	bl	8003110 <USB_FlushTxFifo>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f924 	bl	8003174 <USB_FlushRxFifo>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f54:	461a      	mov	r2, r3
 8002f56:	2300      	movs	r3, #0
 8002f58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e043      	b.n	8002fe8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f76:	d118      	bne.n	8002faa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e013      	b.n	8002fbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e008      	b.n	8002fbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fe0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002fec:	461a      	mov	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d3b5      	bcc.n	8002f60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e043      	b.n	8003082 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800300c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003010:	d118      	bne.n	8003044 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e013      	b.n	8003056 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e008      	b.n	8003056 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003050:	461a      	mov	r2, r3
 8003052:	2300      	movs	r3, #0
 8003054:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	2300      	movs	r3, #0
 8003066:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800307a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	3301      	adds	r3, #1
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003086:	461a      	mov	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4293      	cmp	r3, r2
 800308c:	d3b5      	bcc.n	8002ffa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80030ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	4b10      	ldr	r3, [pc, #64]	@ (800310c <USB_DevInit+0x2c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f043 0208 	orr.w	r2, r3, #8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003108:	b004      	add	sp, #16
 800310a:	4770      	bx	lr
 800310c:	803c3800 	.word	0x803c3800

08003110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3301      	adds	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800312a:	d901      	bls.n	8003130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e01b      	b.n	8003168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	daf2      	bge.n	800311e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	019b      	lsls	r3, r3, #6
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003154:	d901      	bls.n	800315a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e006      	b.n	8003168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d0f0      	beq.n	8003148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3301      	adds	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800318c:	d901      	bls.n	8003192 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e018      	b.n	80031c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	daf2      	bge.n	8003180 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2210      	movs	r2, #16
 80031a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031b0:	d901      	bls.n	80031b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e006      	b.n	80031c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d0f0      	beq.n	80031a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003202:	b480      	push	{r7}
 8003204:	b087      	sub	sp, #28
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0306 	and.w	r3, r3, #6
 800321a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]
 8003226:	e00a      	b.n	800323e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d002      	beq.n	8003234 <USB_GetDevSpeed+0x32>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b06      	cmp	r3, #6
 8003232:	d102      	bne.n	800323a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003234:	2302      	movs	r3, #2
 8003236:	75fb      	strb	r3, [r7, #23]
 8003238:	e001      	b.n	800323e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800323a:	230f      	movs	r3, #15
 800323c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d13a      	bne.n	80032de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	b29b      	uxth	r3, r3
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003286:	4313      	orrs	r3, r2
 8003288:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d155      	bne.n	800334c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	791b      	ldrb	r3, [r3, #4]
 80032ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	059b      	lsls	r3, r3, #22
 80032c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032c4:	4313      	orrs	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	0151      	lsls	r1, r2, #5
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	440a      	add	r2, r1
 80032ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e036      	b.n	800334c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11a      	bne.n	800334c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	791b      	ldrb	r3, [r3, #4]
 8003330:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003332:	430b      	orrs	r3, r1
 8003334:	4313      	orrs	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	440a      	add	r2, r1
 800333e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d161      	bne.n	800343c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800338a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800338e:	d11f      	bne.n	80033d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033f0:	4013      	ands	r3, r2
 80033f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003414:	4013      	ands	r3, r2
 8003416:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	0159      	lsls	r1, r3, #5
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	440b      	add	r3, r1
 800342e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003432:	4619      	mov	r1, r3
 8003434:	4b35      	ldr	r3, [pc, #212]	@ (800350c <USB_DeactivateEndpoint+0x1b0>)
 8003436:	4013      	ands	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
 800343a:	e060      	b.n	80034fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800344e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003452:	d11f      	bne.n	8003494 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	440a      	add	r2, r1
 800346a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800346e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003472:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	0151      	lsls	r1, r2, #5
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	440a      	add	r2, r1
 800348a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800348e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	43db      	mvns	r3, r3
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034b4:	4013      	ands	r3, r2
 80034b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	43db      	mvns	r3, r3
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034d8:	4013      	ands	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f6:	4619      	mov	r1, r3
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <USB_DeactivateEndpoint+0x1b4>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	ec337800 	.word	0xec337800
 8003510:	eff37800 	.word	0xeff37800

08003514 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	2b01      	cmp	r3, #1
 8003532:	f040 817a 	bne.w	800382a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d132      	bne.n	80035a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	440a      	add	r2, r1
 8003554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003558:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800355c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	0151      	lsls	r1, r2, #5
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	440a      	add	r2, r1
 8003578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800357c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	440a      	add	r2, r1
 8003598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800359c:	0cdb      	lsrs	r3, r3, #19
 800359e:	04db      	lsls	r3, r3, #19
 80035a0:	6113      	str	r3, [r2, #16]
 80035a2:	e092      	b.n	80036ca <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035be:	0cdb      	lsrs	r3, r3, #19
 80035c0:	04db      	lsls	r3, r3, #19
 80035c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	0151      	lsls	r1, r2, #5
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	440a      	add	r2, r1
 80035da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80035e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80035e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11a      	bne.n	8003624 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d903      	bls.n	8003602 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800361c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003620:	6113      	str	r3, [r2, #16]
 8003622:	e01b      	b.n	800365c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003630:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6919      	ldr	r1, [r3, #16]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	440b      	add	r3, r1
 800363c:	1e59      	subs	r1, r3, #1
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	fbb1 f3f3 	udiv	r3, r1, r3
 8003646:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003648:	4ba2      	ldr	r3, [pc, #648]	@ (80038d4 <USB_EPStartXfer+0x3c0>)
 800364a:	400b      	ands	r3, r1
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	0148      	lsls	r0, r1, #5
 8003650:	69f9      	ldr	r1, [r7, #28]
 8003652:	4401      	add	r1, r0
 8003654:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	0148      	lsls	r0, r1, #5
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	4401      	add	r1, r0
 800367a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800367e:	4313      	orrs	r3, r2
 8003680:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d11f      	bne.n	80036ca <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036a4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80036a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d14b      	bne.n	8003768 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	791b      	ldrb	r3, [r3, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d128      	bne.n	8003746 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800371e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e00f      	b.n	8003746 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003760:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e165      	b.n	8003a34 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	440a      	add	r2, r1
 800377e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003782:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003786:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	791b      	ldrb	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d015      	beq.n	80037bc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 814d 	beq.w	8003a34 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037b6:	4313      	orrs	r3, r2
 80037b8:	634b      	str	r3, [r1, #52]	@ 0x34
 80037ba:	e13b      	b.n	8003a34 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d110      	bne.n	80037ee <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e00f      	b.n	800380e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	440a      	add	r2, r1
 8003804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	68d9      	ldr	r1, [r3, #12]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	b298      	uxth	r0, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4603      	mov	r3, r0
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f9b8 	bl	8003b98 <USB_WritePacket>
 8003828:	e104      	b.n	8003a34 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003844:	0cdb      	lsrs	r3, r3, #19
 8003846:	04db      	lsls	r3, r3, #19
 8003848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003864:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003868:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800386c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d131      	bne.n	80038d8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	0148      	lsls	r0, r1, #5
 80038a6:	69f9      	ldr	r1, [r7, #28]
 80038a8:	4401      	add	r1, r0
 80038aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038ae:	4313      	orrs	r3, r2
 80038b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038d0:	6113      	str	r3, [r2, #16]
 80038d2:	e061      	b.n	8003998 <USB_EPStartXfer+0x484>
 80038d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d123      	bne.n	8003928 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	0148      	lsls	r0, r1, #5
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	4401      	add	r1, r0
 80038fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	0151      	lsls	r1, r2, #5
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	440a      	add	r2, r1
 800391c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003924:	6113      	str	r3, [r2, #16]
 8003926:	e037      	b.n	8003998 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4413      	add	r3, r2
 8003932:	1e5a      	subs	r2, r3, #1
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	8afa      	ldrh	r2, [r7, #22]
 8003944:	fb03 f202 	mul.w	r2, r3, r2
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	04d9      	lsls	r1, r3, #19
 800395e:	4b38      	ldr	r3, [pc, #224]	@ (8003a40 <USB_EPStartXfer+0x52c>)
 8003960:	400b      	ands	r3, r1
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	0148      	lsls	r0, r1, #5
 8003966:	69f9      	ldr	r1, [r7, #28]
 8003968:	4401      	add	r1, r0
 800396a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800396e:	4313      	orrs	r3, r2
 8003970:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	0148      	lsls	r0, r1, #5
 800398c:	69f9      	ldr	r1, [r7, #28]
 800398e:	4401      	add	r1, r0
 8003990:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d10d      	bne.n	80039ba <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	68d9      	ldr	r1, [r3, #12]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b6:	460a      	mov	r2, r1
 80039b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	791b      	ldrb	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d128      	bne.n	8003a14 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d110      	bne.n	80039f4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00f      	b.n	8003a14 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	0151      	lsls	r1, r2, #5
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	440a      	add	r2, r1
 8003a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	1ff80000 	.word	0x1ff80000

08003a44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d14a      	bne.n	8003af8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a7a:	f040 8086 	bne.w	8003b8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003aa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d902      	bls.n	8003adc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8003ada:	e056      	b.n	8003b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af4:	d0e7      	beq.n	8003ac6 <USB_EPStopXfer+0x82>
 8003af6:	e048      	b.n	8003b8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b10:	d13b      	bne.n	8003b8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	7812      	ldrb	r2, [r2, #0]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	7812      	ldrb	r2, [r2, #0]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d902      	bls.n	8003b70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8003b6e:	e00c      	b.n	8003b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b88:	d0e7      	beq.n	8003b5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	71fb      	strb	r3, [r7, #7]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d123      	bne.n	8003c06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bbe:	88bb      	ldrh	r3, [r7, #4]
 8003bc0:	3303      	adds	r3, #3
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e018      	b.n	8003bfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	031a      	lsls	r2, r3, #12
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd8:	461a      	mov	r2, r3
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3301      	adds	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3e2      	bcc.n	8003bcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3724      	adds	r7, #36	@ 0x24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b08b      	sub	sp, #44	@ 0x2c
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	e014      	b.n	8003c6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	3301      	adds	r3, #1
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	3301      	adds	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	3301      	adds	r3, #1
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d3e6      	bcc.n	8003c40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c72:	8bfb      	ldrh	r3, [r7, #30]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01e      	beq.n	8003cb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c82:	461a      	mov	r2, r3
 8003c84:	f107 0310 	add.w	r3, r7, #16
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	701a      	strb	r2, [r3, #0]
      i++;
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003caa:	8bfb      	ldrh	r3, [r7, #30]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cb0:	8bfb      	ldrh	r3, [r7, #30]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ea      	bne.n	8003c8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	372c      	adds	r7, #44	@ 0x2c
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d12c      	bne.n	8003d3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db12      	blt.n	8003d18 <USB_EPSetStall+0x54>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00f      	beq.n	8003d18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	0151      	lsls	r1, r2, #5
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e02b      	b.n	8003d92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db12      	blt.n	8003d72 <USB_EPSetStall+0xae>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00f      	beq.n	8003d72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d128      	bne.n	8003e0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	791b      	ldrb	r3, [r3, #4]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d003      	beq.n	8003dec <USB_EPClearStall+0x4c>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	791b      	ldrb	r3, [r3, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d138      	bne.n	8003e5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e027      	b.n	8003e5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	791b      	ldrb	r3, [r3, #4]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d003      	beq.n	8003e3e <USB_EPClearStall+0x9e>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	791b      	ldrb	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d10f      	bne.n	8003e5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ee6:	f023 0302 	bic.w	r3, r3, #2
 8003eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f14:	f023 0303 	bic.w	r3, r3, #3
 8003f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	0c1b      	lsrs	r3, r3, #16
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	b29b      	uxth	r3, r3
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004006:	b480      	push	{r7}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004028:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	01db      	lsls	r3, r3, #7
 8004038:	b2db      	uxtb	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004054:	68bb      	ldr	r3, [r7, #8]
}
 8004056:	4618      	mov	r0, r3
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0301 	and.w	r3, r3, #1
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004098:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	460b      	mov	r3, r1
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	333c      	adds	r3, #60	@ 0x3c
 80040da:	3304      	adds	r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4a26      	ldr	r2, [pc, #152]	@ (800417c <USB_EP0_OutStart+0xb8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d90a      	bls.n	80040fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040f8:	d101      	bne.n	80040fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e037      	b.n	800416e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	2300      	movs	r3, #0
 8004108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004118:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800411c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800412c:	f043 0318 	orr.w	r3, r3, #24
 8004130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004140:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004144:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004146:	7afb      	ldrb	r3, [r7, #11]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10f      	bne.n	800416c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004166:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800416a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	4f54300a 	.word	0x4f54300a

08004180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004198:	d901      	bls.n	800419e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e01b      	b.n	80041d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	daf2      	bge.n	800418c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041c2:	d901      	bls.n	80041c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d0f0      	beq.n	80041b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80041f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80041f4:	f002 fc88 	bl	8006b08 <USBD_static_malloc>
 80041f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	32b0      	adds	r2, #176	@ 0xb0
 800420a:	2100      	movs	r1, #0
 800420c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004210:	2302      	movs	r3, #2
 8004212:	e0d4      	b.n	80043be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004214:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004218:	2100      	movs	r1, #0
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f002 fcb8 	bl	8006b90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	32b0      	adds	r2, #176	@ 0xb0
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	32b0      	adds	r2, #176	@ 0xb0
 800423a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7c1b      	ldrb	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d138      	bne.n	80042be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800424c:	4b5e      	ldr	r3, [pc, #376]	@ (80043c8 <USBD_CDC_Init+0x1e4>)
 800424e:	7819      	ldrb	r1, [r3, #0]
 8004250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004254:	2202      	movs	r2, #2
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f002 fb33 	bl	80068c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800425c:	4b5a      	ldr	r3, [pc, #360]	@ (80043c8 <USBD_CDC_Init+0x1e4>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3324      	adds	r3, #36	@ 0x24
 8004272:	2201      	movs	r2, #1
 8004274:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004276:	4b55      	ldr	r3, [pc, #340]	@ (80043cc <USBD_CDC_Init+0x1e8>)
 8004278:	7819      	ldrb	r1, [r3, #0]
 800427a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800427e:	2202      	movs	r2, #2
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f002 fb1e 	bl	80068c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004286:	4b51      	ldr	r3, [pc, #324]	@ (80043cc <USBD_CDC_Init+0x1e8>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	f003 020f 	and.w	r2, r3, #15
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800429e:	2201      	movs	r2, #1
 80042a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80042a2:	4b4b      	ldr	r3, [pc, #300]	@ (80043d0 <USBD_CDC_Init+0x1ec>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	3326      	adds	r3, #38	@ 0x26
 80042b8:	2210      	movs	r2, #16
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e035      	b.n	800432a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80042be:	4b42      	ldr	r3, [pc, #264]	@ (80043c8 <USBD_CDC_Init+0x1e4>)
 80042c0:	7819      	ldrb	r1, [r3, #0]
 80042c2:	2340      	movs	r3, #64	@ 0x40
 80042c4:	2202      	movs	r2, #2
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f002 fafb 	bl	80068c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80042cc:	4b3e      	ldr	r3, [pc, #248]	@ (80043c8 <USBD_CDC_Init+0x1e4>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	3324      	adds	r3, #36	@ 0x24
 80042e2:	2201      	movs	r2, #1
 80042e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80042e6:	4b39      	ldr	r3, [pc, #228]	@ (80043cc <USBD_CDC_Init+0x1e8>)
 80042e8:	7819      	ldrb	r1, [r3, #0]
 80042ea:	2340      	movs	r3, #64	@ 0x40
 80042ec:	2202      	movs	r2, #2
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f002 fae7 	bl	80068c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80042f4:	4b35      	ldr	r3, [pc, #212]	@ (80043cc <USBD_CDC_Init+0x1e8>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800430c:	2201      	movs	r2, #1
 800430e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004310:	4b2f      	ldr	r3, [pc, #188]	@ (80043d0 <USBD_CDC_Init+0x1ec>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	3326      	adds	r3, #38	@ 0x26
 8004326:	2210      	movs	r2, #16
 8004328:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800432a:	4b29      	ldr	r3, [pc, #164]	@ (80043d0 <USBD_CDC_Init+0x1ec>)
 800432c:	7819      	ldrb	r1, [r3, #0]
 800432e:	2308      	movs	r3, #8
 8004330:	2203      	movs	r2, #3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f002 fac5 	bl	80068c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004338:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <USBD_CDC_Init+0x1ec>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3324      	adds	r3, #36	@ 0x24
 800434e:	2201      	movs	r2, #1
 8004350:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	33b0      	adds	r3, #176	@ 0xb0
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004388:	2302      	movs	r3, #2
 800438a:	e018      	b.n	80043be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7c1b      	ldrb	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004394:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <USBD_CDC_Init+0x1e8>)
 8004396:	7819      	ldrb	r1, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800439e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f002 fb7c 	bl	8006aa0 <USBD_LL_PrepareReceive>
 80043a8:	e008      	b.n	80043bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80043aa:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <USBD_CDC_Init+0x1e8>)
 80043ac:	7819      	ldrb	r1, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80043b4:	2340      	movs	r3, #64	@ 0x40
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f002 fb72 	bl	8006aa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000097 	.word	0x20000097
 80043cc:	20000098 	.word	0x20000098
 80043d0:	20000099 	.word	0x20000099

080043d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80043e0:	4b3a      	ldr	r3, [pc, #232]	@ (80044cc <USBD_CDC_DeInit+0xf8>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f002 fa91 	bl	800690e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80043ec:	4b37      	ldr	r3, [pc, #220]	@ (80044cc <USBD_CDC_DeInit+0xf8>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3324      	adds	r3, #36	@ 0x24
 8004402:	2200      	movs	r2, #0
 8004404:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004406:	4b32      	ldr	r3, [pc, #200]	@ (80044d0 <USBD_CDC_DeInit+0xfc>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f002 fa7e 	bl	800690e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004412:	4b2f      	ldr	r3, [pc, #188]	@ (80044d0 <USBD_CDC_DeInit+0xfc>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f003 020f 	and.w	r2, r3, #15
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800442a:	2200      	movs	r2, #0
 800442c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800442e:	4b29      	ldr	r3, [pc, #164]	@ (80044d4 <USBD_CDC_DeInit+0x100>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f002 fa6a 	bl	800690e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800443a:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <USBD_CDC_DeInit+0x100>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3324      	adds	r3, #36	@ 0x24
 8004450:	2200      	movs	r2, #0
 8004452:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004454:	4b1f      	ldr	r3, [pc, #124]	@ (80044d4 <USBD_CDC_DeInit+0x100>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3326      	adds	r3, #38	@ 0x26
 800446a:	2200      	movs	r2, #0
 800446c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	32b0      	adds	r2, #176	@ 0xb0
 8004478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01f      	beq.n	80044c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	33b0      	adds	r3, #176	@ 0xb0
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	32b0      	adds	r2, #176	@ 0xb0
 800449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f002 fb3e 	bl	8006b24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	32b0      	adds	r2, #176	@ 0xb0
 80044b2:	2100      	movs	r1, #0
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000097 	.word	0x20000097
 80044d0:	20000098 	.word	0x20000098
 80044d4:	20000099 	.word	0x20000099

080044d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	32b0      	adds	r2, #176	@ 0xb0
 80044ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004504:	2303      	movs	r3, #3
 8004506:	e0bf      	b.n	8004688 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004510:	2b00      	cmp	r3, #0
 8004512:	d050      	beq.n	80045b6 <USBD_CDC_Setup+0xde>
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 80af 	bne.w	8004678 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	88db      	ldrh	r3, [r3, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d03a      	beq.n	8004598 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b25b      	sxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	da1b      	bge.n	8004564 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	33b0      	adds	r3, #176	@ 0xb0
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004542:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	88d2      	ldrh	r2, [r2, #6]
 8004548:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	88db      	ldrh	r3, [r3, #6]
 800454e:	2b07      	cmp	r3, #7
 8004550:	bf28      	it	cs
 8004552:	2307      	movcs	r3, #7
 8004554:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	89fa      	ldrh	r2, [r7, #14]
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f001 fd87 	bl	8006070 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004562:	e090      	b.n	8004686 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785a      	ldrb	r2, [r3, #1]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	88db      	ldrh	r3, [r3, #6]
 8004572:	2b3f      	cmp	r3, #63	@ 0x3f
 8004574:	d803      	bhi.n	800457e <USBD_CDC_Setup+0xa6>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	88db      	ldrh	r3, [r3, #6]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	e000      	b.n	8004580 <USBD_CDC_Setup+0xa8>
 800457e:	2240      	movs	r2, #64	@ 0x40
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004586:	6939      	ldr	r1, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800458e:	461a      	mov	r2, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 fd99 	bl	80060c8 <USBD_CtlPrepareRx>
      break;
 8004596:	e076      	b.n	8004686 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	33b0      	adds	r3, #176	@ 0xb0
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	7850      	ldrb	r0, [r2, #1]
 80045ae:	2200      	movs	r2, #0
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	4798      	blx	r3
      break;
 80045b4:	e067      	b.n	8004686 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b0b      	cmp	r3, #11
 80045bc:	d851      	bhi.n	8004662 <USBD_CDC_Setup+0x18a>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <USBD_CDC_Setup+0xec>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045f5 	.word	0x080045f5
 80045c8:	08004671 	.word	0x08004671
 80045cc:	08004663 	.word	0x08004663
 80045d0:	08004663 	.word	0x08004663
 80045d4:	08004663 	.word	0x08004663
 80045d8:	08004663 	.word	0x08004663
 80045dc:	08004663 	.word	0x08004663
 80045e0:	08004663 	.word	0x08004663
 80045e4:	08004663 	.word	0x08004663
 80045e8:	08004663 	.word	0x08004663
 80045ec:	0800461f 	.word	0x0800461f
 80045f0:	08004649 	.word	0x08004649
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d107      	bne.n	8004610 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004600:	f107 030a 	add.w	r3, r7, #10
 8004604:	2202      	movs	r2, #2
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 fd31 	bl	8006070 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800460e:	e032      	b.n	8004676 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f001 fcbb 	bl	8005f8e <USBD_CtlError>
            ret = USBD_FAIL;
 8004618:	2303      	movs	r3, #3
 800461a:	75fb      	strb	r3, [r7, #23]
          break;
 800461c:	e02b      	b.n	8004676 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d107      	bne.n	800463a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800462a:	f107 030d 	add.w	r3, r7, #13
 800462e:	2201      	movs	r2, #1
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 fd1c 	bl	8006070 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004638:	e01d      	b.n	8004676 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 fca6 	bl	8005f8e <USBD_CtlError>
            ret = USBD_FAIL;
 8004642:	2303      	movs	r3, #3
 8004644:	75fb      	strb	r3, [r7, #23]
          break;
 8004646:	e016      	b.n	8004676 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b03      	cmp	r3, #3
 8004652:	d00f      	beq.n	8004674 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f001 fc99 	bl	8005f8e <USBD_CtlError>
            ret = USBD_FAIL;
 800465c:	2303      	movs	r3, #3
 800465e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004660:	e008      	b.n	8004674 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fc92 	bl	8005f8e <USBD_CtlError>
          ret = USBD_FAIL;
 800466a:	2303      	movs	r3, #3
 800466c:	75fb      	strb	r3, [r7, #23]
          break;
 800466e:	e002      	b.n	8004676 <USBD_CDC_Setup+0x19e>
          break;
 8004670:	bf00      	nop
 8004672:	e008      	b.n	8004686 <USBD_CDC_Setup+0x1ae>
          break;
 8004674:	bf00      	nop
      }
      break;
 8004676:	e006      	b.n	8004686 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fc87 	bl	8005f8e <USBD_CtlError>
      ret = USBD_FAIL;
 8004680:	2303      	movs	r3, #3
 8004682:	75fb      	strb	r3, [r7, #23]
      break;
 8004684:	bf00      	nop
  }

  return (uint8_t)ret;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80046a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	32b0      	adds	r2, #176	@ 0xb0
 80046ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e065      	b.n	8004786 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	32b0      	adds	r2, #176	@ 0xb0
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3318      	adds	r3, #24
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02f      	beq.n	8004744 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 020f 	and.w	r2, r3, #15
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3318      	adds	r3, #24
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 010f 	and.w	r1, r3, #15
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	460b      	mov	r3, r1
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4403      	add	r3, r0
 800470c:	331c      	adds	r3, #28
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	fbb2 f1f3 	udiv	r1, r2, r3
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d112      	bne.n	8004744 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	3318      	adds	r3, #24
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004736:	78f9      	ldrb	r1, [r7, #3]
 8004738:	2300      	movs	r3, #0
 800473a:	2200      	movs	r2, #0
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f002 f98e 	bl	8006a5e <USBD_LL_Transmit>
 8004742:	e01f      	b.n	8004784 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	33b0      	adds	r3, #176	@ 0xb0
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	33b0      	adds	r3, #176	@ 0xb0
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	32b0      	adds	r2, #176	@ 0xb0
 80047a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	32b0      	adds	r2, #176	@ 0xb0
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80047bc:	2303      	movs	r3, #3
 80047be:	e01a      	b.n	80047f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f002 f98c 	bl	8006ae2 <USBD_LL_GetRxDataSize>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	33b0      	adds	r3, #176	@ 0xb0
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80047f0:	4611      	mov	r1, r2
 80047f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	32b0      	adds	r2, #176	@ 0xb0
 8004810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004814:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800481c:	2303      	movs	r3, #3
 800481e:	e024      	b.n	800486a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	33b0      	adds	r3, #176	@ 0xb0
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d019      	beq.n	8004868 <USBD_CDC_EP0_RxReady+0x6a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800483a:	2bff      	cmp	r3, #255	@ 0xff
 800483c:	d014      	beq.n	8004868 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	33b0      	adds	r3, #176	@ 0xb0
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004856:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800485e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	22ff      	movs	r2, #255	@ 0xff
 8004864:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800487c:	2182      	movs	r1, #130	@ 0x82
 800487e:	4818      	ldr	r0, [pc, #96]	@ (80048e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004880:	f000 fd4f 	bl	8005322 <USBD_GetEpDesc>
 8004884:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004886:	2101      	movs	r1, #1
 8004888:	4815      	ldr	r0, [pc, #84]	@ (80048e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800488a:	f000 fd4a 	bl	8005322 <USBD_GetEpDesc>
 800488e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004890:	2181      	movs	r1, #129	@ 0x81
 8004892:	4813      	ldr	r0, [pc, #76]	@ (80048e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004894:	f000 fd45 	bl	8005322 <USBD_GetEpDesc>
 8004898:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2210      	movs	r2, #16
 80048a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b4:	711a      	strb	r2, [r3, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048c8:	711a      	strb	r2, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2243      	movs	r2, #67	@ 0x43
 80048d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80048d4:	4b02      	ldr	r3, [pc, #8]	@ (80048e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000054 	.word	0x20000054

080048e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80048ec:	2182      	movs	r1, #130	@ 0x82
 80048ee:	4818      	ldr	r0, [pc, #96]	@ (8004950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80048f0:	f000 fd17 	bl	8005322 <USBD_GetEpDesc>
 80048f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80048f6:	2101      	movs	r1, #1
 80048f8:	4815      	ldr	r0, [pc, #84]	@ (8004950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80048fa:	f000 fd12 	bl	8005322 <USBD_GetEpDesc>
 80048fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004900:	2181      	movs	r1, #129	@ 0x81
 8004902:	4813      	ldr	r0, [pc, #76]	@ (8004950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004904:	f000 fd0d 	bl	8005322 <USBD_GetEpDesc>
 8004908:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2210      	movs	r2, #16
 8004914:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d006      	beq.n	800492a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2200      	movs	r2, #0
 8004920:	711a      	strb	r2, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f042 0202 	orr.w	r2, r2, #2
 8004928:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	711a      	strb	r2, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f042 0202 	orr.w	r2, r2, #2
 800493c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2243      	movs	r2, #67	@ 0x43
 8004942:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004944:	4b02      	ldr	r3, [pc, #8]	@ (8004950 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000054 	.word	0x20000054

08004954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800495c:	2182      	movs	r1, #130	@ 0x82
 800495e:	4818      	ldr	r0, [pc, #96]	@ (80049c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004960:	f000 fcdf 	bl	8005322 <USBD_GetEpDesc>
 8004964:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004966:	2101      	movs	r1, #1
 8004968:	4815      	ldr	r0, [pc, #84]	@ (80049c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800496a:	f000 fcda 	bl	8005322 <USBD_GetEpDesc>
 800496e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004970:	2181      	movs	r1, #129	@ 0x81
 8004972:	4813      	ldr	r0, [pc, #76]	@ (80049c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004974:	f000 fcd5 	bl	8005322 <USBD_GetEpDesc>
 8004978:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2210      	movs	r2, #16
 8004984:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d006      	beq.n	800499a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2200      	movs	r2, #0
 8004990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004994:	711a      	strb	r2, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049a8:	711a      	strb	r2, [r3, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2243      	movs	r2, #67	@ 0x43
 80049b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049b4:	4b02      	ldr	r3, [pc, #8]	@ (80049c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000054 	.word	0x20000054

080049c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	220a      	movs	r2, #10
 80049d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80049d2:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000010 	.word	0x20000010

080049e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e009      	b.n	8004a0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	33b0      	adds	r3, #176	@ 0xb0
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	32b0      	adds	r2, #176	@ 0xb0
 8004a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a32:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e008      	b.n	8004a50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	32b0      	adds	r2, #176	@ 0xb0
 8004a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e004      	b.n	8004a8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	32b0      	adds	r2, #176	@ 0xb0
 8004aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e025      	b.n	8004b0a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11f      	bne.n	8004b08 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004ad0:	4b10      	ldr	r3, [pc, #64]	@ (8004b14 <USBD_CDC_TransmitPacket+0x7c>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 020f 	and.w	r2, r3, #15
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4403      	add	r3, r0
 8004aea:	3318      	adds	r3, #24
 8004aec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004aee:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <USBD_CDC_TransmitPacket+0x7c>)
 8004af0:	7819      	ldrb	r1, [r3, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f001 ffad 	bl	8006a5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000097 	.word	0x20000097

08004b18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	32b0      	adds	r2, #176	@ 0xb0
 8004b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	32b0      	adds	r2, #176	@ 0xb0
 8004b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e018      	b.n	8004b78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	7c1b      	ldrb	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <USBD_CDC_ReceivePacket+0x68>)
 8004b50:	7819      	ldrb	r1, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 ff9f 	bl	8006aa0 <USBD_LL_PrepareReceive>
 8004b62:	e008      	b.n	8004b76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <USBD_CDC_ReceivePacket+0x68>)
 8004b66:	7819      	ldrb	r1, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b6e:	2340      	movs	r3, #64	@ 0x40
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 ff95 	bl	8006aa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000098 	.word	0x20000098

08004b84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e01f      	b.n	8004bdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	79fa      	ldrb	r2, [r7, #7]
 8004bce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f001 fe0f 	bl	80067f4 <USBD_LL_Init>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e025      	b.n	8004c48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	32ae      	adds	r2, #174	@ 0xae
 8004c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	32ae      	adds	r2, #174	@ 0xae
 8004c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	f107 020e 	add.w	r2, r7, #14
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4798      	blx	r3
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 fe17 	bl	800688c <USBD_LL_Start>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 f90c 	bl	8005f1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d01a      	beq.n	8004d5c <USBD_LL_SetupStage+0x72>
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d822      	bhi.n	8004d70 <USBD_LL_SetupStage+0x86>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <USBD_LL_SetupStage+0x4a>
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d00a      	beq.n	8004d48 <USBD_LL_SetupStage+0x5e>
 8004d32:	e01d      	b.n	8004d70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb63 	bl	8005408 <USBD_StdDevReq>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]
      break;
 8004d46:	e020      	b.n	8004d8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fbcb 	bl	80054ec <USBD_StdItfReq>
 8004d56:	4603      	mov	r3, r0
 8004d58:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5a:	e016      	b.n	8004d8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fc2d 	bl	80055c4 <USBD_StdEPReq>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6e:	e00c      	b.n	8004d8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004d76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fde4 	bl	800694c <USBD_LL_StallEP>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	bf00      	nop
  }

  return ret;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004da6:	7afb      	ldrb	r3, [r7, #11]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d16e      	bne.n	8004e8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004db2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	f040 8098 	bne.w	8004ef0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d913      	bls.n	8004df4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4293      	cmp	r3, r2
 8004de4:	bf28      	it	cs
 8004de6:	4613      	movcs	r3, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f001 f988 	bl	8006102 <USBD_CtlContinueRx>
 8004df2:	e07d      	b.n	8004ef0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d014      	beq.n	8004e2c <USBD_LL_DataOutStage+0x98>
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d81d      	bhi.n	8004e42 <USBD_LL_DataOutStage+0xae>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <USBD_LL_DataOutStage+0x7c>
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d003      	beq.n	8004e16 <USBD_LL_DataOutStage+0x82>
 8004e0e:	e018      	b.n	8004e42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	75bb      	strb	r3, [r7, #22]
            break;
 8004e14:	e018      	b.n	8004e48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fa64 	bl	80052ee <USBD_CoreFindIF>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75bb      	strb	r3, [r7, #22]
            break;
 8004e2a:	e00d      	b.n	8004e48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	4619      	mov	r1, r3
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fa66 	bl	8005308 <USBD_CoreFindEP>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75bb      	strb	r3, [r7, #22]
            break;
 8004e40:	e002      	b.n	8004e48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75bb      	strb	r3, [r7, #22]
            break;
 8004e46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004e48:	7dbb      	ldrb	r3, [r7, #22]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d113      	bne.n	8004e82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004e5a:	7dba      	ldrb	r2, [r7, #22]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	32ae      	adds	r2, #174	@ 0xae
 8004e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004e6a:	7dba      	ldrb	r2, [r7, #22]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004e72:	7dba      	ldrb	r2, [r7, #22]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	32ae      	adds	r2, #174	@ 0xae
 8004e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f001 f94e 	bl	8006124 <USBD_CtlSendStatus>
 8004e88:	e032      	b.n	8004ef0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
 8004e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fa37 	bl	8005308 <USBD_CoreFindEP>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004e9e:	7dbb      	ldrb	r3, [r7, #22]
 8004ea0:	2bff      	cmp	r3, #255	@ 0xff
 8004ea2:	d025      	beq.n	8004ef0 <USBD_LL_DataOutStage+0x15c>
 8004ea4:	7dbb      	ldrb	r3, [r7, #22]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d122      	bne.n	8004ef0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d117      	bne.n	8004ee6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004eb6:	7dba      	ldrb	r2, [r7, #22]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	32ae      	adds	r2, #174	@ 0xae
 8004ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00f      	beq.n	8004ee6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004ec6:	7dba      	ldrb	r2, [r7, #22]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004ece:	7dba      	ldrb	r2, [r7, #22]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	32ae      	adds	r2, #174	@ 0xae
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	7afa      	ldrb	r2, [r7, #11]
 8004edc:	4611      	mov	r1, r2
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	4798      	blx	r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	e000      	b.n	8004ef2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b086      	sub	sp, #24
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	460b      	mov	r3, r1
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004f08:	7afb      	ldrb	r3, [r7, #11]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d16f      	bne.n	8004fee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3314      	adds	r3, #20
 8004f12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d15a      	bne.n	8004fd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d914      	bls.n	8004f54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f001 f8b0 	bl	80060a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f46:	2300      	movs	r3, #0
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f001 fda7 	bl	8006aa0 <USBD_LL_PrepareReceive>
 8004f52:	e03f      	b.n	8004fd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d11c      	bne.n	8004f9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d316      	bcc.n	8004f9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d20f      	bcs.n	8004f9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f001 f891 	bl	80060a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f001 fd84 	bl	8006aa0 <USBD_LL_PrepareReceive>
 8004f98:	e01c      	b.n	8004fd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d10f      	bne.n	8004fc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fc6:	2180      	movs	r1, #128	@ 0x80
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f001 fcbf 	bl	800694c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f001 f8bb 	bl	800614a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d03a      	beq.n	8005054 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff fe42 	bl	8004c68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004fec:	e032      	b.n	8005054 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f985 	bl	8005308 <USBD_CoreFindEP>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2bff      	cmp	r3, #255	@ 0xff
 8005006:	d025      	beq.n	8005054 <USBD_LL_DataInStage+0x15a>
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d122      	bne.n	8005054 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b03      	cmp	r3, #3
 8005018:	d11c      	bne.n	8005054 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800501a:	7dfa      	ldrb	r2, [r7, #23]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	32ae      	adds	r2, #174	@ 0xae
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d014      	beq.n	8005054 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800502a:	7dfa      	ldrb	r2, [r7, #23]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005032:	7dfa      	ldrb	r2, [r7, #23]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	32ae      	adds	r2, #174	@ 0xae
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	7afa      	ldrb	r2, [r7, #11]
 8005040:	4611      	mov	r1, r2
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	4798      	blx	r3
 8005046:	4603      	mov	r3, r0
 8005048:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800504a:	7dbb      	ldrb	r3, [r7, #22]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005050:	7dbb      	ldrb	r3, [r7, #22]
 8005052:	e000      	b.n	8005056 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d014      	beq.n	80050c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6852      	ldr	r2, [r2, #4]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	4611      	mov	r1, r2
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80050c0:	2303      	movs	r3, #3
 80050c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050c4:	2340      	movs	r3, #64	@ 0x40
 80050c6:	2200      	movs	r2, #0
 80050c8:	2100      	movs	r1, #0
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 fbf9 	bl	80068c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2240      	movs	r2, #64	@ 0x40
 80050dc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050e0:	2340      	movs	r3, #64	@ 0x40
 80050e2:	2200      	movs	r2, #0
 80050e4:	2180      	movs	r1, #128	@ 0x80
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 fbeb 	bl	80068c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2240      	movs	r2, #64	@ 0x40
 80050f6:	621a      	str	r2, [r3, #32]

  return ret;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b04      	cmp	r3, #4
 8005134:	d006      	beq.n	8005144 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800513c:	b2da      	uxtb	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b04      	cmp	r3, #4
 800516c:	d106      	bne.n	800517c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005174:	b2da      	uxtb	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d110      	bne.n	80051c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00b      	beq.n	80051c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	32ae      	adds	r2, #174	@ 0xae
 80051e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e01c      	b.n	8005226 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d115      	bne.n	8005224 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	32ae      	adds	r2, #174	@ 0xae
 8005202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	32ae      	adds	r2, #174	@ 0xae
 8005216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	4611      	mov	r1, r2
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	32ae      	adds	r2, #174	@ 0xae
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	e01c      	b.n	800528a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d115      	bne.n	8005288 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	32ae      	adds	r2, #174	@ 0xae
 8005266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	32ae      	adds	r2, #174	@ 0xae
 800527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	4611      	mov	r1, r2
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	4611      	mov	r1, r2
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80052e0:	2303      	movs	r3, #3
 80052e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80052fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005314:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	885b      	ldrh	r3, [r3, #2]
 800533e:	b29b      	uxth	r3, r3
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	4293      	cmp	r3, r2
 8005346:	d91f      	bls.n	8005388 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800534e:	e013      	b.n	8005378 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005350:	f107 030a 	add.w	r3, r7, #10
 8005354:	4619      	mov	r1, r3
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f000 f81b 	bl	8005392 <USBD_GetNextDesc>
 800535c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b05      	cmp	r3, #5
 8005364:	d108      	bne.n	8005378 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	789b      	ldrb	r3, [r3, #2]
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	429a      	cmp	r2, r3
 8005372:	d008      	beq.n	8005386 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	885b      	ldrh	r3, [r3, #2]
 800537c:	b29a      	uxth	r2, r3
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	429a      	cmp	r2, r3
 8005382:	d8e5      	bhi.n	8005350 <USBD_GetEpDesc+0x2e>
 8005384:	e000      	b.n	8005388 <USBD_GetEpDesc+0x66>
          break;
 8005386:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005388:	693b      	ldr	r3, [r7, #16]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3301      	adds	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80053e8:	8a3b      	ldrh	r3, [r7, #16]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	b21a      	sxth	r2, r3
 80053ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80053f8:	89fb      	ldrh	r3, [r7, #14]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800541e:	2b40      	cmp	r3, #64	@ 0x40
 8005420:	d005      	beq.n	800542e <USBD_StdDevReq+0x26>
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d857      	bhi.n	80054d6 <USBD_StdDevReq+0xce>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00f      	beq.n	800544a <USBD_StdDevReq+0x42>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d153      	bne.n	80054d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	32ae      	adds	r2, #174	@ 0xae
 8005438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4798      	blx	r3
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]
      break;
 8005448:	e04a      	b.n	80054e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b09      	cmp	r3, #9
 8005450:	d83b      	bhi.n	80054ca <USBD_StdDevReq+0xc2>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <USBD_StdDevReq+0x50>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080054cb 	.word	0x080054cb
 8005464:	080054b7 	.word	0x080054b7
 8005468:	080054cb 	.word	0x080054cb
 800546c:	0800548b 	.word	0x0800548b
 8005470:	08005481 	.word	0x08005481
 8005474:	080054cb 	.word	0x080054cb
 8005478:	080054a3 	.word	0x080054a3
 800547c:	08005495 	.word	0x08005495
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa3c 	bl	8005900 <USBD_GetDescriptor>
          break;
 8005488:	e024      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fba1 	bl	8005bd4 <USBD_SetAddress>
          break;
 8005492:	e01f      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fbe0 	bl	8005c5c <USBD_SetConfig>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
          break;
 80054a0:	e018      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fc83 	bl	8005db0 <USBD_GetConfig>
          break;
 80054aa:	e013      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fcb4 	bl	8005e1c <USBD_GetStatus>
          break;
 80054b4:	e00e      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fce3 	bl	8005e84 <USBD_SetFeature>
          break;
 80054be:	e009      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fd07 	bl	8005ed6 <USBD_ClrFeature>
          break;
 80054c8:	e004      	b.n	80054d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fd5e 	bl	8005f8e <USBD_CtlError>
          break;
 80054d2:	bf00      	nop
      }
      break;
 80054d4:	e004      	b.n	80054e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fd58 	bl	8005f8e <USBD_CtlError>
      break;
 80054de:	bf00      	nop
  }

  return ret;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop

080054ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005502:	2b40      	cmp	r3, #64	@ 0x40
 8005504:	d005      	beq.n	8005512 <USBD_StdItfReq+0x26>
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d852      	bhi.n	80055b0 <USBD_StdItfReq+0xc4>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <USBD_StdItfReq+0x26>
 800550e:	2b20      	cmp	r3, #32
 8005510:	d14e      	bne.n	80055b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005518:	b2db      	uxtb	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	2b02      	cmp	r3, #2
 800551e:	d840      	bhi.n	80055a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	889b      	ldrh	r3, [r3, #4]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d836      	bhi.n	8005598 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	889b      	ldrh	r3, [r3, #4]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fedb 	bl	80052ee <USBD_CoreFindIF>
 8005538:	4603      	mov	r3, r0
 800553a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800553c:	7bbb      	ldrb	r3, [r7, #14]
 800553e:	2bff      	cmp	r3, #255	@ 0xff
 8005540:	d01d      	beq.n	800557e <USBD_StdItfReq+0x92>
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11a      	bne.n	800557e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005548:	7bba      	ldrb	r2, [r7, #14]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	32ae      	adds	r2, #174	@ 0xae
 800554e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00f      	beq.n	8005578 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005558:	7bba      	ldrb	r2, [r7, #14]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005560:	7bba      	ldrb	r2, [r7, #14]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	32ae      	adds	r2, #174	@ 0xae
 8005566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
 8005572:	4603      	mov	r3, r0
 8005574:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005576:	e004      	b.n	8005582 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005578:	2303      	movs	r3, #3
 800557a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800557c:	e001      	b.n	8005582 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800557e:	2303      	movs	r3, #3
 8005580:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d110      	bne.n	80055ac <USBD_StdItfReq+0xc0>
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10d      	bne.n	80055ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fdc7 	bl	8006124 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005596:	e009      	b.n	80055ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fcf7 	bl	8005f8e <USBD_CtlError>
          break;
 80055a0:	e004      	b.n	80055ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fcf2 	bl	8005f8e <USBD_CtlError>
          break;
 80055aa:	e000      	b.n	80055ae <USBD_StdItfReq+0xc2>
          break;
 80055ac:	bf00      	nop
      }
      break;
 80055ae:	e004      	b.n	80055ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fceb 	bl	8005f8e <USBD_CtlError>
      break;
 80055b8:	bf00      	nop
  }

  return ret;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	889b      	ldrh	r3, [r3, #4]
 80055d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055e0:	2b40      	cmp	r3, #64	@ 0x40
 80055e2:	d007      	beq.n	80055f4 <USBD_StdEPReq+0x30>
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	f200 817f 	bhi.w	80058e8 <USBD_StdEPReq+0x324>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02a      	beq.n	8005644 <USBD_StdEPReq+0x80>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	f040 817a 	bne.w	80058e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fe85 	bl	8005308 <USBD_CoreFindEP>
 80055fe:	4603      	mov	r3, r0
 8005600:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005602:	7b7b      	ldrb	r3, [r7, #13]
 8005604:	2bff      	cmp	r3, #255	@ 0xff
 8005606:	f000 8174 	beq.w	80058f2 <USBD_StdEPReq+0x32e>
 800560a:	7b7b      	ldrb	r3, [r7, #13]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 8170 	bne.w	80058f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005612:	7b7a      	ldrb	r2, [r7, #13]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800561a:	7b7a      	ldrb	r2, [r7, #13]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	32ae      	adds	r2, #174	@ 0xae
 8005620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8163 	beq.w	80058f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800562c:	7b7a      	ldrb	r2, [r7, #13]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	32ae      	adds	r2, #174	@ 0xae
 8005632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005642:	e156      	b.n	80058f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d008      	beq.n	800565e <USBD_StdEPReq+0x9a>
 800564c:	2b03      	cmp	r3, #3
 800564e:	f300 8145 	bgt.w	80058dc <USBD_StdEPReq+0x318>
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 809b 	beq.w	800578e <USBD_StdEPReq+0x1ca>
 8005658:	2b01      	cmp	r3, #1
 800565a:	d03c      	beq.n	80056d6 <USBD_StdEPReq+0x112>
 800565c:	e13e      	b.n	80058dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d002      	beq.n	8005670 <USBD_StdEPReq+0xac>
 800566a:	2b03      	cmp	r3, #3
 800566c:	d016      	beq.n	800569c <USBD_StdEPReq+0xd8>
 800566e:	e02c      	b.n	80056ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005670:	7bbb      	ldrb	r3, [r7, #14]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <USBD_StdEPReq+0xce>
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	2b80      	cmp	r3, #128	@ 0x80
 800567a:	d00a      	beq.n	8005692 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 f963 	bl	800694c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005686:	2180      	movs	r1, #128	@ 0x80
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 f95f 	bl	800694c <USBD_LL_StallEP>
 800568e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005690:	e020      	b.n	80056d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fc7a 	bl	8005f8e <USBD_CtlError>
              break;
 800569a:	e01b      	b.n	80056d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	885b      	ldrh	r3, [r3, #2]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10e      	bne.n	80056c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <USBD_StdEPReq+0xfe>
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	2b80      	cmp	r3, #128	@ 0x80
 80056ae:	d008      	beq.n	80056c2 <USBD_StdEPReq+0xfe>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	88db      	ldrh	r3, [r3, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 f945 	bl	800694c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fd2e 	bl	8006124 <USBD_CtlSendStatus>

              break;
 80056c8:	e004      	b.n	80056d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fc5e 	bl	8005f8e <USBD_CtlError>
              break;
 80056d2:	bf00      	nop
          }
          break;
 80056d4:	e107      	b.n	80058e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d002      	beq.n	80056e8 <USBD_StdEPReq+0x124>
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d016      	beq.n	8005714 <USBD_StdEPReq+0x150>
 80056e6:	e04b      	b.n	8005780 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <USBD_StdEPReq+0x146>
 80056ee:	7bbb      	ldrb	r3, [r7, #14]
 80056f0:	2b80      	cmp	r3, #128	@ 0x80
 80056f2:	d00a      	beq.n	800570a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f927 	bl	800694c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056fe:	2180      	movs	r1, #128	@ 0x80
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f923 	bl	800694c <USBD_LL_StallEP>
 8005706:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005708:	e040      	b.n	800578c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fc3e 	bl	8005f8e <USBD_CtlError>
              break;
 8005712:	e03b      	b.n	800578c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	885b      	ldrh	r3, [r3, #2]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d136      	bne.n	800578a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 f92d 	bl	800698a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fcf7 	bl	8006124 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005736:	7bbb      	ldrb	r3, [r7, #14]
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fde4 	bl	8005308 <USBD_CoreFindEP>
 8005740:	4603      	mov	r3, r0
 8005742:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005744:	7b7b      	ldrb	r3, [r7, #13]
 8005746:	2bff      	cmp	r3, #255	@ 0xff
 8005748:	d01f      	beq.n	800578a <USBD_StdEPReq+0x1c6>
 800574a:	7b7b      	ldrb	r3, [r7, #13]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11c      	bne.n	800578a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005750:	7b7a      	ldrb	r2, [r7, #13]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005758:	7b7a      	ldrb	r2, [r7, #13]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32ae      	adds	r2, #174	@ 0xae
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005768:	7b7a      	ldrb	r2, [r7, #13]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	32ae      	adds	r2, #174	@ 0xae
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800577e:	e004      	b.n	800578a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fc03 	bl	8005f8e <USBD_CtlError>
              break;
 8005788:	e000      	b.n	800578c <USBD_StdEPReq+0x1c8>
              break;
 800578a:	bf00      	nop
          }
          break;
 800578c:	e0ab      	b.n	80058e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d002      	beq.n	80057a0 <USBD_StdEPReq+0x1dc>
 800579a:	2b03      	cmp	r3, #3
 800579c:	d032      	beq.n	8005804 <USBD_StdEPReq+0x240>
 800579e:	e097      	b.n	80058d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <USBD_StdEPReq+0x1f2>
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b80      	cmp	r3, #128	@ 0x80
 80057aa:	d004      	beq.n	80057b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fbed 	bl	8005f8e <USBD_CtlError>
                break;
 80057b4:	e091      	b.n	80058da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da0b      	bge.n	80057d6 <USBD_StdEPReq+0x212>
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	3310      	adds	r3, #16
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	3304      	adds	r3, #4
 80057d4:	e00b      	b.n	80057ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057d6:	7bbb      	ldrb	r3, [r7, #14]
 80057d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	3304      	adds	r3, #4
 80057ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2202      	movs	r2, #2
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc37 	bl	8006070 <USBD_CtlSendData>
              break;
 8005802:	e06a      	b.n	80058da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005808:	2b00      	cmp	r3, #0
 800580a:	da11      	bge.n	8005830 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	f003 020f 	and.w	r2, r3, #15
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	3324      	adds	r3, #36	@ 0x24
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d117      	bne.n	8005856 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fbb0 	bl	8005f8e <USBD_CtlError>
                  break;
 800582e:	e054      	b.n	80058da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	f003 020f 	and.w	r2, r3, #15
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fb9d 	bl	8005f8e <USBD_CtlError>
                  break;
 8005854:	e041      	b.n	80058da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800585a:	2b00      	cmp	r3, #0
 800585c:	da0b      	bge.n	8005876 <USBD_StdEPReq+0x2b2>
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3310      	adds	r3, #16
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	3304      	adds	r3, #4
 8005874:	e00b      	b.n	800588e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	3304      	adds	r3, #4
 800588e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005890:	7bbb      	ldrb	r3, [r7, #14]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <USBD_StdEPReq+0x2d8>
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	2b80      	cmp	r3, #128	@ 0x80
 800589a:	d103      	bne.n	80058a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e00e      	b.n	80058c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 f88d 	bl	80069c8 <USBD_LL_IsStallEP>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e002      	b.n	80058c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2202      	movs	r2, #2
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fbd1 	bl	8006070 <USBD_CtlSendData>
              break;
 80058ce:	e004      	b.n	80058da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fb5b 	bl	8005f8e <USBD_CtlError>
              break;
 80058d8:	bf00      	nop
          }
          break;
 80058da:	e004      	b.n	80058e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fb55 	bl	8005f8e <USBD_CtlError>
          break;
 80058e4:	bf00      	nop
      }
      break;
 80058e6:	e005      	b.n	80058f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fb4f 	bl	8005f8e <USBD_CtlError>
      break;
 80058f0:	e000      	b.n	80058f4 <USBD_StdEPReq+0x330>
      break;
 80058f2:	bf00      	nop
  }

  return ret;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	2b06      	cmp	r3, #6
 8005922:	f200 8128 	bhi.w	8005b76 <USBD_GetDescriptor+0x276>
 8005926:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <USBD_GetDescriptor+0x2c>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005949 	.word	0x08005949
 8005930:	08005961 	.word	0x08005961
 8005934:	080059a1 	.word	0x080059a1
 8005938:	08005b77 	.word	0x08005b77
 800593c:	08005b77 	.word	0x08005b77
 8005940:	08005b17 	.word	0x08005b17
 8005944:	08005b43 	.word	0x08005b43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	7c12      	ldrb	r2, [r2, #16]
 8005954:	f107 0108 	add.w	r1, r7, #8
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	60f8      	str	r0, [r7, #12]
      break;
 800595e:	e112      	b.n	8005b86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7c1b      	ldrb	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10d      	bne.n	8005984 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	f107 0208 	add.w	r2, r7, #8
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
 8005978:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	2202      	movs	r2, #2
 8005980:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005982:	e100      	b.n	8005b86 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	f107 0208 	add.w	r2, r7, #8
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
 8005994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	2202      	movs	r2, #2
 800599c:	701a      	strb	r2, [r3, #0]
      break;
 800599e:	e0f2      	b.n	8005b86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	885b      	ldrh	r3, [r3, #2]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	f200 80ac 	bhi.w	8005b04 <USBD_GetDescriptor+0x204>
 80059ac:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <USBD_GetDescriptor+0xb4>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059cd 	.word	0x080059cd
 80059b8:	08005a01 	.word	0x08005a01
 80059bc:	08005a35 	.word	0x08005a35
 80059c0:	08005a69 	.word	0x08005a69
 80059c4:	08005a9d 	.word	0x08005a9d
 80059c8:	08005ad1 	.word	0x08005ad1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	7c12      	ldrb	r2, [r2, #16]
 80059e4:	f107 0108 	add.w	r1, r7, #8
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
 80059ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059ee:	e091      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 facb 	bl	8005f8e <USBD_CtlError>
            err++;
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	3301      	adds	r3, #1
 80059fc:	72fb      	strb	r3, [r7, #11]
          break;
 80059fe:	e089      	b.n	8005b14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	7c12      	ldrb	r2, [r2, #16]
 8005a18:	f107 0108 	add.w	r1, r7, #8
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
 8005a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a22:	e077      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fab1 	bl	8005f8e <USBD_CtlError>
            err++;
 8005a2c:	7afb      	ldrb	r3, [r7, #11]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	72fb      	strb	r3, [r7, #11]
          break;
 8005a32:	e06f      	b.n	8005b14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	7c12      	ldrb	r2, [r2, #16]
 8005a4c:	f107 0108 	add.w	r1, r7, #8
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
 8005a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a56:	e05d      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa97 	bl	8005f8e <USBD_CtlError>
            err++;
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	3301      	adds	r3, #1
 8005a64:	72fb      	strb	r3, [r7, #11]
          break;
 8005a66:	e055      	b.n	8005b14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	7c12      	ldrb	r2, [r2, #16]
 8005a80:	f107 0108 	add.w	r1, r7, #8
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a8a:	e043      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa7d 	bl	8005f8e <USBD_CtlError>
            err++;
 8005a94:	7afb      	ldrb	r3, [r7, #11]
 8005a96:	3301      	adds	r3, #1
 8005a98:	72fb      	strb	r3, [r7, #11]
          break;
 8005a9a:	e03b      	b.n	8005b14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	7c12      	ldrb	r2, [r2, #16]
 8005ab4:	f107 0108 	add.w	r1, r7, #8
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005abe:	e029      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa63 	bl	8005f8e <USBD_CtlError>
            err++;
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	3301      	adds	r3, #1
 8005acc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ace:	e021      	b.n	8005b14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	7c12      	ldrb	r2, [r2, #16]
 8005ae8:	f107 0108 	add.w	r1, r7, #8
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
 8005af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af2:	e00f      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa49 	bl	8005f8e <USBD_CtlError>
            err++;
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	3301      	adds	r3, #1
 8005b00:	72fb      	strb	r3, [r7, #11]
          break;
 8005b02:	e007      	b.n	8005b14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa41 	bl	8005f8e <USBD_CtlError>
          err++;
 8005b0c:	7afb      	ldrb	r3, [r7, #11]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005b12:	bf00      	nop
      }
      break;
 8005b14:	e037      	b.n	8005b86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7c1b      	ldrb	r3, [r3, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b26:	f107 0208 	add.w	r2, r7, #8
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4798      	blx	r3
 8005b2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b30:	e029      	b.n	8005b86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa2a 	bl	8005f8e <USBD_CtlError>
        err++;
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005b40:	e021      	b.n	8005b86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7c1b      	ldrb	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10d      	bne.n	8005b66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	f107 0208 	add.w	r2, r7, #8
 8005b56:	4610      	mov	r0, r2
 8005b58:	4798      	blx	r3
 8005b5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	2207      	movs	r2, #7
 8005b62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b64:	e00f      	b.n	8005b86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fa10 	bl	8005f8e <USBD_CtlError>
        err++;
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	3301      	adds	r3, #1
 8005b72:	72fb      	strb	r3, [r7, #11]
      break;
 8005b74:	e007      	b.n	8005b86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fa08 	bl	8005f8e <USBD_CtlError>
      err++;
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	3301      	adds	r3, #1
 8005b82:	72fb      	strb	r3, [r7, #11]
      break;
 8005b84:	bf00      	nop
  }

  if (err != 0U)
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11e      	bne.n	8005bca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	88db      	ldrh	r3, [r3, #6]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d016      	beq.n	8005bc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005b94:	893b      	ldrh	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	88da      	ldrh	r2, [r3, #6]
 8005b9e:	893b      	ldrh	r3, [r7, #8]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	bf28      	it	cs
 8005ba4:	4613      	movcs	r3, r2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005baa:	893b      	ldrh	r3, [r7, #8]
 8005bac:	461a      	mov	r2, r3
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa5d 	bl	8006070 <USBD_CtlSendData>
 8005bb6:	e009      	b.n	8005bcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9e7 	bl	8005f8e <USBD_CtlError>
 8005bc0:	e004      	b.n	8005bcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 faae 	bl	8006124 <USBD_CtlSendStatus>
 8005bc8:	e000      	b.n	8005bcc <USBD_GetDescriptor+0x2cc>
    return;
 8005bca:	bf00      	nop
  }
}
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop

08005bd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	889b      	ldrh	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d131      	bne.n	8005c4a <USBD_SetAddress+0x76>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d12d      	bne.n	8005c4a <USBD_SetAddress+0x76>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	885b      	ldrh	r3, [r3, #2]
 8005bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf4:	d829      	bhi.n	8005c4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	885b      	ldrh	r3, [r3, #2]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d104      	bne.n	8005c18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9bc 	bl	8005f8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c16:	e01d      	b.n	8005c54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7bfa      	ldrb	r2, [r7, #15]
 8005c1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fefb 	bl	8006a20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa7a 	bl	8006124 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3e:	e009      	b.n	8005c54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c48:	e004      	b.n	8005c54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f99e 	bl	8005f8e <USBD_CtlError>
  }
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	885b      	ldrh	r3, [r3, #2]
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	4b4e      	ldr	r3, [pc, #312]	@ (8005dac <USBD_SetConfig+0x150>)
 8005c72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c74:	4b4d      	ldr	r3, [pc, #308]	@ (8005dac <USBD_SetConfig+0x150>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d905      	bls.n	8005c88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f985 	bl	8005f8e <USBD_CtlError>
    return USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e08c      	b.n	8005da2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d002      	beq.n	8005c9a <USBD_SetConfig+0x3e>
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d029      	beq.n	8005cec <USBD_SetConfig+0x90>
 8005c98:	e075      	b.n	8005d86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005c9a:	4b44      	ldr	r3, [pc, #272]	@ (8005dac <USBD_SetConfig+0x150>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005ca2:	4b42      	ldr	r3, [pc, #264]	@ (8005dac <USBD_SetConfig+0x150>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005cac:	4b3f      	ldr	r3, [pc, #252]	@ (8005dac <USBD_SetConfig+0x150>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fe ffe3 	bl	8004c7e <USBD_SetClassConfig>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f962 	bl	8005f8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005cd2:	e065      	b.n	8005da0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fa25 	bl	8006124 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005ce2:	e05d      	b.n	8005da0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa1d 	bl	8006124 <USBD_CtlSendStatus>
      break;
 8005cea:	e059      	b.n	8005da0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005cec:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <USBD_SetConfig+0x150>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d112      	bne.n	8005d1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8005dac <USBD_SetConfig+0x150>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d06:	4b29      	ldr	r3, [pc, #164]	@ (8005dac <USBD_SetConfig+0x150>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fe ffd2 	bl	8004cb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa06 	bl	8006124 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d18:	e042      	b.n	8005da0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005d1a:	4b24      	ldr	r3, [pc, #144]	@ (8005dac <USBD_SetConfig+0x150>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d02a      	beq.n	8005d7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fe ffc0 	bl	8004cb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005d36:	4b1d      	ldr	r3, [pc, #116]	@ (8005dac <USBD_SetConfig+0x150>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d40:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <USBD_SetConfig+0x150>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fe ff99 	bl	8004c7e <USBD_SetClassConfig>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f918 	bl	8005f8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe ffa5 	bl	8004cb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005d74:	e014      	b.n	8005da0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f9d4 	bl	8006124 <USBD_CtlSendStatus>
      break;
 8005d7c:	e010      	b.n	8005da0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9d0 	bl	8006124 <USBD_CtlSendStatus>
      break;
 8005d84:	e00c      	b.n	8005da0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f900 	bl	8005f8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d8e:	4b07      	ldr	r3, [pc, #28]	@ (8005dac <USBD_SetConfig+0x150>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fe ff8e 	bl	8004cb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9e:	bf00      	nop
  }

  return ret;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000120 	.word	0x20000120

08005db0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	88db      	ldrh	r3, [r3, #6]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d004      	beq.n	8005dcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f8e2 	bl	8005f8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005dca:	e023      	b.n	8005e14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	dc02      	bgt.n	8005dde <USBD_GetConfig+0x2e>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dc03      	bgt.n	8005de4 <USBD_GetConfig+0x34>
 8005ddc:	e015      	b.n	8005e0a <USBD_GetConfig+0x5a>
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d00b      	beq.n	8005dfa <USBD_GetConfig+0x4a>
 8005de2:	e012      	b.n	8005e0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3308      	adds	r3, #8
 8005dee:	2201      	movs	r2, #1
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f93c 	bl	8006070 <USBD_CtlSendData>
        break;
 8005df8:	e00c      	b.n	8005e14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f934 	bl	8006070 <USBD_CtlSendData>
        break;
 8005e08:	e004      	b.n	8005e14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f8be 	bl	8005f8e <USBD_CtlError>
        break;
 8005e12:	bf00      	nop
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d81e      	bhi.n	8005e72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	88db      	ldrh	r3, [r3, #6]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d004      	beq.n	8005e46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8a5 	bl	8005f8e <USBD_CtlError>
        break;
 8005e44:	e01a      	b.n	8005e7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f043 0202 	orr.w	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	330c      	adds	r3, #12
 8005e66:	2202      	movs	r2, #2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f900 	bl	8006070 <USBD_CtlSendData>
      break;
 8005e70:	e004      	b.n	8005e7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f88a 	bl	8005f8e <USBD_CtlError>
      break;
 8005e7a:	bf00      	nop
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d107      	bne.n	8005ea6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f940 	bl	8006124 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005ea4:	e013      	b.n	8005ece <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	885b      	ldrh	r3, [r3, #2]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d10b      	bne.n	8005ec6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	889b      	ldrh	r3, [r3, #4]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f930 	bl	8006124 <USBD_CtlSendStatus>
}
 8005ec4:	e003      	b.n	8005ece <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f860 	bl	8005f8e <USBD_CtlError>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d80b      	bhi.n	8005f06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	885b      	ldrh	r3, [r3, #2]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d10c      	bne.n	8005f10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f910 	bl	8006124 <USBD_CtlSendStatus>
      }
      break;
 8005f04:	e004      	b.n	8005f10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f840 	bl	8005f8e <USBD_CtlError>
      break;
 8005f0e:	e000      	b.n	8005f12 <USBD_ClrFeature+0x3c>
      break;
 8005f10:	bf00      	nop
  }
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fa40 	bl	80053ca <SWAPBYTE>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff fa33 	bl	80053ca <SWAPBYTE>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fa26 	bl	80053ca <SWAPBYTE>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	80da      	strh	r2, [r3, #6]
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f98:	2180      	movs	r1, #128	@ 0x80
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fcd6 	bl	800694c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fcd2 	bl	800694c <USBD_LL_StallEP>
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d036      	beq.n	8006034 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005fca:	6938      	ldr	r0, [r7, #16]
 8005fcc:	f000 f836 	bl	800603c <USBD_GetLen>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	3301      	adds	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006000:	e013      	b.n	800602a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	4413      	add	r3, r2
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3301      	adds	r3, #1
 8006012:	613b      	str	r3, [r7, #16]
    idx++;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	3301      	adds	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	4413      	add	r3, r2
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
    idx++;
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	3301      	adds	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e7      	bne.n	8006002 <USBD_GetString+0x52>
 8006032:	e000      	b.n	8006036 <USBD_GetString+0x86>
    return;
 8006034:	bf00      	nop
  }
}
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800604c:	e005      	b.n	800605a <USBD_GetLen+0x1e>
  {
    len++;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	3301      	adds	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3301      	adds	r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f5      	bne.n	800604e <USBD_GetLen+0x12>
  }

  return len;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2202      	movs	r2, #2
 8006080:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	2100      	movs	r1, #0
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fce1 	bl	8006a5e <USBD_LL_Transmit>

  return USBD_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	2100      	movs	r1, #0
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fcd0 	bl	8006a5e <USBD_LL_Transmit>

  return USBD_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2203      	movs	r2, #3
 80060d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	2100      	movs	r1, #0
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 fcd4 	bl	8006aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	2100      	movs	r1, #0
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fcc3 	bl	8006aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2204      	movs	r2, #4
 8006130:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006134:	2300      	movs	r3, #0
 8006136:	2200      	movs	r2, #0
 8006138:	2100      	movs	r1, #0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fc8f 	bl	8006a5e <USBD_LL_Transmit>

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2205      	movs	r2, #5
 8006156:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800615a:	2300      	movs	r3, #0
 800615c:	2200      	movs	r2, #0
 800615e:	2100      	movs	r1, #0
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc9d 	bl	8006aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006174:	2200      	movs	r2, #0
 8006176:	4912      	ldr	r1, [pc, #72]	@ (80061c0 <MX_USB_DEVICE_Init+0x50>)
 8006178:	4812      	ldr	r0, [pc, #72]	@ (80061c4 <MX_USB_DEVICE_Init+0x54>)
 800617a:	f7fe fd03 	bl	8004b84 <USBD_Init>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006184:	f7fa fa82 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006188:	490f      	ldr	r1, [pc, #60]	@ (80061c8 <MX_USB_DEVICE_Init+0x58>)
 800618a:	480e      	ldr	r0, [pc, #56]	@ (80061c4 <MX_USB_DEVICE_Init+0x54>)
 800618c:	f7fe fd2a 	bl	8004be4 <USBD_RegisterClass>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006196:	f7fa fa79 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800619a:	490c      	ldr	r1, [pc, #48]	@ (80061cc <MX_USB_DEVICE_Init+0x5c>)
 800619c:	4809      	ldr	r0, [pc, #36]	@ (80061c4 <MX_USB_DEVICE_Init+0x54>)
 800619e:	f7fe fc21 	bl	80049e4 <USBD_CDC_RegisterInterface>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061a8:	f7fa fa70 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061ac:	4805      	ldr	r0, [pc, #20]	@ (80061c4 <MX_USB_DEVICE_Init+0x54>)
 80061ae:	f7fe fd4f 	bl	8004c50 <USBD_Start>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80061b8:	f7fa fa68 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200000b0 	.word	0x200000b0
 80061c4:	20000124 	.word	0x20000124
 80061c8:	2000001c 	.word	0x2000001c
 80061cc:	2000009c 	.word	0x2000009c

080061d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80061d4:	2200      	movs	r2, #0
 80061d6:	4905      	ldr	r1, [pc, #20]	@ (80061ec <CDC_Init_FS+0x1c>)
 80061d8:	4805      	ldr	r0, [pc, #20]	@ (80061f0 <CDC_Init_FS+0x20>)
 80061da:	f7fe fc1d 	bl	8004a18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80061de:	4905      	ldr	r1, [pc, #20]	@ (80061f4 <CDC_Init_FS+0x24>)
 80061e0:	4803      	ldr	r0, [pc, #12]	@ (80061f0 <CDC_Init_FS+0x20>)
 80061e2:	f7fe fc3b 	bl	8004a5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80061e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000c00 	.word	0x20000c00
 80061f0:	20000124 	.word	0x20000124
 80061f4:	20000400 	.word	0x20000400

080061f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80061fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	6039      	str	r1, [r7, #0]
 8006212:	71fb      	strb	r3, [r7, #7]
 8006214:	4613      	mov	r3, r2
 8006216:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	2b23      	cmp	r3, #35	@ 0x23
 800621c:	d84a      	bhi.n	80062b4 <CDC_Control_FS+0xac>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <CDC_Control_FS+0x1c>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	080062b5 	.word	0x080062b5
 8006228:	080062b5 	.word	0x080062b5
 800622c:	080062b5 	.word	0x080062b5
 8006230:	080062b5 	.word	0x080062b5
 8006234:	080062b5 	.word	0x080062b5
 8006238:	080062b5 	.word	0x080062b5
 800623c:	080062b5 	.word	0x080062b5
 8006240:	080062b5 	.word	0x080062b5
 8006244:	080062b5 	.word	0x080062b5
 8006248:	080062b5 	.word	0x080062b5
 800624c:	080062b5 	.word	0x080062b5
 8006250:	080062b5 	.word	0x080062b5
 8006254:	080062b5 	.word	0x080062b5
 8006258:	080062b5 	.word	0x080062b5
 800625c:	080062b5 	.word	0x080062b5
 8006260:	080062b5 	.word	0x080062b5
 8006264:	080062b5 	.word	0x080062b5
 8006268:	080062b5 	.word	0x080062b5
 800626c:	080062b5 	.word	0x080062b5
 8006270:	080062b5 	.word	0x080062b5
 8006274:	080062b5 	.word	0x080062b5
 8006278:	080062b5 	.word	0x080062b5
 800627c:	080062b5 	.word	0x080062b5
 8006280:	080062b5 	.word	0x080062b5
 8006284:	080062b5 	.word	0x080062b5
 8006288:	080062b5 	.word	0x080062b5
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062b5 	.word	0x080062b5
 8006298:	080062b5 	.word	0x080062b5
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062b5 	.word	0x080062b5
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062b5 	.word	0x080062b5
 80062ac:	080062b5 	.word	0x080062b5
 80062b0:	080062b5 	.word	0x080062b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80062b4:	bf00      	nop
  }

  return (USBD_OK);
 80062b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4805      	ldr	r0, [pc, #20]	@ (80062e8 <CDC_Receive_FS+0x24>)
 80062d2:	f7fe fbc3 	bl	8004a5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80062d6:	4804      	ldr	r0, [pc, #16]	@ (80062e8 <CDC_Receive_FS+0x24>)
 80062d8:	f7fe fc1e 	bl	8004b18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80062dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000124 	.word	0x20000124

080062ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80062fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <CDC_Transmit_FS+0x48>)
 80062fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006302:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800630e:	2301      	movs	r3, #1
 8006310:	e00b      	b.n	800632a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006312:	887b      	ldrh	r3, [r7, #2]
 8006314:	461a      	mov	r2, r3
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4806      	ldr	r0, [pc, #24]	@ (8006334 <CDC_Transmit_FS+0x48>)
 800631a:	f7fe fb7d 	bl	8004a18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800631e:	4805      	ldr	r0, [pc, #20]	@ (8006334 <CDC_Transmit_FS+0x48>)
 8006320:	f7fe fbba 	bl	8004a98 <USBD_CDC_TransmitPacket>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000124 	.word	0x20000124

08006338 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800634a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	6039      	str	r1, [r7, #0]
 8006366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2212      	movs	r2, #18
 800636c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800636e:	4b03      	ldr	r3, [pc, #12]	@ (800637c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	200000cc 	.word	0x200000cc

08006380 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2204      	movs	r2, #4
 8006390:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006392:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	200000e0 	.word	0x200000e0

080063a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	6039      	str	r1, [r7, #0]
 80063ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	4907      	ldr	r1, [pc, #28]	@ (80063d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80063ba:	4808      	ldr	r0, [pc, #32]	@ (80063dc <USBD_FS_ProductStrDescriptor+0x38>)
 80063bc:	f7ff fdf8 	bl	8005fb0 <USBD_GetString>
 80063c0:	e004      	b.n	80063cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	4904      	ldr	r1, [pc, #16]	@ (80063d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80063c6:	4805      	ldr	r0, [pc, #20]	@ (80063dc <USBD_FS_ProductStrDescriptor+0x38>)
 80063c8:	f7ff fdf2 	bl	8005fb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063cc:	4b02      	ldr	r3, [pc, #8]	@ (80063d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20001400 	.word	0x20001400
 80063dc:	08006c10 	.word	0x08006c10

080063e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	4904      	ldr	r1, [pc, #16]	@ (8006400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80063f0:	4804      	ldr	r0, [pc, #16]	@ (8006404 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80063f2:	f7ff fddd 	bl	8005fb0 <USBD_GetString>
  return USBD_StrDesc;
 80063f6:	4b02      	ldr	r3, [pc, #8]	@ (8006400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20001400 	.word	0x20001400
 8006404:	08006c28 	.word	0x08006c28

08006408 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	221a      	movs	r2, #26
 8006418:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800641a:	f000 f843 	bl	80064a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800641e:	4b02      	ldr	r3, [pc, #8]	@ (8006428 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200000e4 	.word	0x200000e4

0800642c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4907      	ldr	r1, [pc, #28]	@ (8006460 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006442:	4808      	ldr	r0, [pc, #32]	@ (8006464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006444:	f7ff fdb4 	bl	8005fb0 <USBD_GetString>
 8006448:	e004      	b.n	8006454 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	4904      	ldr	r1, [pc, #16]	@ (8006460 <USBD_FS_ConfigStrDescriptor+0x34>)
 800644e:	4805      	ldr	r0, [pc, #20]	@ (8006464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006450:	f7ff fdae 	bl	8005fb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006454:	4b02      	ldr	r3, [pc, #8]	@ (8006460 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20001400 	.word	0x20001400
 8006464:	08006c3c 	.word	0x08006c3c

08006468 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	4907      	ldr	r1, [pc, #28]	@ (800649c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800647e:	4808      	ldr	r0, [pc, #32]	@ (80064a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006480:	f7ff fd96 	bl	8005fb0 <USBD_GetString>
 8006484:	e004      	b.n	8006490 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4904      	ldr	r1, [pc, #16]	@ (800649c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800648a:	4805      	ldr	r0, [pc, #20]	@ (80064a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800648c:	f7ff fd90 	bl	8005fb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006490:	4b02      	ldr	r3, [pc, #8]	@ (800649c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20001400 	.word	0x20001400
 80064a0:	08006c48 	.word	0x08006c48

080064a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80064aa:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <Get_SerialNum+0x44>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80064b0:	4b0e      	ldr	r3, [pc, #56]	@ (80064ec <Get_SerialNum+0x48>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80064b6:	4b0e      	ldr	r3, [pc, #56]	@ (80064f0 <Get_SerialNum+0x4c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80064ca:	2208      	movs	r2, #8
 80064cc:	4909      	ldr	r1, [pc, #36]	@ (80064f4 <Get_SerialNum+0x50>)
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f814 	bl	80064fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80064d4:	2204      	movs	r2, #4
 80064d6:	4908      	ldr	r1, [pc, #32]	@ (80064f8 <Get_SerialNum+0x54>)
 80064d8:	68b8      	ldr	r0, [r7, #8]
 80064da:	f000 f80f 	bl	80064fc <IntToUnicode>
  }
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	1fff7a10 	.word	0x1fff7a10
 80064ec:	1fff7a14 	.word	0x1fff7a14
 80064f0:	1fff7a18 	.word	0x1fff7a18
 80064f4:	200000e6 	.word	0x200000e6
 80064f8:	200000f6 	.word	0x200000f6

080064fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
 8006512:	e027      	b.n	8006564 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	0f1b      	lsrs	r3, r3, #28
 8006518:	2b09      	cmp	r3, #9
 800651a:	d80b      	bhi.n	8006534 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	0f1b      	lsrs	r3, r3, #28
 8006520:	b2da      	uxtb	r2, r3
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4619      	mov	r1, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	440b      	add	r3, r1
 800652c:	3230      	adds	r2, #48	@ 0x30
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e00a      	b.n	800654a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	0f1b      	lsrs	r3, r3, #28
 8006538:	b2da      	uxtb	r2, r3
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4619      	mov	r1, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	440b      	add	r3, r1
 8006544:	3237      	adds	r2, #55	@ 0x37
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	3301      	adds	r3, #1
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4413      	add	r3, r2
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	3301      	adds	r3, #1
 8006562:	75fb      	strb	r3, [r7, #23]
 8006564:	7dfa      	ldrb	r2, [r7, #23]
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d3d3      	bcc.n	8006514 <IntToUnicode+0x18>
  }
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	@ 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006584:	f107 0314 	add.w	r3, r7, #20
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	605a      	str	r2, [r3, #4]
 800658e:	609a      	str	r2, [r3, #8]
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800659c:	d13a      	bne.n	8006614 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	4b1e      	ldr	r3, [pc, #120]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	4a1d      	ldr	r2, [pc, #116]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80065ae:	4b1b      	ldr	r3, [pc, #108]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80065be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c0:	2302      	movs	r3, #2
 80065c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065c8:	2303      	movs	r3, #3
 80065ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80065cc:	230a      	movs	r3, #10
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	4619      	mov	r1, r3
 80065d6:	4812      	ldr	r0, [pc, #72]	@ (8006620 <HAL_PCD_MspInit+0xa4>)
 80065d8:	f7fa faa4 	bl	8000b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80065dc:	4b0f      	ldr	r3, [pc, #60]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e0:	4a0e      	ldr	r2, [pc, #56]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f0:	4a0a      	ldr	r2, [pc, #40]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80065f8:	4b08      	ldr	r3, [pc, #32]	@ (800661c <HAL_PCD_MspInit+0xa0>)
 80065fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006604:	2200      	movs	r2, #0
 8006606:	2100      	movs	r1, #0
 8006608:	2043      	movs	r0, #67	@ 0x43
 800660a:	f7fa fa54 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800660e:	2043      	movs	r0, #67	@ 0x43
 8006610:	f7fa fa6d 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006614:	bf00      	nop
 8006616:	3728      	adds	r7, #40	@ 0x28
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	40020000 	.word	0x40020000

08006624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fe fb55 	bl	8004cea <USBD_LL_SetupStage>
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	4619      	mov	r1, r3
 8006672:	f7fe fb8f 	bl	8004d94 <USBD_LL_DataOutStage>
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	3320      	adds	r3, #32
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	4619      	mov	r1, r3
 80066a6:	f7fe fc28 	bl	8004efa <USBD_LL_DataInStage>
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fd62 	bl	800518a <USBD_LL_SOF>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066d6:	2301      	movs	r3, #1
 80066d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	79db      	ldrb	r3, [r3, #7]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d001      	beq.n	80066e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80066e2:	f7f9 ffd3 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066ec:	7bfa      	ldrb	r2, [r7, #15]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fd06 	bl	8005102 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fcae 	bl	800505e <USBD_LL_Reset>
}
 8006702:	bf00      	nop
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe fd01 	bl	8005122 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7adb      	ldrb	r3, [r3, #11]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006740:	4b04      	ldr	r3, [pc, #16]	@ (8006754 <HAL_PCD_SuspendCallback+0x48>)
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	4a03      	ldr	r2, [pc, #12]	@ (8006754 <HAL_PCD_SuspendCallback+0x48>)
 8006746:	f043 0306 	orr.w	r3, r3, #6
 800674a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	e000ed00 	.word	0xe000ed00

08006758 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fcf7 	bl	800515a <USBD_LL_Resume>
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006786:	78fa      	ldrb	r2, [r7, #3]
 8006788:	4611      	mov	r1, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fd4f 	bl	800522e <USBD_LL_IsoOUTIncomplete>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	4611      	mov	r1, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fd0b 	bl	80051ca <USBD_LL_IsoINIncomplete>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fd61 	bl	8005292 <USBD_LL_DevConnected>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fd5e 	bl	80052a8 <USBD_LL_DevDisconnected>
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d13c      	bne.n	800687e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006804:	4a20      	ldr	r2, [pc, #128]	@ (8006888 <USBD_LL_Init+0x94>)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a1e      	ldr	r2, [pc, #120]	@ (8006888 <USBD_LL_Init+0x94>)
 8006810:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006814:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <USBD_LL_Init+0x94>)
 8006816:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800681a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800681c:	4b1a      	ldr	r3, [pc, #104]	@ (8006888 <USBD_LL_Init+0x94>)
 800681e:	2204      	movs	r2, #4
 8006820:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006822:	4b19      	ldr	r3, [pc, #100]	@ (8006888 <USBD_LL_Init+0x94>)
 8006824:	2202      	movs	r2, #2
 8006826:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006828:	4b17      	ldr	r3, [pc, #92]	@ (8006888 <USBD_LL_Init+0x94>)
 800682a:	2200      	movs	r2, #0
 800682c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800682e:	4b16      	ldr	r3, [pc, #88]	@ (8006888 <USBD_LL_Init+0x94>)
 8006830:	2202      	movs	r2, #2
 8006832:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006834:	4b14      	ldr	r3, [pc, #80]	@ (8006888 <USBD_LL_Init+0x94>)
 8006836:	2200      	movs	r2, #0
 8006838:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800683a:	4b13      	ldr	r3, [pc, #76]	@ (8006888 <USBD_LL_Init+0x94>)
 800683c:	2200      	movs	r2, #0
 800683e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006840:	4b11      	ldr	r3, [pc, #68]	@ (8006888 <USBD_LL_Init+0x94>)
 8006842:	2200      	movs	r2, #0
 8006844:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <USBD_LL_Init+0x94>)
 8006848:	2200      	movs	r2, #0
 800684a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800684c:	4b0e      	ldr	r3, [pc, #56]	@ (8006888 <USBD_LL_Init+0x94>)
 800684e:	2200      	movs	r2, #0
 8006850:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006852:	480d      	ldr	r0, [pc, #52]	@ (8006888 <USBD_LL_Init+0x94>)
 8006854:	f7fa fb03 	bl	8000e5e <HAL_PCD_Init>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800685e:	f7f9 ff15 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006862:	2180      	movs	r1, #128	@ 0x80
 8006864:	4808      	ldr	r0, [pc, #32]	@ (8006888 <USBD_LL_Init+0x94>)
 8006866:	f7fb fd2e 	bl	80022c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800686a:	2240      	movs	r2, #64	@ 0x40
 800686c:	2100      	movs	r1, #0
 800686e:	4806      	ldr	r0, [pc, #24]	@ (8006888 <USBD_LL_Init+0x94>)
 8006870:	f7fb fce2 	bl	8002238 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006874:	2280      	movs	r2, #128	@ 0x80
 8006876:	2101      	movs	r1, #1
 8006878:	4803      	ldr	r0, [pc, #12]	@ (8006888 <USBD_LL_Init+0x94>)
 800687a:	f7fb fcdd 	bl	8002238 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20001600 	.word	0x20001600

0800688c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fa fbea 	bl	800107c <HAL_PCD_Start>
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f942 	bl	8006b38 <USBD_Get_USB_Status>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	4608      	mov	r0, r1
 80068cc:	4611      	mov	r1, r2
 80068ce:	461a      	mov	r2, r3
 80068d0:	4603      	mov	r3, r0
 80068d2:	70fb      	strb	r3, [r7, #3]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70bb      	strb	r3, [r7, #2]
 80068d8:	4613      	mov	r3, r2
 80068da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80068ea:	78bb      	ldrb	r3, [r7, #2]
 80068ec:	883a      	ldrh	r2, [r7, #0]
 80068ee:	78f9      	ldrb	r1, [r7, #3]
 80068f0:	f7fb f8be 	bl	8001a70 <HAL_PCD_EP_Open>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f91c 	bl	8006b38 <USBD_Get_USB_Status>
 8006900:	4603      	mov	r3, r0
 8006902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006904:	7bbb      	ldrb	r3, [r7, #14]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f7fb f907 	bl	8001b40 <HAL_PCD_EP_Close>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f8fd 	bl	8006b38 <USBD_Get_USB_Status>
 800693e:	4603      	mov	r3, r0
 8006940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006942:	7bbb      	ldrb	r3, [r7, #14]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f7fb f9bf 	bl	8001cee <HAL_PCD_EP_SetStall>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f8de 	bl	8006b38 <USBD_Get_USB_Status>
 800697c:	4603      	mov	r3, r0
 800697e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006980:	7bbb      	ldrb	r3, [r7, #14]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fb fa03 	bl	8001db4 <HAL_PCD_EP_ClrStall>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 f8bf 	bl	8006b38 <USBD_Get_USB_Status>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069be:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80069dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da0b      	bge.n	80069fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	3316      	adds	r3, #22
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	e00b      	b.n	8006a14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	4613      	mov	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006a12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fa fff2 	bl	8001a28 <HAL_PCD_SetAddress>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f874 	bl	8006b38 <USBD_Get_USB_Status>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006a7c:	7af9      	ldrb	r1, [r7, #11]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	f7fb f8fa 	bl	8001c7a <HAL_PCD_EP_Transmit>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 f853 	bl	8006b38 <USBD_Get_USB_Status>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a96:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	460b      	mov	r3, r1
 8006aae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006abe:	7af9      	ldrb	r1, [r7, #11]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	f7fb f886 	bl	8001bd4 <HAL_PCD_EP_Receive>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f832 	bl	8006b38 <USBD_Get_USB_Status>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ad8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fb f8a6 	bl	8001c4a <HAL_PCD_EP_GetRxCount>
 8006afe:	4603      	mov	r3, r0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006b10:	4b03      	ldr	r3, [pc, #12]	@ (8006b20 <USBD_static_malloc+0x18>)
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20001ae4 	.word	0x20001ae4

08006b24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d817      	bhi.n	8006b7c <USBD_Get_USB_Status+0x44>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <USBD_Get_USB_Status+0x1c>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b6b 	.word	0x08006b6b
 8006b5c:	08006b71 	.word	0x08006b71
 8006b60:	08006b77 	.word	0x08006b77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
    break;
 8006b68:	e00b      	b.n	8006b82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b6e:	e008      	b.n	8006b82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
    break;
 8006b74:	e005      	b.n	8006b82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	73fb      	strb	r3, [r7, #15]
    break;
 8006b7a:	e002      	b.n	8006b82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b80:	bf00      	nop
  }
  return usb_status;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <memset>:
 8006b90:	4402      	add	r2, r0
 8006b92:	4603      	mov	r3, r0
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d100      	bne.n	8006b9a <memset+0xa>
 8006b98:	4770      	bx	lr
 8006b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9e:	e7f9      	b.n	8006b94 <memset+0x4>

08006ba0 <__libc_init_array>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8006bd8 <__libc_init_array+0x38>)
 8006ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8006bdc <__libc_init_array+0x3c>)
 8006ba6:	1b64      	subs	r4, r4, r5
 8006ba8:	10a4      	asrs	r4, r4, #2
 8006baa:	2600      	movs	r6, #0
 8006bac:	42a6      	cmp	r6, r4
 8006bae:	d109      	bne.n	8006bc4 <__libc_init_array+0x24>
 8006bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8006be0 <__libc_init_array+0x40>)
 8006bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8006be4 <__libc_init_array+0x44>)
 8006bb4:	f000 f818 	bl	8006be8 <_init>
 8006bb8:	1b64      	subs	r4, r4, r5
 8006bba:	10a4      	asrs	r4, r4, #2
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	42a6      	cmp	r6, r4
 8006bc0:	d105      	bne.n	8006bce <__libc_init_array+0x2e>
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc8:	4798      	blx	r3
 8006bca:	3601      	adds	r6, #1
 8006bcc:	e7ee      	b.n	8006bac <__libc_init_array+0xc>
 8006bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd2:	4798      	blx	r3
 8006bd4:	3601      	adds	r6, #1
 8006bd6:	e7f2      	b.n	8006bbe <__libc_init_array+0x1e>
 8006bd8:	08006c70 	.word	0x08006c70
 8006bdc:	08006c70 	.word	0x08006c70
 8006be0:	08006c70 	.word	0x08006c70
 8006be4:	08006c74 	.word	0x08006c74

08006be8 <_init>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr

08006bf4 <_fini>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr
