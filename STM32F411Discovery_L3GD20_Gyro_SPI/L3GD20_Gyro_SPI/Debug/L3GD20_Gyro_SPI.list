
L3GD20_Gyro_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002644  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027dc  080027dc  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027f4  080027f4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000037f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002808  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002808  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000648f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001426  00000000  00000000  0000a4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000493  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b13  00000000  00000000  0000c3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074e3  00000000  00000000  00020ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081bca  00000000  00000000  000283b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  000a9fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000ab788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080027c4 	.word	0x080027c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080027c4 	.word	0x080027c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <L3GD20_Init>:
uint8_t transmit_buffer[2] = {0, 0};

// <---- ------------ Main L3GD20 Functions ------------ ---->
// <---- ------------ L3GD20 Initialize ------------ ---->
L3GD20_Gyro_Result L3GD20_Init(SPI_HandleTypeDef* SPIx , GPIO_TypeDef *CS_GPIOx, uint16_t CS_PinNumber, L3GD20TypeDef* datastruct)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]
	_CS_GPIO = CS_GPIOx;
 80004d8:	4a68      	ldr	r2, [pc, #416]	@ (800067c <L3GD20_Init+0x1b4>)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	6013      	str	r3, [r2, #0]
	_CS_PinNumber = CS_PinNumber;
 80004de:	4a68      	ldr	r2, [pc, #416]	@ (8000680 <L3GD20_Init+0x1b8>)
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	8013      	strh	r3, [r2, #0]

	uint8_t WHO_AM_I = (uint8_t)L3GD20_WHO_AM_I_ADDR;
 80004e4:	230f      	movs	r3, #15
 80004e6:	75fb      	strb	r3, [r7, #23]

	L3GD20_ReadData(SPIx, &temp, WHO_AM_I, 1);
 80004e8:	7dfa      	ldrb	r2, [r7, #23]
 80004ea:	2301      	movs	r3, #1
 80004ec:	4965      	ldr	r1, [pc, #404]	@ (8000684 <L3GD20_Init+0x1bc>)
 80004ee:	68f8      	ldr	r0, [r7, #12]
 80004f0:	f000 f8cc 	bl	800068c <L3GD20_ReadData>
	if(temp != I_AM_L3GD20_TR)
 80004f4:	4b63      	ldr	r3, [pc, #396]	@ (8000684 <L3GD20_Init+0x1bc>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2bd5      	cmp	r3, #213	@ 0xd5
 80004fa:	d001      	beq.n	8000500 <L3GD20_Init+0x38>
		return L3GD20_RESULT_ERROR;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e0b8      	b.n	8000672 <L3GD20_Init+0x1aa>

	// <---- ------------ Setup All Registers ------------ ---->
	// <---- ------------ Control Register_1 ------------ ---->
	// <---- ------------ DataRate, Bandwidth, PowerMode, Axes Enable ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG1_ADDR;
 8000500:	4b61      	ldr	r3, [pc, #388]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000502:	2220      	movs	r2, #32
 8000504:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_DataRate | datastruct -> Gyro_Bandwidth | ((datastruct -> Gyro_PWR) << 3) | datastruct -> Gyro_Axes;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	785a      	ldrb	r2, [r3, #1]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	78db      	ldrb	r3, [r3, #3]
 800050e:	4313      	orrs	r3, r2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	b25a      	sxtb	r2, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	b25b      	sxtb	r3, r3
 800051c:	4313      	orrs	r3, r2
 800051e:	b25a      	sxtb	r2, r3
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	789b      	ldrb	r3, [r3, #2]
 8000524:	b25b      	sxtb	r3, r3
 8000526:	4313      	orrs	r3, r2
 8000528:	b25b      	sxtb	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b56      	ldr	r3, [pc, #344]	@ (8000688 <L3GD20_Init+0x1c0>)
 800052e:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000530:	4b55      	ldr	r3, [pc, #340]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4a54      	ldr	r2, [pc, #336]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000536:	7852      	ldrb	r2, [r2, #1]
 8000538:	4619      	mov	r1, r3
 800053a:	68f8      	ldr	r0, [r7, #12]
 800053c:	f000 f8de 	bl	80006fc <L3GD20_WriteData>

	HAL_Delay(25);
 8000540:	2019      	movs	r0, #25
 8000542:	f000 fc1b 	bl	8000d7c <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG1_ADDR, 1);
 8000546:	2301      	movs	r3, #1
 8000548:	2220      	movs	r2, #32
 800054a:	494e      	ldr	r1, [pc, #312]	@ (8000684 <L3GD20_Init+0x1bc>)
 800054c:	68f8      	ldr	r0, [r7, #12]
 800054e:	f000 f89d 	bl	800068c <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000552:	4b4d      	ldr	r3, [pc, #308]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000554:	785a      	ldrb	r2, [r3, #1]
 8000556:	4b4b      	ldr	r3, [pc, #300]	@ (8000684 <L3GD20_Init+0x1bc>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d001      	beq.n	8000562 <L3GD20_Init+0x9a>
		return L3GD20_RESULT_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e087      	b.n	8000672 <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_2 ------------ ---->
	// <---- ------------ High-Pass Filter Mode, High-Pass Filter Cut-off Frequency ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG2_ADDR;
 8000562:	4b49      	ldr	r3, [pc, #292]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000564:	2221      	movs	r2, #33	@ 0x21
 8000566:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_FilterMode | datastruct -> Gyro_FilterCutFreq;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	799a      	ldrb	r2, [r3, #6]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	79db      	ldrb	r3, [r3, #7]
 8000570:	4313      	orrs	r3, r2
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000576:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000578:	4b43      	ldr	r3, [pc, #268]	@ (8000688 <L3GD20_Init+0x1c0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4a42      	ldr	r2, [pc, #264]	@ (8000688 <L3GD20_Init+0x1c0>)
 800057e:	7852      	ldrb	r2, [r2, #1]
 8000580:	4619      	mov	r1, r3
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	f000 f8ba 	bl	80006fc <L3GD20_WriteData>

	HAL_Delay(25);
 8000588:	2019      	movs	r0, #25
 800058a:	f000 fbf7 	bl	8000d7c <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG2_ADDR, 1);
 800058e:	2301      	movs	r3, #1
 8000590:	2221      	movs	r2, #33	@ 0x21
 8000592:	493c      	ldr	r1, [pc, #240]	@ (8000684 <L3GD20_Init+0x1bc>)
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f879 	bl	800068c <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 800059a:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <L3GD20_Init+0x1c0>)
 800059c:	785a      	ldrb	r2, [r3, #1]
 800059e:	4b39      	ldr	r3, [pc, #228]	@ (8000684 <L3GD20_Init+0x1bc>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d001      	beq.n	80005aa <L3GD20_Init+0xe2>
		return L3GD20_RESULT_ERROR;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e063      	b.n	8000672 <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_3 ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG3_ADDR;
 80005aa:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005ac:	2222      	movs	r2, #34	@ 0x22
 80005ae:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = 0x00;					//Default
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80005b6:	4b34      	ldr	r3, [pc, #208]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4a33      	ldr	r2, [pc, #204]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005bc:	7852      	ldrb	r2, [r2, #1]
 80005be:	4619      	mov	r1, r3
 80005c0:	68f8      	ldr	r0, [r7, #12]
 80005c2:	f000 f89b 	bl	80006fc <L3GD20_WriteData>

	HAL_Delay(25);
 80005c6:	2019      	movs	r0, #25
 80005c8:	f000 fbd8 	bl	8000d7c <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG3_ADDR, 1);
 80005cc:	2301      	movs	r3, #1
 80005ce:	2222      	movs	r2, #34	@ 0x22
 80005d0:	492c      	ldr	r1, [pc, #176]	@ (8000684 <L3GD20_Init+0x1bc>)
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f000 f85a 	bl	800068c <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 80005d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005da:	785a      	ldrb	r2, [r3, #1]
 80005dc:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <L3GD20_Init+0x1bc>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d001      	beq.n	80005e8 <L3GD20_Init+0x120>
		return L3GD20_RESULT_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e044      	b.n	8000672 <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_4 ------------ ---->
	// <---- ------------ FullScale ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG4_ADDR;
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005ea:	2223      	movs	r2, #35	@ 0x23
 80005ec:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_Scale;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	791a      	ldrb	r2, [r3, #4]
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005f4:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80005f6:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4a23      	ldr	r2, [pc, #140]	@ (8000688 <L3GD20_Init+0x1c0>)
 80005fc:	7852      	ldrb	r2, [r2, #1]
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 f87b 	bl	80006fc <L3GD20_WriteData>

	HAL_Delay(25);
 8000606:	2019      	movs	r0, #25
 8000608:	f000 fbb8 	bl	8000d7c <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG4_ADDR, 1);
 800060c:	2301      	movs	r3, #1
 800060e:	2223      	movs	r2, #35	@ 0x23
 8000610:	491c      	ldr	r1, [pc, #112]	@ (8000684 <L3GD20_Init+0x1bc>)
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f83a 	bl	800068c <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <L3GD20_Init+0x1c0>)
 800061a:	785a      	ldrb	r2, [r3, #1]
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <L3GD20_Init+0x1bc>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d001      	beq.n	8000628 <L3GD20_Init+0x160>
		return L3GD20_RESULT_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	e024      	b.n	8000672 <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_5 ------------ ---->
	// <---- ------------ High-Pass Filter Enable ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG5_ADDR;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <L3GD20_Init+0x1c0>)
 800062a:	2224      	movs	r2, #36	@ 0x24
 800062c:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_FilterEn | datastruct -> Gyro_FilterCutFreq;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	795a      	ldrb	r2, [r3, #5]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	79db      	ldrb	r3, [r3, #7]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <L3GD20_Init+0x1c0>)
 800063c:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4a11      	ldr	r2, [pc, #68]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000644:	7852      	ldrb	r2, [r2, #1]
 8000646:	4619      	mov	r1, r3
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f000 f857 	bl	80006fc <L3GD20_WriteData>

	HAL_Delay(25);
 800064e:	2019      	movs	r0, #25
 8000650:	f000 fb94 	bl	8000d7c <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG5_ADDR, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	2224      	movs	r2, #36	@ 0x24
 8000658:	490a      	ldr	r1, [pc, #40]	@ (8000684 <L3GD20_Init+0x1bc>)
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f816 	bl	800068c <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <L3GD20_Init+0x1c0>)
 8000662:	785a      	ldrb	r2, [r3, #1]
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <L3GD20_Init+0x1bc>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	d001      	beq.n	8000670 <L3GD20_Init+0x1a8>
		return L3GD20_RESULT_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	e000      	b.n	8000672 <L3GD20_Init+0x1aa>

	return L3GD20_RESULT_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000002c 	.word	0x2000002c
 8000680:	20000028 	.word	0x20000028
 8000684:	20000030 	.word	0x20000030
 8000688:	20000034 	.word	0x20000034

0800068c <L3GD20_ReadData>:
// <---- ------------ L3GD20 Read Data ------------ ---->
L3GD20_Gyro_Result L3GD20_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	4611      	mov	r1, r2
 8000698:	461a      	mov	r2, r3
 800069a:	460b      	mov	r3, r1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	4613      	mov	r3, r2
 80006a0:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <L3GD20_ReadData+0x68>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a11      	ldr	r2, [pc, #68]	@ (80006f8 <L3GD20_ReadData+0x6c>)
 80006b2:	8811      	ldrh	r1, [r2, #0]
 80006b4:	2200      	movs	r2, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fdee 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIx, &reg, 1, 50);
 80006bc:	f107 0117 	add.w	r1, r7, #23
 80006c0:	2332      	movs	r3, #50	@ 0x32
 80006c2:	2201      	movs	r2, #1
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f001 fb08 	bl	8001cda <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 50);
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f001 fc45 	bl	8001f62 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <L3GD20_ReadData+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <L3GD20_ReadData+0x6c>)
 80006de:	8811      	ldrh	r1, [r2, #0]
 80006e0:	2201      	movs	r2, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fdd8 	bl	8001298 <HAL_GPIO_WritePin>
	
	/* Return OK */
	return L3GD20_RESULT_OK;    
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000002c 	.word	0x2000002c
 80006f8:	20000028 	.word	0x20000028

080006fc <L3GD20_WriteData>:
// <---- ------------ L3GD20 Write Data ------------ ---->
L3GD20_Gyro_Result L3GD20_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
 8000708:	4613      	mov	r3, r2
 800070a:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {addr, data};
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	733b      	strb	r3, [r7, #12]
 8000710:	78bb      	ldrb	r3, [r7, #2]
 8000712:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <L3GD20_WriteData+0x58>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <L3GD20_WriteData+0x5c>)
 800071a:	8811      	ldrh	r1, [r2, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fdba 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000724:	2014      	movs	r0, #20
 8000726:	f000 fb29 	bl	8000d7c <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 50);
 800072a:	f107 010c 	add.w	r1, r7, #12
 800072e:	2332      	movs	r3, #50	@ 0x32
 8000730:	2202      	movs	r2, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f001 fad1 	bl	8001cda <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <L3GD20_WriteData+0x58>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <L3GD20_WriteData+0x5c>)
 800073e:	8811      	ldrh	r1, [r2, #0]
 8000740:	2201      	movs	r2, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fda8 	bl	8001298 <HAL_GPIO_WritePin>

	return L3GD20_RESULT_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000002c 	.word	0x2000002c
 8000758:	20000028 	.word	0x20000028

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fa9a 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f814 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f8b0 	bl	80008cc <MX_GPIO_Init>
  MX_SPI1_Init();
 800076c:	f000 f878 	bl	8000860 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Gyro_L3GD20_Init();
 8000770:	f000 f922 	bl	80009b8 <Gyro_L3GD20_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Gyro_L3GD20_ReadData();
 8000774:	f000 f954 	bl	8000a20 <Gyro_L3GD20_ReadData>
//	  L3GD20_loop();
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000778:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <main+0x30>)
 800077e:	f000 fda4 	bl	80012ca <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fafa 	bl	8000d7c <HAL_Delay>
	  Gyro_L3GD20_ReadData();
 8000788:	bf00      	nop
 800078a:	e7f3      	b.n	8000774 <main+0x18>
 800078c:	40020c00 	.word	0x40020c00

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	@ 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	@ 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 ffe4 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <SystemClock_Config+0xc8>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	4a26      	ldr	r2, [pc, #152]	@ (8000858 <SystemClock_Config+0xc8>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <SystemClock_Config+0xc8>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b21      	ldr	r3, [pc, #132]	@ (800085c <SystemClock_Config+0xcc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a20      	ldr	r2, [pc, #128]	@ (800085c <SystemClock_Config+0xcc>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <SystemClock_Config+0xcc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000804:	2364      	movs	r3, #100	@ 0x64
 8000806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd73 	bl	8001300 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000820:	f000 f958 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2103      	movs	r1, #3
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffd5 	bl	80017f0 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800084c:	f000 f942 	bl	8000ad4 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3750      	adds	r7, #80	@ 0x50
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <MX_SPI1_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000894:	2228      	movs	r2, #40	@ 0x28
 8000896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008ac:	220a      	movs	r2, #10
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008b2:	f001 f989 	bl	8001bc8 <HAL_SPI_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 f90a 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000040 	.word	0x20000040
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a30      	ldr	r2, [pc, #192]	@ (80009ac <MX_GPIO_Init+0xe0>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a29      	ldr	r2, [pc, #164]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a22      	ldr	r2, [pc, #136]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_GPIO_Init+0xe0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a1b      	ldr	r2, [pc, #108]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_GPIO_Init+0xe0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2108      	movs	r1, #8
 8000956:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_GPIO_Init+0xe4>)
 8000958:	f000 fc9e 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000962:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <MX_GPIO_Init+0xe8>)
 8000964:	f000 fc98 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000968:	2308      	movs	r3, #8
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <MX_GPIO_Init+0xe4>)
 8000980:	f000 fb06 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000984:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_GPIO_Init+0xe8>)
 800099e:	f000 faf7 	bl	8000f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <Gyro_L3GD20_Init>:

/* USER CODE BEGIN 4 */
// <---- ------------ Gyyroscope Initialize ------------ ---->
void Gyro_L3GD20_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	L3GD20.Gyro_PWR 			= L3GD20_MODE_ACTIVE;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
	L3GD20.Gyro_DataRate 		= L3GD20_OUTPUT_DATARATE_4;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009c4:	22c0      	movs	r2, #192	@ 0xc0
 80009c6:	705a      	strb	r2, [r3, #1]
	L3GD20.Gyro_Axes 			= L3GD20_AXES_ENABLE;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	709a      	strb	r2, [r3, #2]
	L3GD20.Gyro_Bandwidth 		= L3GD20_BANDWIDTH_4;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009d0:	2230      	movs	r2, #48	@ 0x30
 80009d2:	70da      	strb	r2, [r3, #3]
	L3GD20.Gyro_Scale 			= L3GD20_FULLSCALE_2000;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009d6:	2220      	movs	r2, #32
 80009d8:	711a      	strb	r2, [r3, #4]
	L3GD20.Gyro_FilterEn		= L3GD20_HIGHPASSFILTER_ENABLE;
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009dc:	2210      	movs	r2, #16
 80009de:	715a      	strb	r2, [r3, #5]
	L3GD20.Gyro_FilterMode 		= L3GD20_HPM_NORMAL_MODE_RES;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	719a      	strb	r2, [r3, #6]
	L3GD20.Gyro_FilterCutFreq 	= L3GD20_HPFCF_0;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	71da      	strb	r2, [r3, #7]

	isInitialized = L3GD20_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &L3GD20);
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <Gyro_L3GD20_Init+0x58>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <Gyro_L3GD20_Init+0x5c>)
 80009f2:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <Gyro_L3GD20_Init+0x60>)
 80009f4:	f7ff fd68 	bl	80004c8 <L3GD20_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <Gyro_L3GD20_Init+0x64>)
 80009fe:	701a      	strb	r2, [r3, #0]
	if(isInitialized != L3GD20_RESULT_OK)
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <Gyro_L3GD20_Init+0x64>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <Gyro_L3GD20_Init+0x54>
		Error_Handler();
 8000a08:	f000 f864 	bl	8000ad4 <Error_Handler>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000038 	.word	0x20000038
 8000a14:	40021000 	.word	0x40021000
 8000a18:	20000040 	.word	0x20000040
 8000a1c:	20000098 	.word	0x20000098

08000a20 <Gyro_L3GD20_ReadData>:
// <---- ------------ Gyyroscope Read Data ------------ ---->
void Gyro_L3GD20_ReadData(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	L3GD20_ReadData(&hspi1, &L3GD20_Buffer[0], L3GD20_OUT_X_L_ADDR, 1);
 8000a24:	2301      	movs	r3, #1
 8000a26:	2228      	movs	r2, #40	@ 0x28
 8000a28:	4922      	ldr	r1, [pc, #136]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000a2a:	4823      	ldr	r0, [pc, #140]	@ (8000ab8 <Gyro_L3GD20_ReadData+0x98>)
 8000a2c:	f7ff fe2e 	bl	800068c <L3GD20_ReadData>
	L3GD20_ReadData(&hspi1, &L3GD20_Buffer[1], L3GD20_OUT_X_H_ADDR, 1);
 8000a30:	2301      	movs	r3, #1
 8000a32:	2229      	movs	r2, #41	@ 0x29
 8000a34:	4921      	ldr	r1, [pc, #132]	@ (8000abc <Gyro_L3GD20_ReadData+0x9c>)
 8000a36:	4820      	ldr	r0, [pc, #128]	@ (8000ab8 <Gyro_L3GD20_ReadData+0x98>)
 8000a38:	f7ff fe28 	bl	800068c <L3GD20_ReadData>
	L3GD20_ReadData(&hspi1, &L3GD20_Buffer[2], L3GD20_OUT_Y_L_ADDR, 1);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	222a      	movs	r2, #42	@ 0x2a
 8000a40:	491f      	ldr	r1, [pc, #124]	@ (8000ac0 <Gyro_L3GD20_ReadData+0xa0>)
 8000a42:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <Gyro_L3GD20_ReadData+0x98>)
 8000a44:	f7ff fe22 	bl	800068c <L3GD20_ReadData>
	L3GD20_ReadData(&hspi1, &L3GD20_Buffer[3], L3GD20_OUT_Y_H_ADDR, 1);
 8000a48:	2301      	movs	r3, #1
 8000a4a:	222b      	movs	r2, #43	@ 0x2b
 8000a4c:	491d      	ldr	r1, [pc, #116]	@ (8000ac4 <Gyro_L3GD20_ReadData+0xa4>)
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <Gyro_L3GD20_ReadData+0x98>)
 8000a50:	f7ff fe1c 	bl	800068c <L3GD20_ReadData>
	L3GD20_ReadData(&hspi1, &L3GD20_Buffer[4], L3GD20_OUT_Z_L_ADDR, 1);
 8000a54:	2301      	movs	r3, #1
 8000a56:	222c      	movs	r2, #44	@ 0x2c
 8000a58:	491b      	ldr	r1, [pc, #108]	@ (8000ac8 <Gyro_L3GD20_ReadData+0xa8>)
 8000a5a:	4817      	ldr	r0, [pc, #92]	@ (8000ab8 <Gyro_L3GD20_ReadData+0x98>)
 8000a5c:	f7ff fe16 	bl	800068c <L3GD20_ReadData>
	L3GD20_ReadData(&hspi1, &L3GD20_Buffer[5], L3GD20_OUT_Z_H_ADDR, 1);
 8000a60:	2301      	movs	r3, #1
 8000a62:	222d      	movs	r2, #45	@ 0x2d
 8000a64:	4919      	ldr	r1, [pc, #100]	@ (8000acc <Gyro_L3GD20_ReadData+0xac>)
 8000a66:	4814      	ldr	r0, [pc, #80]	@ (8000ab8 <Gyro_L3GD20_ReadData+0x98>)
 8000a68:	f7ff fe10 	bl	800068c <L3GD20_ReadData>

	Gyro_RawData[0] = (int16_t)(L3GD20_Buffer[0] | L3GD20_Buffer[1] << 8);
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <Gyro_L3GD20_ReadData+0xb0>)
 8000a80:	801a      	strh	r2, [r3, #0]
	Gyro_RawData[1] = (int16_t)(L3GD20_Buffer[2] | L3GD20_Buffer[3] << 8);
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000a84:	789b      	ldrb	r3, [r3, #2]
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <Gyro_L3GD20_ReadData+0xb0>)
 8000a96:	805a      	strh	r2, [r3, #2]
	Gyro_RawData[2] = (int16_t)(L3GD20_Buffer[4] | L3GD20_Buffer[5] << 8);
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <Gyro_L3GD20_ReadData+0x94>)
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <Gyro_L3GD20_ReadData+0xb0>)
 8000aac:	809a      	strh	r2, [r3, #4]
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000009c 	.word	0x2000009c
 8000ab8:	20000040 	.word	0x20000040
 8000abc:	2000009d 	.word	0x2000009d
 8000ac0:	2000009e 	.word	0x2000009e
 8000ac4:	2000009f 	.word	0x2000009f
 8000ac8:	200000a0 	.word	0x200000a0
 8000acc:	200000a1 	.word	0x200000a1
 8000ad0:	200000a8 	.word	0x200000a8

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	@ (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	@ (8000bb4 <HAL_SPI_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b8a:	23e0      	movs	r3, #224	@ 0xe0
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000ba6:	f000 f9f3 	bl	8000f90 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f891 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f001 fd83 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fd71 	bl	800075c <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c88:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 8000c8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c90:	200000b4 	.word	0x200000b4

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f931 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff ff08 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f911 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200000b0 	.word	0x200000b0

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000b0 	.word	0x200000b0

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	@ (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e159      	b.n	8001260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8148 	bne.w	800125a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a2 	beq.w	800125a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b57      	ldr	r3, [pc, #348]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a56      	ldr	r2, [pc, #344]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b54      	ldr	r3, [pc, #336]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a52      	ldr	r2, [pc, #328]	@ (800127c <HAL_GPIO_Init+0x2ec>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x202>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a48      	ldr	r2, [pc, #288]	@ (8001284 <HAL_GPIO_Init+0x2f4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x1fe>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	@ (8001288 <HAL_GPIO_Init+0x2f8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x1fa>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	@ (800128c <HAL_GPIO_Init+0x2fc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x1f6>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a45      	ldr	r2, [pc, #276]	@ (8001290 <HAL_GPIO_Init+0x300>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x1f2>
 800117e:	2304      	movs	r3, #4
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001182:	2307      	movs	r3, #7
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	@ (800127c <HAL_GPIO_Init+0x2ec>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <HAL_GPIO_Init+0x304>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001294 <HAL_GPIO_Init+0x304>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_GPIO_Init+0x304>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a24      	ldr	r2, [pc, #144]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001206:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122a:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <HAL_GPIO_Init+0x304>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001254:	4a0f      	ldr	r2, [pc, #60]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f aea2 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012dc:	887a      	ldrh	r2, [r7, #2]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	400b      	ands	r3, r1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e267      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d075      	beq.n	800140a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800131e:	4b88      	ldr	r3, [pc, #544]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b04      	cmp	r3, #4
 8001328:	d00c      	beq.n	8001344 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132a:	4b85      	ldr	r3, [pc, #532]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001332:	2b08      	cmp	r3, #8
 8001334:	d112      	bne.n	800135c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001336:	4b82      	ldr	r3, [pc, #520]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001342:	d10b      	bne.n	800135c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4b7e      	ldr	r3, [pc, #504]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d05b      	beq.n	8001408 <HAL_RCC_OscConfig+0x108>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d157      	bne.n	8001408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e242      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x74>
 8001366:	4b76      	ldr	r3, [pc, #472]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a75      	ldr	r2, [pc, #468]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e01d      	b.n	80013b0 <HAL_RCC_OscConfig+0xb0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x98>
 800137e:	4b70      	ldr	r3, [pc, #448]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6f      	ldr	r2, [pc, #444]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b6d      	ldr	r3, [pc, #436]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6c      	ldr	r2, [pc, #432]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0xb0>
 8001398:	4b69      	ldr	r3, [pc, #420]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a68      	ldr	r2, [pc, #416]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800139e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b66      	ldr	r3, [pc, #408]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a65      	ldr	r2, [pc, #404]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d013      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fcd4 	bl	8000d64 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fcd0 	bl	8000d64 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e207      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0xc0>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcc0 	bl	8000d64 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcbc 	bl	8000d64 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1f3      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	4b51      	ldr	r3, [pc, #324]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0xe8>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d063      	beq.n	80014de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001416:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001422:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800142a:	2b08      	cmp	r3, #8
 800142c:	d11c      	bne.n	8001468 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142e:	4b44      	ldr	r3, [pc, #272]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	4b41      	ldr	r3, [pc, #260]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <HAL_RCC_OscConfig+0x152>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d001      	beq.n	8001452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e1c7      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4937      	ldr	r1, [pc, #220]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	e03a      	b.n	80014de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d020      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001470:	4b34      	ldr	r3, [pc, #208]	@ (8001544 <HAL_RCC_OscConfig+0x244>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff fc75 	bl	8000d64 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff fc71 	bl	8000d64 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e1a8      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4925      	ldr	r1, [pc, #148]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
 80014b0:	e015      	b.n	80014de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_RCC_OscConfig+0x244>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc54 	bl	8000d64 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc50 	bl	8000d64 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e187      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d036      	beq.n	8001558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_RCC_OscConfig+0x248>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff fc34 	bl	8000d64 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff fc30 	bl	8000d64 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e167      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_RCC_OscConfig+0x240>)
 8001514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x200>
 800151e:	e01b      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_RCC_OscConfig+0x248>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fc1d 	bl	8000d64 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152c:	e00e      	b.n	800154c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fc19 	bl	8000d64 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d907      	bls.n	800154c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e150      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
 8001540:	40023800 	.word	0x40023800
 8001544:	42470000 	.word	0x42470000
 8001548:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	4b88      	ldr	r3, [pc, #544]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ea      	bne.n	800152e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8097 	beq.w	8001694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b81      	ldr	r3, [pc, #516]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10f      	bne.n	8001596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b7d      	ldr	r3, [pc, #500]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a7c      	ldr	r2, [pc, #496]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b7a      	ldr	r3, [pc, #488]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b77      	ldr	r3, [pc, #476]	@ (8001774 <HAL_RCC_OscConfig+0x474>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	4b74      	ldr	r3, [pc, #464]	@ (8001774 <HAL_RCC_OscConfig+0x474>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a73      	ldr	r2, [pc, #460]	@ (8001774 <HAL_RCC_OscConfig+0x474>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fbd9 	bl	8000d64 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7ff fbd5 	bl	8000d64 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e10c      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_RCC_OscConfig+0x474>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x2ea>
 80015dc:	4b64      	ldr	r3, [pc, #400]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a63      	ldr	r2, [pc, #396]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e8:	e01c      	b.n	8001624 <HAL_RCC_OscConfig+0x324>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x30c>
 80015f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	4a5b      	ldr	r2, [pc, #364]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	@ 0x70
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0x324>
 800160c:	4b58      	ldr	r3, [pc, #352]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001610:	4a57      	ldr	r2, [pc, #348]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	@ 0x70
 8001618:	4b55      	ldr	r3, [pc, #340]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	4a54      	ldr	r2, [pc, #336]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800161e:	f023 0304 	bic.w	r3, r3, #4
 8001622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d015      	beq.n	8001658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fb9a 	bl	8000d64 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fb96 	bl	8000d64 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e0cb      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	4b49      	ldr	r3, [pc, #292]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0ee      	beq.n	8001634 <HAL_RCC_OscConfig+0x334>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff fb84 	bl	8000d64 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	e00a      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fb80 	bl	8000d64 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0b5      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	4b3e      	ldr	r3, [pc, #248]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ee      	bne.n	8001660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001688:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a38      	ldr	r2, [pc, #224]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800168e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80a1 	beq.w	80017e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d05c      	beq.n	8001764 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d141      	bne.n	8001736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_RCC_OscConfig+0x478>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb54 	bl	8000d64 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb50 	bl	8000d64 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e087      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	3b01      	subs	r3, #1
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	491b      	ldr	r1, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <HAL_RCC_OscConfig+0x478>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fb29 	bl	8000d64 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fb25 	bl	8000d64 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e05c      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x416>
 8001734:	e054      	b.n	80017e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_RCC_OscConfig+0x478>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb12 	bl	8000d64 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fb0e 	bl	8000d64 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e045      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_RCC_OscConfig+0x470>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x444>
 8001762:	e03d      	b.n	80017e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d107      	bne.n	800177c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e038      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000
 8001778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_RCC_OscConfig+0x4ec>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d028      	beq.n	80017dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d121      	bne.n	80017dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d11a      	bne.n	80017dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017ac:	4013      	ands	r3, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d111      	bne.n	80017dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	3b01      	subs	r3, #1
 80017c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0cc      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b68      	ldr	r3, [pc, #416]	@ (80019a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d90c      	bls.n	800182c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b65      	ldr	r3, [pc, #404]	@ (80019a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b63      	ldr	r3, [pc, #396]	@ (80019a8 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b8      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001844:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a58      	ldr	r2, [pc, #352]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800184e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	4b53      	ldr	r3, [pc, #332]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a52      	ldr	r2, [pc, #328]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001868:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	494d      	ldr	r1, [pc, #308]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d044      	beq.n	8001910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d119      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e07f      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06f      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e067      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4934      	ldr	r1, [pc, #208]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff fa40 	bl	8000d64 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff fa3c 	bl	8000d64 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e04f      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d20c      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e032      	b.n	800199e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4916      	ldr	r1, [pc, #88]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	490e      	ldr	r1, [pc, #56]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001976:	f000 f821 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	490a      	ldr	r1, [pc, #40]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9a0 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00
 80019ac:	40023800 	.word	0x40023800
 80019b0:	080027dc 	.word	0x080027dc
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c0:	b094      	sub	sp, #80	@ 0x50
 80019c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d4:	4b79      	ldr	r3, [pc, #484]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d00d      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x40>
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	f200 80e1 	bhi.w	8001ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d003      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ee:	e0db      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b73      	ldr	r3, [pc, #460]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019f4:	e0db      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f6:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x208>)
 80019f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019fa:	e0d8      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a06:	4b6d      	ldr	r3, [pc, #436]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d063      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b6a      	ldr	r3, [pc, #424]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a2e:	4622      	mov	r2, r4
 8001a30:	462b      	mov	r3, r5
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	0159      	lsls	r1, r3, #5
 8001a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a40:	0150      	lsls	r0, r2, #5
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4621      	mov	r1, r4
 8001a48:	1a51      	subs	r1, r2, r1
 8001a4a:	6139      	str	r1, [r7, #16]
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a60:	4659      	mov	r1, fp
 8001a62:	018b      	lsls	r3, r1, #6
 8001a64:	4651      	mov	r1, sl
 8001a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a6a:	4651      	mov	r1, sl
 8001a6c:	018a      	lsls	r2, r1, #6
 8001a6e:	4651      	mov	r1, sl
 8001a70:	ebb2 0801 	subs.w	r8, r2, r1
 8001a74:	4659      	mov	r1, fp
 8001a76:	eb63 0901 	sbc.w	r9, r3, r1
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a8e:	4690      	mov	r8, r2
 8001a90:	4699      	mov	r9, r3
 8001a92:	4623      	mov	r3, r4
 8001a94:	eb18 0303 	adds.w	r3, r8, r3
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	eb49 0303 	adc.w	r3, r9, r3
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	024b      	lsls	r3, r1, #9
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ab8:	4621      	mov	r1, r4
 8001aba:	024a      	lsls	r2, r1, #9
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ac8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001acc:	f7fe fb84 	bl	80001d8 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad8:	e058      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ada:	4b38      	ldr	r3, [pc, #224]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001af4:	4642      	mov	r2, r8
 8001af6:	464b      	mov	r3, r9
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	0159      	lsls	r1, r3, #5
 8001b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b06:	0150      	lsls	r0, r2, #5
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b12:	4649      	mov	r1, r9
 8001b14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b30:	eb63 050b 	sbc.w	r5, r3, fp
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	00eb      	lsls	r3, r5, #3
 8001b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b42:	00e2      	lsls	r2, r4, #3
 8001b44:	4614      	mov	r4, r2
 8001b46:	461d      	mov	r5, r3
 8001b48:	4643      	mov	r3, r8
 8001b4a:	18e3      	adds	r3, r4, r3
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	464b      	mov	r3, r9
 8001b50:	eb45 0303 	adc.w	r3, r5, r3
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b62:	4629      	mov	r1, r5
 8001b64:	028b      	lsls	r3, r1, #10
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	028a      	lsls	r2, r1, #10
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b76:	2200      	movs	r2, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	61fa      	str	r2, [r7, #28]
 8001b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b80:	f7fe fb2a 	bl	80001d8 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba6:	e002      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001baa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3750      	adds	r7, #80	@ 0x50
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	00f42400 	.word	0x00f42400
 8001bc4:	007a1200 	.word	0x007a1200

08001bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07b      	b.n	8001cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bea:	d009      	beq.n	8001c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
 8001bf2:	e005      	b.n	8001c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe ff88 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c84:	ea42 0103 	orr.w	r1, r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 0104 	and.w	r1, r3, #4
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	f003 0210 	and.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b088      	sub	sp, #32
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cea:	f7ff f83b 	bl	8000d64 <HAL_GetTick>
 8001cee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
 8001d02:	e12a      	b.n	8001f5a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_SPI_Transmit+0x36>
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e122      	b.n	8001f5a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_SPI_Transmit+0x48>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e11b      	b.n	8001f5a <HAL_SPI_Transmit+0x280>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d70:	d10f      	bne.n	8001d92 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9c:	2b40      	cmp	r3, #64	@ 0x40
 8001d9e:	d007      	beq.n	8001db0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001db8:	d152      	bne.n	8001e60 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_SPI_Transmit+0xee>
 8001dc2:	8b7b      	ldrh	r3, [r7, #26]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d145      	bne.n	8001e54 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	881a      	ldrh	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	1c9a      	adds	r2, r3, #2
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dec:	e032      	b.n	8001e54 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d112      	bne.n	8001e22 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	1c9a      	adds	r2, r3, #2
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e20:	e018      	b.n	8001e54 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e22:	f7fe ff9f 	bl	8000d64 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d803      	bhi.n	8001e3a <HAL_SPI_Transmit+0x160>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d102      	bne.n	8001e40 <HAL_SPI_Transmit+0x166>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e082      	b.n	8001f5a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1c7      	bne.n	8001dee <HAL_SPI_Transmit+0x114>
 8001e5e:	e053      	b.n	8001f08 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_SPI_Transmit+0x194>
 8001e68:	8b7b      	ldrh	r3, [r7, #26]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d147      	bne.n	8001efe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e94:	e033      	b.n	8001efe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d113      	bne.n	8001ecc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	330c      	adds	r3, #12
 8001eae:	7812      	ldrb	r2, [r2, #0]
 8001eb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001eca:	e018      	b.n	8001efe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ecc:	f7fe ff4a 	bl	8000d64 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d803      	bhi.n	8001ee4 <HAL_SPI_Transmit+0x20a>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee2:	d102      	bne.n	8001eea <HAL_SPI_Transmit+0x210>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e02d      	b.n	8001f5a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1c6      	bne.n	8001e96 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fbd9 	bl	80026c4 <SPI_EndRxTxTransaction>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e104      	b.n	800218c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f8a:	d112      	bne.n	8001fb2 <HAL_SPI_Receive+0x50>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2204      	movs	r2, #4
 8001f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f8f3 	bl	8002194 <HAL_SPI_TransmitReceive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	e0ec      	b.n	800218c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb2:	f7fe fed7 	bl	8000d64 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_SPI_Receive+0x62>
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0e1      	b.n	800218c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_SPI_Receive+0x74>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0da      	b.n	800218c <HAL_SPI_Receive+0x22a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002024:	d10f      	bne.n	8002046 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002034:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b40      	cmp	r3, #64	@ 0x40
 8002052:	d007      	beq.n	8002064 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d170      	bne.n	800214e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800206c:	e035      	b.n	80020da <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d115      	bne.n	80020a8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f103 020c 	add.w	r2, r3, #12
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020a6:	e018      	b.n	80020da <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020a8:	f7fe fe5c 	bl	8000d64 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d803      	bhi.n	80020c0 <HAL_SPI_Receive+0x15e>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d102      	bne.n	80020c6 <HAL_SPI_Receive+0x164>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e058      	b.n	800218c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1c4      	bne.n	800206e <HAL_SPI_Receive+0x10c>
 80020e4:	e038      	b.n	8002158 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d113      	bne.n	800211c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fe:	b292      	uxth	r2, r2
 8002100:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800211a:	e018      	b.n	800214e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800211c:	f7fe fe22 	bl	8000d64 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d803      	bhi.n	8002134 <HAL_SPI_Receive+0x1d2>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d102      	bne.n	800213a <HAL_SPI_Receive+0x1d8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e01e      	b.n	800218c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1c6      	bne.n	80020e6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fa4b 	bl	80025f8 <SPI_EndRxTransaction>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800218a:	2300      	movs	r3, #0
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021a2:	2301      	movs	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a6:	f7fe fddd 	bl	8000d64 <HAL_GetTick>
 80021aa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021b2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021be:	7ffb      	ldrb	r3, [r7, #31]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d00c      	beq.n	80021de <HAL_SPI_TransmitReceive+0x4a>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021ca:	d106      	bne.n	80021da <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <HAL_SPI_TransmitReceive+0x46>
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d001      	beq.n	80021de <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
 80021dc:	e17f      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x5c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x5c>
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e174      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_SPI_TransmitReceive+0x6e>
 80021fe:	2302      	movs	r3, #2
 8002200:	e16d      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b04      	cmp	r3, #4
 8002214:	d003      	beq.n	800221e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2205      	movs	r2, #5
 800221a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225e:	2b40      	cmp	r3, #64	@ 0x40
 8002260:	d007      	beq.n	8002272 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800227a:	d17e      	bne.n	800237a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_SPI_TransmitReceive+0xf6>
 8002284:	8afb      	ldrh	r3, [r7, #22]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d16c      	bne.n	8002364 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	1c9a      	adds	r2, r3, #2
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ae:	e059      	b.n	8002364 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d11b      	bne.n	80022f6 <HAL_SPI_TransmitReceive+0x162>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d016      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0x162>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d113      	bne.n	80022f6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	881a      	ldrh	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	1c9a      	adds	r2, r3, #2
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d119      	bne.n	8002338 <HAL_SPI_TransmitReceive+0x1a4>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d014      	beq.n	8002338 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002318:	b292      	uxth	r2, r2
 800231a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002320:	1c9a      	adds	r2, r3, #2
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002334:	2301      	movs	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002338:	f7fe fd14 	bl	8000d64 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	429a      	cmp	r2, r3
 8002346:	d80d      	bhi.n	8002364 <HAL_SPI_TransmitReceive+0x1d0>
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d009      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0bc      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1a0      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x11c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d19b      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x11c>
 8002378:	e082      	b.n	8002480 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_TransmitReceive+0x1f4>
 8002382:	8afb      	ldrh	r3, [r7, #22]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d171      	bne.n	800246c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ae:	e05d      	b.n	800246c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d11c      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x264>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d017      	beq.n	80023f8 <HAL_SPI_TransmitReceive+0x264>
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d114      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d119      	bne.n	800243a <HAL_SPI_TransmitReceive+0x2a6>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d014      	beq.n	800243a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800243a:	f7fe fc93 	bl	8000d64 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002446:	429a      	cmp	r2, r3
 8002448:	d803      	bhi.n	8002452 <HAL_SPI_TransmitReceive+0x2be>
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d102      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x2c4>
 8002452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e038      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d19c      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x21c>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d197      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f91d 	bl	80026c4 <SPI_EndRxTxTransaction>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e01d      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3728      	adds	r7, #40	@ 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024f8:	f7fe fc34 	bl	8000d64 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4413      	add	r3, r2
 8002506:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002508:	f7fe fc2c 	bl	8000d64 <HAL_GetTick>
 800250c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800250e:	4b39      	ldr	r3, [pc, #228]	@ (80025f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	0d1b      	lsrs	r3, r3, #20
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800251e:	e054      	b.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d050      	beq.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002528:	f7fe fc1c 	bl	8000d64 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	429a      	cmp	r2, r3
 8002536:	d902      	bls.n	800253e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d13d      	bne.n	80025ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800254c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002556:	d111      	bne.n	800257c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002560:	d004      	beq.n	800256c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256a:	d107      	bne.n	800257c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800257a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002584:	d10f      	bne.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e017      	b.n	80025ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d19b      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800260c:	d111      	bne.n	8002632 <SPI_EndRxTransaction+0x3a>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002616:	d004      	beq.n	8002622 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002620:	d107      	bne.n	8002632 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800263a:	d12a      	bne.n	8002692 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002644:	d012      	beq.n	800266c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	@ 0x80
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff ff49 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02d      	beq.n	80026b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e026      	b.n	80026ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	2101      	movs	r1, #1
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff ff36 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01a      	beq.n	80026b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e013      	b.n	80026ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	2101      	movs	r1, #1
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff ff23 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e000      	b.n	80026ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2201      	movs	r2, #1
 80026d8:	2102      	movs	r1, #2
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff ff04 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e032      	b.n	800275c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <SPI_EndRxTxTransaction+0xa0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <SPI_EndRxTxTransaction+0xa4>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0d5b      	lsrs	r3, r3, #21
 8002702:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002714:	d112      	bne.n	800273c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff fee1 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d016      	beq.n	800275a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e00f      	b.n	800275c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3b01      	subs	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002752:	2b80      	cmp	r3, #128	@ 0x80
 8002754:	d0f2      	beq.n	800273c <SPI_EndRxTxTransaction+0x78>
 8002756:	e000      	b.n	800275a <SPI_EndRxTxTransaction+0x96>
        break;
 8002758:	bf00      	nop
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000000 	.word	0x20000000
 8002768:	165e9f81 	.word	0x165e9f81

0800276c <memset>:
 800276c:	4402      	add	r2, r0
 800276e:	4603      	mov	r3, r0
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	f803 1b01 	strb.w	r1, [r3], #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4d0d      	ldr	r5, [pc, #52]	@ (80027b4 <__libc_init_array+0x38>)
 8002780:	4c0d      	ldr	r4, [pc, #52]	@ (80027b8 <__libc_init_array+0x3c>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	2600      	movs	r6, #0
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	4d0b      	ldr	r5, [pc, #44]	@ (80027bc <__libc_init_array+0x40>)
 800278e:	4c0c      	ldr	r4, [pc, #48]	@ (80027c0 <__libc_init_array+0x44>)
 8002790:	f000 f818 	bl	80027c4 <_init>
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	2600      	movs	r6, #0
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	080027f4 	.word	0x080027f4
 80027b8:	080027f4 	.word	0x080027f4
 80027bc:	080027f4 	.word	0x080027f4
 80027c0:	080027f8 	.word	0x080027f8

080027c4 <_init>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr

080027d0 <_fini>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr
