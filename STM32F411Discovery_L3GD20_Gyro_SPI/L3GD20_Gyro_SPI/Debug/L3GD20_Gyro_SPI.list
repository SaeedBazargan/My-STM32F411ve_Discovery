
L3GD20_Gyro_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e34  08002e34  00003e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e3c  08002e3c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e40  08002e40  00003e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002e50  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002e50  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000684e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001445  00000000  00000000  0000a88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000049a  00000000  00000000  0000c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b25  00000000  00000000  0000c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075ac  00000000  00000000  000212c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081eb3  00000000  00000000  00028873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ec  00000000  00000000  000aa76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000ac058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002e0c 	.word	0x08002e0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002e0c 	.word	0x08002e0c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295
 8000804:	f04f 30ff 	movne.w	r0, #4294967295
 8000808:	f000 b96a 	b.w	8000ae0 <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9d08      	ldr	r5, [sp, #32]
 800082a:	460c      	mov	r4, r1
 800082c:	2b00      	cmp	r3, #0
 800082e:	d14e      	bne.n	80008ce <__udivmoddi4+0xaa>
 8000830:	4694      	mov	ip, r2
 8000832:	458c      	cmp	ip, r1
 8000834:	4686      	mov	lr, r0
 8000836:	fab2 f282 	clz	r2, r2
 800083a:	d962      	bls.n	8000902 <__udivmoddi4+0xde>
 800083c:	b14a      	cbz	r2, 8000852 <__udivmoddi4+0x2e>
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	4091      	lsls	r1, r2
 8000844:	fa20 f303 	lsr.w	r3, r0, r3
 8000848:	fa0c fc02 	lsl.w	ip, ip, r2
 800084c:	4319      	orrs	r1, r3
 800084e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000852:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000856:	fa1f f68c 	uxth.w	r6, ip
 800085a:	fbb1 f4f7 	udiv	r4, r1, r7
 800085e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000862:	fb07 1114 	mls	r1, r7, r4, r1
 8000866:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086a:	fb04 f106 	mul.w	r1, r4, r6
 800086e:	4299      	cmp	r1, r3
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x64>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f104 30ff 	add.w	r0, r4, #4294967295
 800087a:	f080 8112 	bcs.w	8000aa2 <__udivmoddi4+0x27e>
 800087e:	4299      	cmp	r1, r3
 8000880:	f240 810f 	bls.w	8000aa2 <__udivmoddi4+0x27e>
 8000884:	3c02      	subs	r4, #2
 8000886:	4463      	add	r3, ip
 8000888:	1a59      	subs	r1, r3, r1
 800088a:	fa1f f38e 	uxth.w	r3, lr
 800088e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000892:	fb07 1110 	mls	r1, r7, r0, r1
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb00 f606 	mul.w	r6, r0, r6
 800089e:	429e      	cmp	r6, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x94>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008aa:	f080 80fc 	bcs.w	8000aa6 <__udivmoddi4+0x282>
 80008ae:	429e      	cmp	r6, r3
 80008b0:	f240 80f9 	bls.w	8000aa6 <__udivmoddi4+0x282>
 80008b4:	4463      	add	r3, ip
 80008b6:	3802      	subs	r0, #2
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008be:	2100      	movs	r1, #0
 80008c0:	b11d      	cbz	r5, 80008ca <__udivmoddi4+0xa6>
 80008c2:	40d3      	lsrs	r3, r2
 80008c4:	2200      	movs	r2, #0
 80008c6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d905      	bls.n	80008de <__udivmoddi4+0xba>
 80008d2:	b10d      	cbz	r5, 80008d8 <__udivmoddi4+0xb4>
 80008d4:	e9c5 0100 	strd	r0, r1, [r5]
 80008d8:	2100      	movs	r1, #0
 80008da:	4608      	mov	r0, r1
 80008dc:	e7f5      	b.n	80008ca <__udivmoddi4+0xa6>
 80008de:	fab3 f183 	clz	r1, r3
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d146      	bne.n	8000974 <__udivmoddi4+0x150>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d302      	bcc.n	80008f0 <__udivmoddi4+0xcc>
 80008ea:	4290      	cmp	r0, r2
 80008ec:	f0c0 80f0 	bcc.w	8000ad0 <__udivmoddi4+0x2ac>
 80008f0:	1a86      	subs	r6, r0, r2
 80008f2:	eb64 0303 	sbc.w	r3, r4, r3
 80008f6:	2001      	movs	r0, #1
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d0e6      	beq.n	80008ca <__udivmoddi4+0xa6>
 80008fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000900:	e7e3      	b.n	80008ca <__udivmoddi4+0xa6>
 8000902:	2a00      	cmp	r2, #0
 8000904:	f040 8090 	bne.w	8000a28 <__udivmoddi4+0x204>
 8000908:	eba1 040c 	sub.w	r4, r1, ip
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	fa1f f78c 	uxth.w	r7, ip
 8000914:	2101      	movs	r1, #1
 8000916:	fbb4 f6f8 	udiv	r6, r4, r8
 800091a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091e:	fb08 4416 	mls	r4, r8, r6, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb07 f006 	mul.w	r0, r7, r6
 800092a:	4298      	cmp	r0, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x11c>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f106 34ff 	add.w	r4, r6, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x11a>
 8000938:	4298      	cmp	r0, r3
 800093a:	f200 80cd 	bhi.w	8000ad8 <__udivmoddi4+0x2b4>
 800093e:	4626      	mov	r6, r4
 8000940:	1a1c      	subs	r4, r3, r0
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb4 f0f8 	udiv	r0, r4, r8
 800094a:	fb08 4410 	mls	r4, r8, r0, r4
 800094e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000952:	fb00 f707 	mul.w	r7, r0, r7
 8000956:	429f      	cmp	r7, r3
 8000958:	d908      	bls.n	800096c <__udivmoddi4+0x148>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000962:	d202      	bcs.n	800096a <__udivmoddi4+0x146>
 8000964:	429f      	cmp	r7, r3
 8000966:	f200 80b0 	bhi.w	8000aca <__udivmoddi4+0x2a6>
 800096a:	4620      	mov	r0, r4
 800096c:	1bdb      	subs	r3, r3, r7
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	e7a5      	b.n	80008c0 <__udivmoddi4+0x9c>
 8000974:	f1c1 0620 	rsb	r6, r1, #32
 8000978:	408b      	lsls	r3, r1
 800097a:	fa22 f706 	lsr.w	r7, r2, r6
 800097e:	431f      	orrs	r7, r3
 8000980:	fa20 fc06 	lsr.w	ip, r0, r6
 8000984:	fa04 f301 	lsl.w	r3, r4, r1
 8000988:	ea43 030c 	orr.w	r3, r3, ip
 800098c:	40f4      	lsrs	r4, r6
 800098e:	fa00 f801 	lsl.w	r8, r0, r1
 8000992:	0c38      	lsrs	r0, r7, #16
 8000994:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000998:	fbb4 fef0 	udiv	lr, r4, r0
 800099c:	fa1f fc87 	uxth.w	ip, r7
 80009a0:	fb00 441e 	mls	r4, r0, lr, r4
 80009a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009a8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ac:	45a1      	cmp	r9, r4
 80009ae:	fa02 f201 	lsl.w	r2, r2, r1
 80009b2:	d90a      	bls.n	80009ca <__udivmoddi4+0x1a6>
 80009b4:	193c      	adds	r4, r7, r4
 80009b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009ba:	f080 8084 	bcs.w	8000ac6 <__udivmoddi4+0x2a2>
 80009be:	45a1      	cmp	r9, r4
 80009c0:	f240 8081 	bls.w	8000ac6 <__udivmoddi4+0x2a2>
 80009c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	eba4 0409 	sub.w	r4, r4, r9
 80009ce:	fa1f f983 	uxth.w	r9, r3
 80009d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009d6:	fb00 4413 	mls	r4, r0, r3, r4
 80009da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009de:	fb03 fc0c 	mul.w	ip, r3, ip
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d907      	bls.n	80009f6 <__udivmoddi4+0x1d2>
 80009e6:	193c      	adds	r4, r7, r4
 80009e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009ec:	d267      	bcs.n	8000abe <__udivmoddi4+0x29a>
 80009ee:	45a4      	cmp	ip, r4
 80009f0:	d965      	bls.n	8000abe <__udivmoddi4+0x29a>
 80009f2:	3b02      	subs	r3, #2
 80009f4:	443c      	add	r4, r7
 80009f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009fa:	fba0 9302 	umull	r9, r3, r0, r2
 80009fe:	eba4 040c 	sub.w	r4, r4, ip
 8000a02:	429c      	cmp	r4, r3
 8000a04:	46ce      	mov	lr, r9
 8000a06:	469c      	mov	ip, r3
 8000a08:	d351      	bcc.n	8000aae <__udivmoddi4+0x28a>
 8000a0a:	d04e      	beq.n	8000aaa <__udivmoddi4+0x286>
 8000a0c:	b155      	cbz	r5, 8000a24 <__udivmoddi4+0x200>
 8000a0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a12:	eb64 040c 	sbc.w	r4, r4, ip
 8000a16:	fa04 f606 	lsl.w	r6, r4, r6
 8000a1a:	40cb      	lsrs	r3, r1
 8000a1c:	431e      	orrs	r6, r3
 8000a1e:	40cc      	lsrs	r4, r1
 8000a20:	e9c5 6400 	strd	r6, r4, [r5]
 8000a24:	2100      	movs	r1, #0
 8000a26:	e750      	b.n	80008ca <__udivmoddi4+0xa6>
 8000a28:	f1c2 0320 	rsb	r3, r2, #32
 8000a2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	fa24 f303 	lsr.w	r3, r4, r3
 8000a38:	4094      	lsls	r4, r2
 8000a3a:	430c      	orrs	r4, r1
 8000a3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a44:	fa1f f78c 	uxth.w	r7, ip
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a50:	0c23      	lsrs	r3, r4, #16
 8000a52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a56:	fb00 f107 	mul.w	r1, r0, r7
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x24c>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a66:	d22c      	bcs.n	8000ac2 <__udivmoddi4+0x29e>
 8000a68:	4299      	cmp	r1, r3
 8000a6a:	d92a      	bls.n	8000ac2 <__udivmoddi4+0x29e>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a78:	fb08 3311 	mls	r3, r8, r1, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb01 f307 	mul.w	r3, r1, r7
 8000a84:	42a3      	cmp	r3, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x276>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a90:	d213      	bcs.n	8000aba <__udivmoddi4+0x296>
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	d911      	bls.n	8000aba <__udivmoddi4+0x296>
 8000a96:	3902      	subs	r1, #2
 8000a98:	4464      	add	r4, ip
 8000a9a:	1ae4      	subs	r4, r4, r3
 8000a9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa0:	e739      	b.n	8000916 <__udivmoddi4+0xf2>
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	e6f0      	b.n	8000888 <__udivmoddi4+0x64>
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	e706      	b.n	80008b8 <__udivmoddi4+0x94>
 8000aaa:	45c8      	cmp	r8, r9
 8000aac:	d2ae      	bcs.n	8000a0c <__udivmoddi4+0x1e8>
 8000aae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ab2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ab6:	3801      	subs	r0, #1
 8000ab8:	e7a8      	b.n	8000a0c <__udivmoddi4+0x1e8>
 8000aba:	4631      	mov	r1, r6
 8000abc:	e7ed      	b.n	8000a9a <__udivmoddi4+0x276>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	e799      	b.n	80009f6 <__udivmoddi4+0x1d2>
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	e7d4      	b.n	8000a70 <__udivmoddi4+0x24c>
 8000ac6:	46d6      	mov	lr, sl
 8000ac8:	e77f      	b.n	80009ca <__udivmoddi4+0x1a6>
 8000aca:	4463      	add	r3, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	e74d      	b.n	800096c <__udivmoddi4+0x148>
 8000ad0:	4606      	mov	r6, r0
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	e70f      	b.n	80008f8 <__udivmoddi4+0xd4>
 8000ad8:	3e02      	subs	r6, #2
 8000ada:	4463      	add	r3, ip
 8000adc:	e730      	b.n	8000940 <__udivmoddi4+0x11c>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <L3GD20_Init>:
uint8_t transmit_buffer[2] = {0, 0};

// <---- ------------ Main L3GD20 Functions ------------ ---->
// <---- ------------ L3GD20 Initialize ------------ ---->
L3GD20_Gyro_Result L3GD20_Init(SPI_HandleTypeDef* SPIx , GPIO_TypeDef *CS_GPIOx, uint16_t CS_PinNumber, L3GD20TypeDef* datastruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	4613      	mov	r3, r2
 8000af2:	80fb      	strh	r3, [r7, #6]
	_CS_GPIO = CS_GPIOx;
 8000af4:	4a68      	ldr	r2, [pc, #416]	@ (8000c98 <L3GD20_Init+0x1b4>)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6013      	str	r3, [r2, #0]
	_CS_PinNumber = CS_PinNumber;
 8000afa:	4a68      	ldr	r2, [pc, #416]	@ (8000c9c <L3GD20_Init+0x1b8>)
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	8013      	strh	r3, [r2, #0]

	uint8_t WHO_AM_I = (uint8_t)L3GD20_WHO_AM_I_ADDR;
 8000b00:	230f      	movs	r3, #15
 8000b02:	75fb      	strb	r3, [r7, #23]

	L3GD20_ReadData(SPIx, &temp, WHO_AM_I, 1);
 8000b04:	7dfa      	ldrb	r2, [r7, #23]
 8000b06:	2301      	movs	r3, #1
 8000b08:	4965      	ldr	r1, [pc, #404]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f000 f8cc 	bl	8000ca8 <L3GD20_ReadData>
	if(temp != I_AM_L3GD20_TR)
 8000b10:	4b63      	ldr	r3, [pc, #396]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2bd5      	cmp	r3, #213	@ 0xd5
 8000b16:	d001      	beq.n	8000b1c <L3GD20_Init+0x38>
		return L3GD20_RESULT_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e0b8      	b.n	8000c8e <L3GD20_Init+0x1aa>

	// <---- ------------ Setup All Registers ------------ ---->
	// <---- ------------ Control Register_1 ------------ ---->
	// <---- ------------ DataRate, Bandwidth, PowerMode, Axes Enable ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG1_ADDR;
 8000b1c:	4b61      	ldr	r3, [pc, #388]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b1e:	2220      	movs	r2, #32
 8000b20:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_DataRate | datastruct -> Gyro_Bandwidth | ((datastruct -> Gyro_PWR) << 3) | datastruct -> Gyro_Axes;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	785a      	ldrb	r2, [r3, #1]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	78db      	ldrb	r3, [r3, #3]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b25a      	sxtb	r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	789b      	ldrb	r3, [r3, #2]
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	4313      	orrs	r3, r2
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b56      	ldr	r3, [pc, #344]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b4a:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000b4c:	4b55      	ldr	r3, [pc, #340]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4a54      	ldr	r2, [pc, #336]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b52:	7852      	ldrb	r2, [r2, #1]
 8000b54:	4619      	mov	r1, r3
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f8de 	bl	8000d18 <L3GD20_WriteData>

	HAL_Delay(25);
 8000b5c:	2019      	movs	r0, #25
 8000b5e:	f000 fc31 	bl	80013c4 <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG1_ADDR, 1);
 8000b62:	2301      	movs	r3, #1
 8000b64:	2220      	movs	r2, #32
 8000b66:	494e      	ldr	r1, [pc, #312]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 f89d 	bl	8000ca8 <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b70:	785a      	ldrb	r2, [r3, #1]
 8000b72:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d001      	beq.n	8000b7e <L3GD20_Init+0x9a>
		return L3GD20_RESULT_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e087      	b.n	8000c8e <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_2 ------------ ---->
	// <---- ------------ High-Pass Filter Mode, High-Pass Filter Cut-off Frequency ------------ ---->

	transmit_buffer[0] = L3GD20_CTRL_REG2_ADDR;
 8000b7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b80:	2221      	movs	r2, #33	@ 0x21
 8000b82:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_FilterMode | datastruct -> Gyro_FilterCutFreq;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	799a      	ldrb	r2, [r3, #6]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	79db      	ldrb	r3, [r3, #7]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b44      	ldr	r3, [pc, #272]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b92:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000b94:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4a42      	ldr	r2, [pc, #264]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000b9a:	7852      	ldrb	r2, [r2, #1]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 f8ba 	bl	8000d18 <L3GD20_WriteData>

	HAL_Delay(25);
 8000ba4:	2019      	movs	r0, #25
 8000ba6:	f000 fc0d 	bl	80013c4 <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG2_ADDR, 1);
 8000baa:	2301      	movs	r3, #1
 8000bac:	2221      	movs	r2, #33	@ 0x21
 8000bae:	493c      	ldr	r1, [pc, #240]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f879 	bl	8000ca8 <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	4b39      	ldr	r3, [pc, #228]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d001      	beq.n	8000bc6 <L3GD20_Init+0xe2>
		return L3GD20_RESULT_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e063      	b.n	8000c8e <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_3 ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG3_ADDR;
 8000bc6:	4b37      	ldr	r3, [pc, #220]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000bc8:	2222      	movs	r2, #34	@ 0x22
 8000bca:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = 0x00;					//Default
 8000bcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000bd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4a33      	ldr	r2, [pc, #204]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000bd8:	7852      	ldrb	r2, [r2, #1]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f89b 	bl	8000d18 <L3GD20_WriteData>

	HAL_Delay(25);
 8000be2:	2019      	movs	r0, #25
 8000be4:	f000 fbee 	bl	80013c4 <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG3_ADDR, 1);
 8000be8:	2301      	movs	r3, #1
 8000bea:	2222      	movs	r2, #34	@ 0x22
 8000bec:	492c      	ldr	r1, [pc, #176]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f000 f85a 	bl	8000ca8 <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000bf6:	785a      	ldrb	r2, [r3, #1]
 8000bf8:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d001      	beq.n	8000c04 <L3GD20_Init+0x120>
		return L3GD20_RESULT_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e044      	b.n	8000c8e <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_4 ------------ ---->
	// <---- ------------ FullScale ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG4_ADDR;
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c06:	2223      	movs	r2, #35	@ 0x23
 8000c08:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_Scale;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	791a      	ldrb	r2, [r3, #4]
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c10:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000c12:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c18:	7852      	ldrb	r2, [r2, #1]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f87b 	bl	8000d18 <L3GD20_WriteData>

	HAL_Delay(25);
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 fbce 	bl	80013c4 <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG4_ADDR, 1);
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2223      	movs	r2, #35	@ 0x23
 8000c2c:	491c      	ldr	r1, [pc, #112]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f000 f83a 	bl	8000ca8 <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c36:	785a      	ldrb	r2, [r3, #1]
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d001      	beq.n	8000c44 <L3GD20_Init+0x160>
		return L3GD20_RESULT_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e024      	b.n	8000c8e <L3GD20_Init+0x1aa>

	// <---- ------------ Control Register_5 ------------ ---->
	// <---- ------------ High-Pass Filter Enable ------------ ---->
	transmit_buffer[0] = L3GD20_CTRL_REG5_ADDR;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c46:	2224      	movs	r2, #36	@ 0x24
 8000c48:	701a      	strb	r2, [r3, #0]
	transmit_buffer[1] = datastruct -> Gyro_FilterEn | datastruct -> Gyro_FilterCutFreq;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	795a      	ldrb	r2, [r3, #5]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	79db      	ldrb	r3, [r3, #7]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c58:	705a      	strb	r2, [r3, #1]
	L3GD20_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c60:	7852      	ldrb	r2, [r2, #1]
 8000c62:	4619      	mov	r1, r3
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 f857 	bl	8000d18 <L3GD20_WriteData>

	HAL_Delay(25);
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 fbaa 	bl	80013c4 <HAL_Delay>

	L3GD20_ReadData(SPIx, &temp, L3GD20_CTRL_REG5_ADDR, 1);
 8000c70:	2301      	movs	r3, #1
 8000c72:	2224      	movs	r2, #36	@ 0x24
 8000c74:	490a      	ldr	r1, [pc, #40]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f000 f816 	bl	8000ca8 <L3GD20_ReadData>
	if(temp != transmit_buffer[1])
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <L3GD20_Init+0x1c0>)
 8000c7e:	785a      	ldrb	r2, [r3, #1]
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <L3GD20_Init+0x1bc>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d001      	beq.n	8000c8c <L3GD20_Init+0x1a8>
		return L3GD20_RESULT_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <L3GD20_Init+0x1aa>

	return L3GD20_RESULT_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000002c 	.word	0x2000002c
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	20000030 	.word	0x20000030
 8000ca4:	20000034 	.word	0x20000034

08000ca8 <L3GD20_ReadData>:
// <---- ------------ L3GD20 Read Data ------------ ---->
L3GD20_Gyro_Result L3GD20_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <L3GD20_ReadData+0x68>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <L3GD20_ReadData+0x6c>)
 8000cce:	8811      	ldrh	r1, [r2, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fe04 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIx, &reg, 1, 50);
 8000cd8:	f107 0117 	add.w	r1, r7, #23
 8000cdc:	2332      	movs	r3, #50	@ 0x32
 8000cde:	2201      	movs	r2, #1
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f001 fb1e 	bl	8002322 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 50);
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	2332      	movs	r3, #50	@ 0x32
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f001 fc5b 	bl	80025aa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <L3GD20_ReadData+0x68>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <L3GD20_ReadData+0x6c>)
 8000cfa:	8811      	ldrh	r1, [r2, #0]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fdee 	bl	80018e0 <HAL_GPIO_WritePin>
	
	/* Return OK */
	return L3GD20_RESULT_OK;    
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000002c 	.word	0x2000002c
 8000d14:	20000028 	.word	0x20000028

08000d18 <L3GD20_WriteData>:
// <---- ------------ L3GD20 Write Data ------------ ---->
L3GD20_Gyro_Result L3GD20_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
 8000d24:	4613      	mov	r3, r2
 8000d26:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {addr, data};
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	733b      	strb	r3, [r7, #12]
 8000d2c:	78bb      	ldrb	r3, [r7, #2]
 8000d2e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <L3GD20_WriteData+0x58>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <L3GD20_WriteData+0x5c>)
 8000d36:	8811      	ldrh	r1, [r2, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fdd0 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000d40:	2014      	movs	r0, #20
 8000d42:	f000 fb3f 	bl	80013c4 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 50);
 8000d46:	f107 010c 	add.w	r1, r7, #12
 8000d4a:	2332      	movs	r3, #50	@ 0x32
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f001 fae7 	bl	8002322 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <L3GD20_WriteData+0x58>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <L3GD20_WriteData+0x5c>)
 8000d5a:	8811      	ldrh	r1, [r2, #0]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fdbe 	bl	80018e0 <HAL_GPIO_WritePin>

	return L3GD20_RESULT_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000002c 	.word	0x2000002c
 8000d74:	20000028 	.word	0x20000028

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 fab0 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f814 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 f8b0 	bl	8000ee8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d88:	f000 f878 	bl	8000e7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Gyro_L3GD20_Init();
 8000d8c:	f000 f922 	bl	8000fd4 <Gyro_L3GD20_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Gyro_L3GD20_ReadData();
 8000d90:	f000 f956 	bl	8001040 <Gyro_L3GD20_ReadData>
//	  L3GD20_loop();
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d98:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <main+0x30>)
 8000d9a:	f000 fdba 	bl	8001912 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fb10 	bl	80013c4 <HAL_Delay>
	  Gyro_L3GD20_ReadData();
 8000da4:	bf00      	nop
 8000da6:	e7f3      	b.n	8000d90 <main+0x18>
 8000da8:	40020c00 	.word	0x40020c00

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	@ 0x50
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	2230      	movs	r2, #48	@ 0x30
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fffa 	bl	8002db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <SystemClock_Config+0xc8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a26      	ldr	r2, [pc, #152]	@ (8000e74 <SystemClock_Config+0xc8>)
 8000dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <SystemClock_Config+0xc8>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e20:	2364      	movs	r3, #100	@ 0x64
 8000e22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fd89 	bl	8001948 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e3c:	f000 f96e 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 ffeb 	bl	8001e38 <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e68:	f000 f958 	bl	800111c <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3750      	adds	r7, #80	@ 0x50
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <MX_SPI1_Init+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb0:	2228      	movs	r2, #40	@ 0x28
 8000eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec8:	220a      	movs	r2, #10
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ece:	f001 f99f 	bl	8002210 <HAL_SPI_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed8:	f000 f920 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000040 	.word	0x20000040
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a30      	ldr	r2, [pc, #192]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a29      	ldr	r2, [pc, #164]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b27      	ldr	r3, [pc, #156]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a22      	ldr	r2, [pc, #136]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <MX_GPIO_Init+0xe4>)
 8000f74:	f000 fcb4 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7e:	4814      	ldr	r0, [pc, #80]	@ (8000fd0 <MX_GPIO_Init+0xe8>)
 8000f80:	f000 fcae 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f84:	2308      	movs	r3, #8
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <MX_GPIO_Init+0xe4>)
 8000f9c:	f000 fb1c 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_GPIO_Init+0xe8>)
 8000fba:	f000 fb0d 	bl	80015d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40020c00 	.word	0x40020c00

08000fd4 <Gyro_L3GD20_Init>:

/* USER CODE BEGIN 4 */
// <---- ------------ Gyyroscope Initialize ------------ ---->
void Gyro_L3GD20_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	L3GD20.Gyro_PWR 			= L3GD20_MODE_ACTIVE;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
	L3GD20.Gyro_DataRate 		= L3GD20_OUTPUT_DATARATE_4;
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000fe0:	22c0      	movs	r2, #192	@ 0xc0
 8000fe2:	705a      	strb	r2, [r3, #1]
	L3GD20.Gyro_Axes 			= L3GD20_AXES_ENABLE;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	709a      	strb	r2, [r3, #2]
	L3GD20.Gyro_Bandwidth 		= L3GD20_BANDWIDTH_4;
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000fec:	2230      	movs	r2, #48	@ 0x30
 8000fee:	70da      	strb	r2, [r3, #3]
	L3GD20.Gyro_Scale 			= L3GD20_FULLSCALE_2000;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	711a      	strb	r2, [r3, #4]
	L3GD20.Gyro_FilterEn		= L3GD20_HIGHPASSFILTER_ENABLE;
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	715a      	strb	r2, [r3, #5]
	L3GD20.Gyro_FilterMode 		= L3GD20_HPM_NORMAL_MODE_RES;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	719a      	strb	r2, [r3, #6]
	L3GD20.Gyro_FilterCutFreq 	= L3GD20_HPFCF_0;
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	71da      	strb	r2, [r3, #7]

	isInitialized = L3GD20_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &L3GD20);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <Gyro_L3GD20_Init+0x58>)
 800100a:	2208      	movs	r2, #8
 800100c:	4908      	ldr	r1, [pc, #32]	@ (8001030 <Gyro_L3GD20_Init+0x5c>)
 800100e:	4809      	ldr	r0, [pc, #36]	@ (8001034 <Gyro_L3GD20_Init+0x60>)
 8001010:	f7ff fd68 	bl	8000ae4 <L3GD20_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <Gyro_L3GD20_Init+0x64>)
 800101a:	701a      	strb	r2, [r3, #0]
	if(isInitialized != L3GD20_RESULT_OK)
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <Gyro_L3GD20_Init+0x64>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <Gyro_L3GD20_Init+0x54>
		Error_Handler();
 8001024:	f000 f87a 	bl	800111c <Error_Handler>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000038 	.word	0x20000038
 8001030:	40021000 	.word	0x40021000
 8001034:	20000040 	.word	0x20000040
 8001038:	20000098 	.word	0x20000098
 800103c:	00000000 	.word	0x00000000

08001040 <Gyro_L3GD20_ReadData>:
// <---- ------------ Gyyroscope Read Data ------------ ---->
void Gyro_L3GD20_ReadData(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	L3GD20_ReadData(&hspi1, Gyro_Buffer, L3GD20_OUT_X_L_ADDR, 6);
 8001044:	2306      	movs	r3, #6
 8001046:	2228      	movs	r2, #40	@ 0x28
 8001048:	4931      	ldr	r1, [pc, #196]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 800104a:	4832      	ldr	r0, [pc, #200]	@ (8001114 <Gyro_L3GD20_ReadData+0xd4>)
 800104c:	f7ff fe2c 	bl	8000ca8 <L3GD20_ReadData>

	Gyro_RawData[0] = ((int16_t)(Gyro_Buffer[0] | Gyro_Buffer[1] << 8) * 0.7);
 8001050:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fb32 	bl	80006d0 <__aeabi_i2d>
 800106c:	a326      	add	r3, pc, #152	@ (adr r3, 8001108 <Gyro_L3GD20_ReadData+0xc8>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff f8b1 	bl	80001d8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fb91 	bl	80007a4 <__aeabi_d2iz>
 8001082:	4603      	mov	r3, r0
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <Gyro_L3GD20_ReadData+0xd8>)
 8001088:	801a      	strh	r2, [r3, #0]
	Gyro_RawData[1] = ((int16_t)(Gyro_Buffer[2] | Gyro_Buffer[3] << 8) * 0.7);
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 800108c:	789b      	ldrb	r3, [r3, #2]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 8001094:	78db      	ldrb	r3, [r3, #3]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fb15 	bl	80006d0 <__aeabi_i2d>
 80010a6:	a318      	add	r3, pc, #96	@ (adr r3, 8001108 <Gyro_L3GD20_ReadData+0xc8>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff f894 	bl	80001d8 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fb74 	bl	80007a4 <__aeabi_d2iz>
 80010bc:	4603      	mov	r3, r0
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <Gyro_L3GD20_ReadData+0xd8>)
 80010c2:	805a      	strh	r2, [r3, #2]
	Gyro_RawData[2] = ((int16_t)(Gyro_Buffer[4] | Gyro_Buffer[5] << 8) * 0.7);
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <Gyro_L3GD20_ReadData+0xd0>)
 80010ce:	795b      	ldrb	r3, [r3, #5]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff faf8 	bl	80006d0 <__aeabi_i2d>
 80010e0:	a309      	add	r3, pc, #36	@ (adr r3, 8001108 <Gyro_L3GD20_ReadData+0xc8>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff f877 	bl	80001d8 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fb57 	bl	80007a4 <__aeabi_d2iz>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <Gyro_L3GD20_ReadData+0xd8>)
 80010fc:	809a      	strh	r2, [r3, #4]
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	66666666 	.word	0x66666666
 800110c:	3fe66666 	.word	0x3fe66666
 8001110:	2000009c 	.word	0x2000009c
 8001114:	20000040 	.word	0x20000040
 8001118:	200000a8 	.word	0x200000a8

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <Error_Handler+0x8>

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_MspInit+0x4c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <HAL_SPI_MspInit+0x84>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12b      	bne.n	80011f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011d2:	23e0      	movs	r3, #224	@ 0xe0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011e2:	2305      	movs	r3, #5
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <HAL_SPI_MspInit+0x8c>)
 80011ee:	f000 f9f3 	bl	80015d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	@ 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40013000 	.word	0x40013000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <NMI_Handler+0x4>

08001210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <MemManage_Handler+0x4>

08001220 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125e:	f000 f891 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f001 fd83 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff fd5b 	bl	8000d78 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012d0:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 80012d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d8:	200000b4 	.word	0x200000b4

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f931 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	200f      	movs	r0, #15
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff ff08 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f93b 	bl	80015be <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f911 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	@ (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	200000b0 	.word	0x200000b0

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200000b0 	.word	0x200000b0

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	@ (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff5c 	bl	8001454 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffb0 	bl	800152c <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e159      	b.n	80018a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 8148 	bne.w	80018a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d005      	beq.n	800162a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	2b02      	cmp	r3, #2
 8001628:	d130      	bne.n	800168c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a2 	beq.w	80018a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b57      	ldr	r3, [pc, #348]	@ (80018c0 <HAL_GPIO_Init+0x2e8>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a56      	ldr	r2, [pc, #344]	@ (80018c0 <HAL_GPIO_Init+0x2e8>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b54      	ldr	r3, [pc, #336]	@ (80018c0 <HAL_GPIO_Init+0x2e8>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a52      	ldr	r2, [pc, #328]	@ (80018c4 <HAL_GPIO_Init+0x2ec>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a49      	ldr	r2, [pc, #292]	@ (80018c8 <HAL_GPIO_Init+0x2f0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_GPIO_Init+0x202>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a48      	ldr	r2, [pc, #288]	@ (80018cc <HAL_GPIO_Init+0x2f4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0x1fe>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a47      	ldr	r2, [pc, #284]	@ (80018d0 <HAL_GPIO_Init+0x2f8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_GPIO_Init+0x1fa>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a46      	ldr	r2, [pc, #280]	@ (80018d4 <HAL_GPIO_Init+0x2fc>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x1f6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a45      	ldr	r2, [pc, #276]	@ (80018d8 <HAL_GPIO_Init+0x300>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_GPIO_Init+0x1f2>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x204>
 80017ca:	2307      	movs	r3, #7
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x204>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x204>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x204>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x204>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	@ (80018c4 <HAL_GPIO_Init+0x2ec>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <HAL_GPIO_Init+0x304>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <HAL_GPIO_Init+0x304>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_GPIO_Init+0x304>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a24      	ldr	r2, [pc, #144]	@ (80018dc <HAL_GPIO_Init+0x304>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_GPIO_Init+0x304>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <HAL_GPIO_Init+0x304>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <HAL_GPIO_Init+0x304>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <HAL_GPIO_Init+0x304>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f aea2 	bls.w	80015f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	@ 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43d9      	mvns	r1, r3
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	400b      	ands	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e267      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d075      	beq.n	8001a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001966:	4b88      	ldr	r3, [pc, #544]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b04      	cmp	r3, #4
 8001970:	d00c      	beq.n	800198c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001972:	4b85      	ldr	r3, [pc, #532]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800197a:	2b08      	cmp	r3, #8
 800197c:	d112      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197e:	4b82      	ldr	r3, [pc, #520]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800198a:	d10b      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d05b      	beq.n	8001a50 <HAL_RCC_OscConfig+0x108>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d157      	bne.n	8001a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e242      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x74>
 80019ae:	4b76      	ldr	r3, [pc, #472]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a75      	ldr	r2, [pc, #468]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e01d      	b.n	80019f8 <HAL_RCC_OscConfig+0xb0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x98>
 80019c6:	4b70      	ldr	r3, [pc, #448]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0xb0>
 80019e0:	4b69      	ldr	r3, [pc, #420]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a68      	ldr	r2, [pc, #416]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b66      	ldr	r3, [pc, #408]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a65      	ldr	r2, [pc, #404]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff fcd4 	bl	80013ac <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fcd0 	bl	80013ac <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e207      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0xc0>
 8001a26:	e014      	b.n	8001a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fcc0 	bl	80013ac <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fcbc 	bl	80013ac <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e1f3      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0xe8>
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d063      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6a:	4b47      	ldr	r3, [pc, #284]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d11c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a76:	4b44      	ldr	r3, [pc, #272]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	4b41      	ldr	r3, [pc, #260]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x152>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e1c7      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4937      	ldr	r1, [pc, #220]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	e03a      	b.n	8001b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d020      	beq.n	8001afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab8:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <HAL_RCC_OscConfig+0x244>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff fc75 	bl	80013ac <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fc71 	bl	80013ac <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1a8      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4925      	ldr	r1, [pc, #148]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
 8001af8:	e015      	b.n	8001b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <HAL_RCC_OscConfig+0x244>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fc54 	bl	80013ac <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b08:	f7ff fc50 	bl	80013ac <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e187      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d036      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d016      	beq.n	8001b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_RCC_OscConfig+0x248>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fc34 	bl	80013ac <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fc30 	bl	80013ac <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e167      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x200>
 8001b66:	e01b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_RCC_OscConfig+0x248>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fc1d 	bl	80013ac <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b74:	e00e      	b.n	8001b94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff fc19 	bl	80013ac <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d907      	bls.n	8001b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e150      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	42470000 	.word	0x42470000
 8001b90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b88      	ldr	r3, [pc, #544]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ea      	bne.n	8001b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8097 	beq.w	8001cdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b81      	ldr	r3, [pc, #516]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b7a      	ldr	r3, [pc, #488]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b77      	ldr	r3, [pc, #476]	@ (8001dbc <HAL_RCC_OscConfig+0x474>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bea:	4b74      	ldr	r3, [pc, #464]	@ (8001dbc <HAL_RCC_OscConfig+0x474>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a73      	ldr	r2, [pc, #460]	@ (8001dbc <HAL_RCC_OscConfig+0x474>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fbd9 	bl	80013ac <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7ff fbd5 	bl	80013ac <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e10c      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	4b6a      	ldr	r3, [pc, #424]	@ (8001dbc <HAL_RCC_OscConfig+0x474>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2ea>
 8001c24:	4b64      	ldr	r3, [pc, #400]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c28:	4a63      	ldr	r2, [pc, #396]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c30:	e01c      	b.n	8001c6c <HAL_RCC_OscConfig+0x324>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x30c>
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c46:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0x324>
 8001c54:	4b58      	ldr	r3, [pc, #352]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c58:	4a57      	ldr	r2, [pc, #348]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c60:	4b55      	ldr	r3, [pc, #340]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c64:	4a54      	ldr	r2, [pc, #336]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c66:	f023 0304 	bic.w	r3, r3, #4
 8001c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d015      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff fb9a 	bl	80013ac <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fb96 	bl	80013ac <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0cb      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ee      	beq.n	8001c7c <HAL_RCC_OscConfig+0x334>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fb84 	bl	80013ac <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fb80 	bl	80013ac <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0b5      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ee      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	4b39      	ldr	r3, [pc, #228]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	4a38      	ldr	r2, [pc, #224]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80a1 	beq.w	8001e28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d05c      	beq.n	8001dac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d141      	bne.n	8001d7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <HAL_RCC_OscConfig+0x478>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fb54 	bl	80013ac <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff fb50 	bl	80013ac <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e087      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	491b      	ldr	r1, [pc, #108]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_RCC_OscConfig+0x478>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fb29 	bl	80013ac <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff fb25 	bl	80013ac <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e05c      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x416>
 8001d7c:	e054      	b.n	8001e28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <HAL_RCC_OscConfig+0x478>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb12 	bl	80013ac <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff fb0e 	bl	80013ac <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e045      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_RCC_OscConfig+0x470>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x444>
 8001daa:	e03d      	b.n	8001e28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e038      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x4ec>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d028      	beq.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d121      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d11a      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001df4:	4013      	ands	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0cc      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d90c      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b65      	ldr	r3, [pc, #404]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b63      	ldr	r3, [pc, #396]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b8      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	4b59      	ldr	r3, [pc, #356]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a58      	ldr	r2, [pc, #352]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b50      	ldr	r3, [pc, #320]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	494d      	ldr	r1, [pc, #308]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d044      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d119      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e07f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e067      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4934      	ldr	r1, [pc, #208]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f28:	f7ff fa40 	bl	80013ac <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff fa3c 	bl	80013ac <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e04f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d20c      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e032      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4916      	ldr	r1, [pc, #88]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fbe:	f000 f821 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	490a      	ldr	r1, [pc, #40]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	5ccb      	ldrb	r3, [r1, r3]
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff f9a0 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023c00 	.word	0x40023c00
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	08002e24 	.word	0x08002e24
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002008:	b094      	sub	sp, #80	@ 0x50
 800200a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800201c:	4b79      	ldr	r3, [pc, #484]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x200>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d00d      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x40>
 8002028:	2b08      	cmp	r3, #8
 800202a:	f200 80e1 	bhi.w	80021f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x34>
 8002032:	2b04      	cmp	r3, #4
 8002034:	d003      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0x3a>
 8002036:	e0db      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4b73      	ldr	r3, [pc, #460]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x204>)
 800203a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800203c:	e0db      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800203e:	4b73      	ldr	r3, [pc, #460]	@ (800220c <HAL_RCC_GetSysClockFreq+0x208>)
 8002040:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002042:	e0d8      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002044:	4b6f      	ldr	r3, [pc, #444]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x200>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800204c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204e:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x200>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205a:	4b6a      	ldr	r3, [pc, #424]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x200>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	2200      	movs	r2, #0
 8002062:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002064:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206c:	633b      	str	r3, [r7, #48]	@ 0x30
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	@ 0x34
 8002072:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002076:	4622      	mov	r2, r4
 8002078:	462b      	mov	r3, r5
 800207a:	f04f 0000 	mov.w	r0, #0
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	0159      	lsls	r1, r3, #5
 8002084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002088:	0150      	lsls	r0, r2, #5
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4621      	mov	r1, r4
 8002090:	1a51      	subs	r1, r2, r1
 8002092:	6139      	str	r1, [r7, #16]
 8002094:	4629      	mov	r1, r5
 8002096:	eb63 0301 	sbc.w	r3, r3, r1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020a8:	4659      	mov	r1, fp
 80020aa:	018b      	lsls	r3, r1, #6
 80020ac:	4651      	mov	r1, sl
 80020ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020b2:	4651      	mov	r1, sl
 80020b4:	018a      	lsls	r2, r1, #6
 80020b6:	4651      	mov	r1, sl
 80020b8:	ebb2 0801 	subs.w	r8, r2, r1
 80020bc:	4659      	mov	r1, fp
 80020be:	eb63 0901 	sbc.w	r9, r3, r1
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020d6:	4690      	mov	r8, r2
 80020d8:	4699      	mov	r9, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	eb18 0303 	adds.w	r3, r8, r3
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	462b      	mov	r3, r5
 80020e4:	eb49 0303 	adc.w	r3, r9, r3
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020f6:	4629      	mov	r1, r5
 80020f8:	024b      	lsls	r3, r1, #9
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002100:	4621      	mov	r1, r4
 8002102:	024a      	lsls	r2, r1, #9
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800210e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002110:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002114:	f7fe fb6e 	bl	80007f4 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002120:	e058      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x200>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	2200      	movs	r2, #0
 800212a:	4618      	mov	r0, r3
 800212c:	4611      	mov	r1, r2
 800212e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
 8002138:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800213c:	4642      	mov	r2, r8
 800213e:	464b      	mov	r3, r9
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	0159      	lsls	r1, r3, #5
 800214a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214e:	0150      	lsls	r0, r2, #5
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4641      	mov	r1, r8
 8002156:	ebb2 0a01 	subs.w	sl, r2, r1
 800215a:	4649      	mov	r1, r9
 800215c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800216c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002170:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002174:	ebb2 040a 	subs.w	r4, r2, sl
 8002178:	eb63 050b 	sbc.w	r5, r3, fp
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	00eb      	lsls	r3, r5, #3
 8002186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218a:	00e2      	lsls	r2, r4, #3
 800218c:	4614      	mov	r4, r2
 800218e:	461d      	mov	r5, r3
 8002190:	4643      	mov	r3, r8
 8002192:	18e3      	adds	r3, r4, r3
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	464b      	mov	r3, r9
 8002198:	eb45 0303 	adc.w	r3, r5, r3
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021aa:	4629      	mov	r1, r5
 80021ac:	028b      	lsls	r3, r1, #10
 80021ae:	4621      	mov	r1, r4
 80021b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b4:	4621      	mov	r1, r4
 80021b6:	028a      	lsls	r2, r1, #10
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021be:	2200      	movs	r2, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	61fa      	str	r2, [r7, #28]
 80021c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021c8:	f7fe fb14 	bl	80007f4 <__aeabi_uldivmod>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4613      	mov	r3, r2
 80021d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	3301      	adds	r3, #1
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x204>)
 80021f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3750      	adds	r7, #80	@ 0x50
 80021fc:	46bd      	mov	sp, r7
 80021fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200

08002210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07b      	b.n	800231a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002232:	d009      	beq.n	8002248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
 800223a:	e005      	b.n	8002248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe ff88 	bl	8001178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800227e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022cc:	ea42 0103 	orr.w	r1, r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	f003 0104 	and.w	r1, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	f003 0210 	and.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b088      	sub	sp, #32
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002332:	f7ff f83b 	bl	80013ac <HAL_GetTick>
 8002336:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d001      	beq.n	800234c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
 800234a:	e12a      	b.n	80025a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_SPI_Transmit+0x36>
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e122      	b.n	80025a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_SPI_Transmit+0x48>
 8002366:	2302      	movs	r3, #2
 8002368:	e11b      	b.n	80025a2 <HAL_SPI_Transmit+0x280>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023b8:	d10f      	bne.n	80023da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d007      	beq.n	80023f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002400:	d152      	bne.n	80024a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_SPI_Transmit+0xee>
 800240a:	8b7b      	ldrh	r3, [r7, #26]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d145      	bne.n	800249c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002434:	e032      	b.n	800249c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d112      	bne.n	800246a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	1c9a      	adds	r2, r3, #2
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002468:	e018      	b.n	800249c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800246a:	f7fe ff9f 	bl	80013ac <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d803      	bhi.n	8002482 <HAL_SPI_Transmit+0x160>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d102      	bne.n	8002488 <HAL_SPI_Transmit+0x166>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e082      	b.n	80025a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1c7      	bne.n	8002436 <HAL_SPI_Transmit+0x114>
 80024a6:	e053      	b.n	8002550 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_SPI_Transmit+0x194>
 80024b0:	8b7b      	ldrh	r3, [r7, #26]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d147      	bne.n	8002546 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024dc:	e033      	b.n	8002546 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d113      	bne.n	8002514 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002512:	e018      	b.n	8002546 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002514:	f7fe ff4a 	bl	80013ac <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d803      	bhi.n	800252c <HAL_SPI_Transmit+0x20a>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d102      	bne.n	8002532 <HAL_SPI_Transmit+0x210>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e02d      	b.n	80025a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1c6      	bne.n	80024de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fbd9 	bl	8002d0c <SPI_EndRxTxTransaction>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b088      	sub	sp, #32
 80025ae:	af02      	add	r7, sp, #8
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d001      	beq.n	80025ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	e104      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025d2:	d112      	bne.n	80025fa <HAL_SPI_Receive+0x50>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10e      	bne.n	80025fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2204      	movs	r2, #4
 80025e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f8f3 	bl	80027dc <HAL_SPI_TransmitReceive>
 80025f6:	4603      	mov	r3, r0
 80025f8:	e0ec      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025fa:	f7fe fed7 	bl	80013ac <HAL_GetTick>
 80025fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_SPI_Receive+0x62>
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0e1      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_SPI_Receive+0x74>
 800261a:	2302      	movs	r3, #2
 800261c:	e0da      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2204      	movs	r2, #4
 800262a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	88fa      	ldrh	r2, [r7, #6]
 800263e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266c:	d10f      	bne.n	800268e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800267c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b40      	cmp	r3, #64	@ 0x40
 800269a:	d007      	beq.n	80026ac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d170      	bne.n	8002796 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026b4:	e035      	b.n	8002722 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d115      	bne.n	80026f0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f103 020c 	add.w	r2, r3, #12
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026ee:	e018      	b.n	8002722 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f0:	f7fe fe5c 	bl	80013ac <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d803      	bhi.n	8002708 <HAL_SPI_Receive+0x15e>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d102      	bne.n	800270e <HAL_SPI_Receive+0x164>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e058      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1c4      	bne.n	80026b6 <HAL_SPI_Receive+0x10c>
 800272c:	e038      	b.n	80027a0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d113      	bne.n	8002764 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	b292      	uxth	r2, r2
 8002748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	1c9a      	adds	r2, r3, #2
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002762:	e018      	b.n	8002796 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002764:	f7fe fe22 	bl	80013ac <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d803      	bhi.n	800277c <HAL_SPI_Receive+0x1d2>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d102      	bne.n	8002782 <HAL_SPI_Receive+0x1d8>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e01e      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1c6      	bne.n	800272e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa4b 	bl	8002c40 <SPI_EndRxTransaction>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
  }
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027ea:	2301      	movs	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ee:	f7fe fddd 	bl	80013ac <HAL_GetTick>
 80027f2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027fa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002806:	7ffb      	ldrb	r3, [r7, #31]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d00c      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x4a>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002812:	d106      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x46>
 800281c:	7ffb      	ldrb	r3, [r7, #31]
 800281e:	2b04      	cmp	r3, #4
 8002820:	d001      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	e17f      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x5c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x5c>
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e174      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_SPI_TransmitReceive+0x6e>
 8002846:	2302      	movs	r3, #2
 8002848:	e16d      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b04      	cmp	r3, #4
 800285c:	d003      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2205      	movs	r2, #5
 8002862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	887a      	ldrh	r2, [r7, #2]
 8002876:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	887a      	ldrh	r2, [r7, #2]
 800288e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d007      	beq.n	80028ba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028c2:	d17e      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0xf6>
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d16c      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	1c9a      	adds	r2, r3, #2
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f6:	e059      	b.n	80029ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d11b      	bne.n	800293e <HAL_SPI_TransmitReceive+0x162>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d016      	beq.n	800293e <HAL_SPI_TransmitReceive+0x162>
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	2b01      	cmp	r3, #1
 8002914:	d113      	bne.n	800293e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	1c9a      	adds	r2, r3, #2
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d119      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x1a4>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	b292      	uxth	r2, r2
 8002962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002968:	1c9a      	adds	r2, r3, #2
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800297c:	2301      	movs	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002980:	f7fe fd14 	bl	80013ac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298c:	429a      	cmp	r2, r3
 800298e:	d80d      	bhi.n	80029ac <HAL_SPI_TransmitReceive+0x1d0>
 8002990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d009      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0bc      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1a0      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x11c>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d19b      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x11c>
 80029c0:	e082      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x1f4>
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d171      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f6:	e05d      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d11c      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x264>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_SPI_TransmitReceive+0x264>
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d114      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d119      	bne.n	8002a82 <HAL_SPI_TransmitReceive+0x2a6>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a82:	f7fe fc93 	bl	80013ac <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d803      	bhi.n	8002a9a <HAL_SPI_TransmitReceive+0x2be>
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d102      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x2c4>
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e038      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d19c      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x21c>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d197      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f91d 	bl	8002d0c <SPI_EndRxTxTransaction>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e01d      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3728      	adds	r7, #40	@ 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b40:	f7fe fc34 	bl	80013ac <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b50:	f7fe fc2c 	bl	80013ac <HAL_GetTick>
 8002b54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b56:	4b39      	ldr	r3, [pc, #228]	@ (8002c3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	015b      	lsls	r3, r3, #5
 8002b5c:	0d1b      	lsrs	r3, r3, #20
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b66:	e054      	b.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d050      	beq.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b70:	f7fe fc1c 	bl	80013ac <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d902      	bls.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13d      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b9e:	d111      	bne.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ba8:	d004      	beq.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb2:	d107      	bne.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bcc:	d10f      	bne.n	8002bee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e017      	b.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d19b      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000

08002c40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c54:	d111      	bne.n	8002c7a <SPI_EndRxTransaction+0x3a>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c5e:	d004      	beq.n	8002c6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c68:	d107      	bne.n	8002c7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c82:	d12a      	bne.n	8002cda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8c:	d012      	beq.n	8002cb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff ff49 	bl	8002b30 <SPI_WaitFlagStateUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02d      	beq.n	8002d00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e026      	b.n	8002d02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff ff36 	bl	8002b30 <SPI_WaitFlagStateUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01a      	beq.n	8002d00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e013      	b.n	8002d02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff ff23 	bl	8002b30 <SPI_WaitFlagStateUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2102      	movs	r1, #2
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff ff04 	bl	8002b30 <SPI_WaitFlagStateUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e032      	b.n	8002da4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <SPI_EndRxTxTransaction+0xa0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1b      	ldr	r2, [pc, #108]	@ (8002db0 <SPI_EndRxTxTransaction+0xa4>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0d5b      	lsrs	r3, r3, #21
 8002d4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d5c:	d112      	bne.n	8002d84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff fee1 	bl	8002b30 <SPI_WaitFlagStateUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00f      	b.n	8002da4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9a:	2b80      	cmp	r3, #128	@ 0x80
 8002d9c:	d0f2      	beq.n	8002d84 <SPI_EndRxTxTransaction+0x78>
 8002d9e:	e000      	b.n	8002da2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002da0:	bf00      	nop
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000
 8002db0:	165e9f81 	.word	0x165e9f81

08002db4 <memset>:
 8002db4:	4402      	add	r2, r0
 8002db6:	4603      	mov	r3, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002dfc <__libc_init_array+0x38>)
 8002dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e00 <__libc_init_array+0x3c>)
 8002dca:	1b64      	subs	r4, r4, r5
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	2600      	movs	r6, #0
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e04 <__libc_init_array+0x40>)
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e08 <__libc_init_array+0x44>)
 8002dd8:	f000 f818 	bl	8002e0c <_init>
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	2600      	movs	r6, #0
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08002e3c 	.word	0x08002e3c
 8002e00:	08002e3c 	.word	0x08002e3c
 8002e04:	08002e3c 	.word	0x08002e3c
 8002e08:	08002e40 	.word	0x08002e40

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
