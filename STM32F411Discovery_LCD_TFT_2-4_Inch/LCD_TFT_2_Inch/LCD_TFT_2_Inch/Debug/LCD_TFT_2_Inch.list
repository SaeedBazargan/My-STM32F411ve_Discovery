
LCD_TFT_2_Inch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  08005f8c  08005f8c  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee8  08006ee8  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee8  08006ee8  00007ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef0  08006ef0  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ef4  08006ef4  00007ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006ef8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  08006f10  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08006f10  000080a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b75a  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d8  00000000  00000000  000137a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00015180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001576f  00000000  00000000  00015d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000cf9c  00000000  00000000  0002b4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008c65c  00000000  00000000  00038493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c4aef  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000949  00000000  00000000  000c4b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032f4  00000000  00000000  000c547c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  000c8770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005f74 	.word	0x08005f74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08005f74 	.word	0x08005f74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f004 fae1 	bl	8004a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f84b 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f901 	bl	80006dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80004da:	f000 f8af 	bl	800063c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);		// for Delay
 80004de:	481f      	ldr	r0, [pc, #124]	@ (800055c <main+0x94>)
 80004e0:	f005 fa66 	bl	80059b0 <HAL_TIM_Base_Start>

  ID = readID();
 80004e4:	f001 fcc4 	bl	8001e70 <readID>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <main+0x98>)
 80004ee:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	@ 0x64
 80004f2:	f004 fb41 	bl	8004b78 <HAL_Delay>

  tft_init(ID);
 80004f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <main+0x98>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 f8fa 	bl	80016f4 <tft_init>

  setRotation(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f002 fb6f 	bl	8002be4 <setRotation>

  fillScreen(BLACK);
 8000506:	2000      	movs	r0, #0
 8000508:	f003 f904 	bl	8003714 <fillScreen>

  testFillScreen();
 800050c:	f003 fea8 	bl	8004260 <testFillScreen>
  testLines(CYAN);
 8000510:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8000514:	f003 feb9 	bl	800428a <testLines>
  testFastLines(RED, BLUE);
 8000518:	211f      	movs	r1, #31
 800051a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800051e:	f003 ffb2 	bl	8004486 <testFastLines>
  testFilledCircles(10, MAGENTA);
 8000522:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8000526:	200a      	movs	r0, #10
 8000528:	f003 ffe9 	bl	80044fe <testFilledCircles>
  testCircles(10, WHITE);
 800052c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000530:	200a      	movs	r0, #10
 8000532:	f004 f81e 	bl	8004572 <testCircles>

  fillScreen(BLACK);
 8000536:	2000      	movs	r0, #0
 8000538:	f003 f8ec 	bl	8003714 <fillScreen>

  setRotation(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f002 fb51 	bl	8002be4 <setRotation>

  printnewtstr(100, BLUE, &mono12x7bold, 2, "Maryam ;)");
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <main+0x9c>)
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2302      	movs	r3, #2
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <main+0xa0>)
 800054a:	211f      	movs	r1, #31
 800054c:	2064      	movs	r0, #100	@ 0x64
 800054e:	f004 f9df 	bl	8004910 <printnewtstr>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  scrollup(100);
 8000552:	2064      	movs	r0, #100	@ 0x64
 8000554:	f004 fa36 	bl	80049c4 <scrollup>
 8000558:	e7fb      	b.n	8000552 <main+0x8a>
 800055a:	bf00      	nop
 800055c:	20000038 	.word	0x20000038
 8000560:	20000080 	.word	0x20000080
 8000564:	08005f8c 	.word	0x08005f8c
 8000568:	08006958 	.word	0x08006958

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fcce 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a26      	ldr	r2, [pc, #152]	@ (8000634 <SystemClock_Config+0xc8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <SystemClock_Config+0xcc>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005dc:	230c      	movs	r3, #12
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e0:	2360      	movs	r3, #96	@ 0x60
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fd69 	bl	80050c8 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f8e2 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2103      	movs	r1, #3
 800061c:	4618      	mov	r0, r3
 800061e:	f004 ffcb 	bl	80055b8 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000628:	f000 f8cc 	bl	80007c4 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	@ 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_TIM1_Init+0x98>)
 800065a:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <MX_TIM1_Init+0x9c>)
 800065c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <MX_TIM1_Init+0x98>)
 8000660:	2247      	movs	r2, #71	@ 0x47
 8000662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_TIM1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_TIM1_Init+0x98>)
 800066c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_TIM1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_TIM1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_TIM1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000684:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <MX_TIM1_Init+0x98>)
 8000686:	f005 f943 	bl	8005910 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000690:	f000 f898 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <MX_TIM1_Init+0x98>)
 80006a2:	f005 f9df 	bl	8005a64 <HAL_TIM_ConfigClockSource>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006ac:	f000 f88a 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_TIM1_Init+0x98>)
 80006be:	f005 fbbf 	bl	8005e40 <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006c8:	f000 f87c 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000038 	.word	0x20000038
 80006d8:	40010000 	.word	0x40010000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b30      	ldr	r3, [pc, #192]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a2f      	ldr	r2, [pc, #188]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b2d      	ldr	r3, [pc, #180]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a28      	ldr	r2, [pc, #160]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a21      	ldr	r2, [pc, #132]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_GPIO_Init+0xdc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000746:	2200      	movs	r2, #0
 8000748:	f248 012f 	movw	r1, #32815	@ 0x802f
 800074c:	481b      	ldr	r0, [pc, #108]	@ (80007bc <MX_GPIO_Init+0xe0>)
 800074e:	f004 fca1 	bl	8005094 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000752:	2200      	movs	r2, #0
 8000754:	217b      	movs	r1, #123	@ 0x7b
 8000756:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <MX_GPIO_Init+0xe4>)
 8000758:	f004 fc9c 	bl	8005094 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800075c:	f248 032f 	movw	r3, #32815	@ 0x802f
 8000760:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4811      	ldr	r0, [pc, #68]	@ (80007bc <MX_GPIO_Init+0xe0>)
 8000776:	f004 fb09 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800077a:	2310      	movs	r3, #16
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	@ (80007bc <MX_GPIO_Init+0xe0>)
 800078e:	f004 fafd 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000792:	237b      	movs	r3, #123	@ 0x7b
 8000794:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0xe4>)
 80007aa:	f004 faef 	bl	8004d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40020400 	.word	0x40020400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <HAL_TIM_Base_MspInit+0x3c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10d      	bne.n	800084e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_TIM_Base_MspInit+0x40>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <HAL_TIM_Base_MspInit+0x40>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <HAL_TIM_Base_MspInit+0x40>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40010000 	.word	0x40010000
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ba:	f004 f93d 	bl	8004b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <delay+0x2c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80008f8:	bf00      	nop
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <delay+0x2c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	d8f9      	bhi.n	80008fa <delay+0x12>
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000038 	.word	0x20000038

08000918 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f004 fbb2 	bl	8005094 <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	2201      	movs	r2, #1
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f004 fba2 	bl	8005094 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f004 fa08 	bl	8004d8c <HAL_GPIO_Init>
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099c:	2302      	movs	r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f004 f9f0 	bl	8004d8c <HAL_GPIO_Init>
}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <width+0x14>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000004 	.word	0x20000004

080009cc <height>:

uint16_t height(void)
{ return _height; }
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <height+0x14>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000006 	.word	0x20000006

080009e4 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 80009ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	b29b      	uxth	r3, r3
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	115b      	asrs	r3, r3, #5
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	105b      	asrs	r3, r3, #1
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	f003 031f 	and.w	r3, r3, #31
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	b29b      	uxth	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	121b      	asrs	r3, r3, #8
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f023 0307 	bic.w	r3, r3, #7
 8000a7a:	b2db      	uxtb	r3, r3
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	10db      	asrs	r3, r3, #3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f023 0303 	bic.w	r3, r3, #3
 8000a9c:	b2db      	uxtb	r3, r3
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	b2db      	uxtb	r3, r3
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	71bb      	strb	r3, [r7, #6]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	717b      	strb	r3, [r7, #5]
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000ae2:	f023 0307 	bic.w	r3, r3, #7
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	4603      	mov	r3, r0
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	80bb      	strh	r3, [r7, #4]
 8000b22:	f107 020e 	add.w	r2, r7, #14
 8000b26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2301      	movs	r3, #1
 8000b34:	f001 fadc 	bl	80020f0 <readGRAM>
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	80bb      	strh	r3, [r7, #4]
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f90d 	bl	8000d78 <writecmddata>
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	4613      	mov	r3, r2
 8000b74:	717b      	strb	r3, [r7, #5]
 8000b76:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f9d4 	bl	8000f2c <WriteCmdParamN>
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000b90:	2101      	movs	r1, #1
 8000b92:	4811      	ldr	r0, [pc, #68]	@ (8000bd8 <setReadDir+0x4c>)
 8000b94:	f7ff fee0 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	480f      	ldr	r0, [pc, #60]	@ (8000bd8 <setReadDir+0x4c>)
 8000b9c:	f7ff fedc 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000ba0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <setReadDir+0x50>)
 8000ba6:	f7ff fed7 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000baa:	2108      	movs	r1, #8
 8000bac:	480a      	ldr	r0, [pc, #40]	@ (8000bd8 <setReadDir+0x4c>)
 8000bae:	f7ff fed3 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4808      	ldr	r0, [pc, #32]	@ (8000bd8 <setReadDir+0x4c>)
 8000bb6:	f7ff fecf 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <setReadDir+0x4c>)
 8000bbe:	f7ff fecb 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000bc2:	2140      	movs	r1, #64	@ 0x40
 8000bc4:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <setReadDir+0x4c>)
 8000bc6:	f7ff fec7 	bl	8000958 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <setReadDir+0x50>)
 8000bce:	f7ff fec3 	bl	8000958 <PIN_INPUT>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40020000 	.word	0x40020000

08000be0 <setWriteDir>:

void setWriteDir (void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000be4:	2101      	movs	r1, #1
 8000be6:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <setWriteDir+0x4c>)
 8000be8:	f7ff fecc 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000bec:	2102      	movs	r1, #2
 8000bee:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <setWriteDir+0x4c>)
 8000bf0:	f7ff fec8 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000bf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bf8:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <setWriteDir+0x50>)
 8000bfa:	f7ff fec3 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000bfe:	2108      	movs	r1, #8
 8000c00:	480a      	ldr	r0, [pc, #40]	@ (8000c2c <setWriteDir+0x4c>)
 8000c02:	f7ff febf 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000c06:	2110      	movs	r1, #16
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <setWriteDir+0x4c>)
 8000c0a:	f7ff febb 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000c0e:	2120      	movs	r1, #32
 8000c10:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <setWriteDir+0x4c>)
 8000c12:	f7ff feb7 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <setWriteDir+0x4c>)
 8000c1a:	f7ff feb3 	bl	8000984 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000c1e:	2120      	movs	r1, #32
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <setWriteDir+0x50>)
 8000c22:	f7ff feaf 	bl	8000984 <PIN_OUTPUT>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020000 	.word	0x40020000

08000c34 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff10 	bl	8000a66 <color565_to_r>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff1b 	bl	8000a88 <color565_to_g>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff26 	bl	8000aaa <color565_to_b>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000c62:	4b42      	ldr	r3, [pc, #264]	@ (8000d6c <write24+0x138>)
 8000c64:	4a42      	ldr	r2, [pc, #264]	@ (8000d70 <write24+0x13c>)
 8000c66:	619a      	str	r2, [r3, #24]
 8000c68:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <write24+0x140>)
 8000c6a:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	035b      	lsls	r3, r3, #13
 8000c74:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	109b      	asrs	r3, r3, #2
 8000c7c:	f003 0320 	and.w	r3, r3, #32
 8000c80:	431a      	orrs	r2, r3
 8000c82:	4b3a      	ldr	r3, [pc, #232]	@ (8000d6c <write24+0x138>)
 8000c84:	619a      	str	r2, [r3, #24]
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	4a3a      	ldr	r2, [pc, #232]	@ (8000d74 <write24+0x140>)
 8000c8a:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	2108      	movs	r1, #8
 8000c92:	4836      	ldr	r0, [pc, #216]	@ (8000d6c <write24+0x138>)
 8000c94:	f7ff fe40 	bl	8000918 <PIN_LOW>
 8000c98:	2108      	movs	r1, #8
 8000c9a:	4834      	ldr	r0, [pc, #208]	@ (8000d6c <write24+0x138>)
 8000c9c:	f7ff fe3c 	bl	8000918 <PIN_LOW>
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4832      	ldr	r0, [pc, #200]	@ (8000d6c <write24+0x138>)
 8000ca4:	f7ff fe38 	bl	8000918 <PIN_LOW>
 8000ca8:	2108      	movs	r1, #8
 8000caa:	4830      	ldr	r0, [pc, #192]	@ (8000d6c <write24+0x138>)
 8000cac:	f7ff fe44 	bl	8000938 <PIN_HIGH>
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	482e      	ldr	r0, [pc, #184]	@ (8000d6c <write24+0x138>)
 8000cb4:	f7ff fe40 	bl	8000938 <PIN_HIGH>
    write8(g);
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <write24+0x138>)
 8000cba:	4a2d      	ldr	r2, [pc, #180]	@ (8000d70 <write24+0x13c>)
 8000cbc:	619a      	str	r2, [r3, #24]
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <write24+0x140>)
 8000cc0:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000cc4:	619a      	str	r2, [r3, #24]
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	035b      	lsls	r3, r3, #13
 8000cca:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	109b      	asrs	r3, r3, #2
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <write24+0x138>)
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	4a25      	ldr	r2, [pc, #148]	@ (8000d74 <write24+0x140>)
 8000ce0:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4820      	ldr	r0, [pc, #128]	@ (8000d6c <write24+0x138>)
 8000cea:	f7ff fe15 	bl	8000918 <PIN_LOW>
 8000cee:	2108      	movs	r1, #8
 8000cf0:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <write24+0x138>)
 8000cf2:	f7ff fe11 	bl	8000918 <PIN_LOW>
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	481c      	ldr	r0, [pc, #112]	@ (8000d6c <write24+0x138>)
 8000cfa:	f7ff fe0d 	bl	8000918 <PIN_LOW>
 8000cfe:	2108      	movs	r1, #8
 8000d00:	481a      	ldr	r0, [pc, #104]	@ (8000d6c <write24+0x138>)
 8000d02:	f7ff fe19 	bl	8000938 <PIN_HIGH>
 8000d06:	2108      	movs	r1, #8
 8000d08:	4818      	ldr	r0, [pc, #96]	@ (8000d6c <write24+0x138>)
 8000d0a:	f7ff fe15 	bl	8000938 <PIN_HIGH>
    write8(b);
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <write24+0x138>)
 8000d10:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <write24+0x13c>)
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <write24+0x140>)
 8000d16:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	7b7b      	ldrb	r3, [r7, #13]
 8000d1e:	035b      	lsls	r3, r3, #13
 8000d20:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000d24:	7b7b      	ldrb	r3, [r7, #13]
 8000d26:	109b      	asrs	r3, r3, #2
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <write24+0x138>)
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <write24+0x140>)
 8000d36:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <write24+0x138>)
 8000d40:	f7ff fdea 	bl	8000918 <PIN_LOW>
 8000d44:	2108      	movs	r1, #8
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <write24+0x138>)
 8000d48:	f7ff fde6 	bl	8000918 <PIN_LOW>
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <write24+0x138>)
 8000d50:	f7ff fde2 	bl	8000918 <PIN_LOW>
 8000d54:	2108      	movs	r1, #8
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <write24+0x138>)
 8000d58:	f7ff fdee 	bl	8000938 <PIN_HIGH>
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <write24+0x138>)
 8000d60:	f7ff fdea 	bl	8000938 <PIN_HIGH>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	80200000 	.word	0x80200000
 8000d74:	40020400 	.word	0x40020400

08000d78 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	80fb      	strh	r3, [r7, #6]
 8000d84:	4613      	mov	r3, r2
 8000d86:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4865      	ldr	r0, [pc, #404]	@ (8000f20 <writecmddata+0x1a8>)
 8000d8c:	f7ff fdc4 	bl	8000918 <PIN_LOW>
    WriteCmd(cmd);
 8000d90:	2104      	movs	r1, #4
 8000d92:	4863      	ldr	r0, [pc, #396]	@ (8000f20 <writecmddata+0x1a8>)
 8000d94:	f7ff fdc0 	bl	8000918 <PIN_LOW>
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	73bb      	strb	r3, [r7, #14]
 8000da4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f20 <writecmddata+0x1a8>)
 8000da6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f24 <writecmddata+0x1ac>)
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4b5f      	ldr	r3, [pc, #380]	@ (8000f28 <writecmddata+0x1b0>)
 8000dac:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000db0:	619a      	str	r2, [r3, #24]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	035b      	lsls	r3, r3, #13
 8000db6:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	109b      	asrs	r3, r3, #2
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	4b56      	ldr	r3, [pc, #344]	@ (8000f20 <writecmddata+0x1a8>)
 8000dc6:	619a      	str	r2, [r3, #24]
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	4a57      	ldr	r2, [pc, #348]	@ (8000f28 <writecmddata+0x1b0>)
 8000dcc:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	4852      	ldr	r0, [pc, #328]	@ (8000f20 <writecmddata+0x1a8>)
 8000dd6:	f7ff fd9f 	bl	8000918 <PIN_LOW>
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4850      	ldr	r0, [pc, #320]	@ (8000f20 <writecmddata+0x1a8>)
 8000dde:	f7ff fd9b 	bl	8000918 <PIN_LOW>
 8000de2:	2108      	movs	r1, #8
 8000de4:	484e      	ldr	r0, [pc, #312]	@ (8000f20 <writecmddata+0x1a8>)
 8000de6:	f7ff fd97 	bl	8000918 <PIN_LOW>
 8000dea:	2108      	movs	r1, #8
 8000dec:	484c      	ldr	r0, [pc, #304]	@ (8000f20 <writecmddata+0x1a8>)
 8000dee:	f7ff fda3 	bl	8000938 <PIN_HIGH>
 8000df2:	2108      	movs	r1, #8
 8000df4:	484a      	ldr	r0, [pc, #296]	@ (8000f20 <writecmddata+0x1a8>)
 8000df6:	f7ff fd9f 	bl	8000938 <PIN_HIGH>
 8000dfa:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <writecmddata+0x1a8>)
 8000dfc:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <writecmddata+0x1ac>)
 8000dfe:	619a      	str	r2, [r3, #24]
 8000e00:	4b49      	ldr	r3, [pc, #292]	@ (8000f28 <writecmddata+0x1b0>)
 8000e02:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	035b      	lsls	r3, r3, #13
 8000e0c:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	109b      	asrs	r3, r3, #2
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <writecmddata+0x1a8>)
 8000e1c:	619a      	str	r2, [r3, #24]
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	4a41      	ldr	r2, [pc, #260]	@ (8000f28 <writecmddata+0x1b0>)
 8000e22:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	2108      	movs	r1, #8
 8000e2a:	483d      	ldr	r0, [pc, #244]	@ (8000f20 <writecmddata+0x1a8>)
 8000e2c:	f7ff fd74 	bl	8000918 <PIN_LOW>
 8000e30:	2108      	movs	r1, #8
 8000e32:	483b      	ldr	r0, [pc, #236]	@ (8000f20 <writecmddata+0x1a8>)
 8000e34:	f7ff fd70 	bl	8000918 <PIN_LOW>
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <writecmddata+0x1a8>)
 8000e3c:	f7ff fd6c 	bl	8000918 <PIN_LOW>
 8000e40:	2108      	movs	r1, #8
 8000e42:	4837      	ldr	r0, [pc, #220]	@ (8000f20 <writecmddata+0x1a8>)
 8000e44:	f7ff fd78 	bl	8000938 <PIN_HIGH>
 8000e48:	2108      	movs	r1, #8
 8000e4a:	4835      	ldr	r0, [pc, #212]	@ (8000f20 <writecmddata+0x1a8>)
 8000e4c:	f7ff fd74 	bl	8000938 <PIN_HIGH>
 8000e50:	2104      	movs	r1, #4
 8000e52:	4833      	ldr	r0, [pc, #204]	@ (8000f20 <writecmddata+0x1a8>)
 8000e54:	f7ff fd70 	bl	8000938 <PIN_HIGH>
    WriteData(dat);
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	737b      	strb	r3, [r7, #13]
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	733b      	strb	r3, [r7, #12]
 8000e64:	4b2e      	ldr	r3, [pc, #184]	@ (8000f20 <writecmddata+0x1a8>)
 8000e66:	4a2f      	ldr	r2, [pc, #188]	@ (8000f24 <writecmddata+0x1ac>)
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <writecmddata+0x1b0>)
 8000e6c:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000e70:	619a      	str	r2, [r3, #24]
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	035b      	lsls	r3, r3, #13
 8000e76:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	109b      	asrs	r3, r3, #2
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	431a      	orrs	r2, r3
 8000e84:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <writecmddata+0x1a8>)
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	4a27      	ldr	r2, [pc, #156]	@ (8000f28 <writecmddata+0x1b0>)
 8000e8c:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	2108      	movs	r1, #8
 8000e94:	4822      	ldr	r0, [pc, #136]	@ (8000f20 <writecmddata+0x1a8>)
 8000e96:	f7ff fd3f 	bl	8000918 <PIN_LOW>
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	4820      	ldr	r0, [pc, #128]	@ (8000f20 <writecmddata+0x1a8>)
 8000e9e:	f7ff fd3b 	bl	8000918 <PIN_LOW>
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	481e      	ldr	r0, [pc, #120]	@ (8000f20 <writecmddata+0x1a8>)
 8000ea6:	f7ff fd37 	bl	8000918 <PIN_LOW>
 8000eaa:	2108      	movs	r1, #8
 8000eac:	481c      	ldr	r0, [pc, #112]	@ (8000f20 <writecmddata+0x1a8>)
 8000eae:	f7ff fd43 	bl	8000938 <PIN_HIGH>
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	481a      	ldr	r0, [pc, #104]	@ (8000f20 <writecmddata+0x1a8>)
 8000eb6:	f7ff fd3f 	bl	8000938 <PIN_HIGH>
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <writecmddata+0x1a8>)
 8000ebc:	4a19      	ldr	r2, [pc, #100]	@ (8000f24 <writecmddata+0x1ac>)
 8000ebe:	619a      	str	r2, [r3, #24]
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <writecmddata+0x1b0>)
 8000ec2:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000ec6:	619a      	str	r2, [r3, #24]
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	035b      	lsls	r3, r3, #13
 8000ecc:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
 8000ed2:	109b      	asrs	r3, r3, #2
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <writecmddata+0x1a8>)
 8000edc:	619a      	str	r2, [r3, #24]
 8000ede:	7b3b      	ldrb	r3, [r7, #12]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <writecmddata+0x1b0>)
 8000ee2:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	2108      	movs	r1, #8
 8000eea:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <writecmddata+0x1a8>)
 8000eec:	f7ff fd14 	bl	8000918 <PIN_LOW>
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <writecmddata+0x1a8>)
 8000ef4:	f7ff fd10 	bl	8000918 <PIN_LOW>
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <writecmddata+0x1a8>)
 8000efc:	f7ff fd0c 	bl	8000918 <PIN_LOW>
 8000f00:	2108      	movs	r1, #8
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <writecmddata+0x1a8>)
 8000f04:	f7ff fd18 	bl	8000938 <PIN_HIGH>
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <writecmddata+0x1a8>)
 8000f0c:	f7ff fd14 	bl	8000938 <PIN_HIGH>
    CS_IDLE;
 8000f10:	2102      	movs	r1, #2
 8000f12:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <writecmddata+0x1a8>)
 8000f14:	f7ff fd10 	bl	8000938 <PIN_HIGH>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000
 8000f24:	80200000 	.word	0x80200000
 8000f28:	40020400 	.word	0x40020400

08000f2c <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	603a      	str	r2, [r7, #0]
 8000f36:	80fb      	strh	r3, [r7, #6]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	488c      	ldr	r0, [pc, #560]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f40:	f7ff fcea 	bl	8000918 <PIN_LOW>
    WriteCmd(cmd);
 8000f44:	2104      	movs	r1, #4
 8000f46:	488a      	ldr	r0, [pc, #552]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f48:	f7ff fce6 	bl	8000918 <PIN_LOW>
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	4b85      	ldr	r3, [pc, #532]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f5a:	4a86      	ldr	r2, [pc, #536]	@ (8001174 <WriteCmdParamN+0x248>)
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	4b86      	ldr	r3, [pc, #536]	@ (8001178 <WriteCmdParamN+0x24c>)
 8000f60:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	035b      	lsls	r3, r3, #13
 8000f6a:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	109b      	asrs	r3, r3, #2
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	431a      	orrs	r2, r3
 8000f78:	4b7d      	ldr	r3, [pc, #500]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001178 <WriteCmdParamN+0x24c>)
 8000f80:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	2108      	movs	r1, #8
 8000f88:	4879      	ldr	r0, [pc, #484]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f8a:	f7ff fcc5 	bl	8000918 <PIN_LOW>
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4877      	ldr	r0, [pc, #476]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f92:	f7ff fcc1 	bl	8000918 <PIN_LOW>
 8000f96:	2108      	movs	r1, #8
 8000f98:	4875      	ldr	r0, [pc, #468]	@ (8001170 <WriteCmdParamN+0x244>)
 8000f9a:	f7ff fcbd 	bl	8000918 <PIN_LOW>
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4873      	ldr	r0, [pc, #460]	@ (8001170 <WriteCmdParamN+0x244>)
 8000fa2:	f7ff fcc9 	bl	8000938 <PIN_HIGH>
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4871      	ldr	r0, [pc, #452]	@ (8001170 <WriteCmdParamN+0x244>)
 8000faa:	f7ff fcc5 	bl	8000938 <PIN_HIGH>
 8000fae:	4b70      	ldr	r3, [pc, #448]	@ (8001170 <WriteCmdParamN+0x244>)
 8000fb0:	4a70      	ldr	r2, [pc, #448]	@ (8001174 <WriteCmdParamN+0x248>)
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	4b70      	ldr	r3, [pc, #448]	@ (8001178 <WriteCmdParamN+0x24c>)
 8000fb6:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8000fba:	619a      	str	r2, [r3, #24]
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	035b      	lsls	r3, r3, #13
 8000fc0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	109b      	asrs	r3, r3, #2
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	4b68      	ldr	r3, [pc, #416]	@ (8001170 <WriteCmdParamN+0x244>)
 8000fd0:	619a      	str	r2, [r3, #24]
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	4a68      	ldr	r2, [pc, #416]	@ (8001178 <WriteCmdParamN+0x24c>)
 8000fd6:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4864      	ldr	r0, [pc, #400]	@ (8001170 <WriteCmdParamN+0x244>)
 8000fe0:	f7ff fc9a 	bl	8000918 <PIN_LOW>
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4862      	ldr	r0, [pc, #392]	@ (8001170 <WriteCmdParamN+0x244>)
 8000fe8:	f7ff fc96 	bl	8000918 <PIN_LOW>
 8000fec:	2108      	movs	r1, #8
 8000fee:	4860      	ldr	r0, [pc, #384]	@ (8001170 <WriteCmdParamN+0x244>)
 8000ff0:	f7ff fc92 	bl	8000918 <PIN_LOW>
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	485e      	ldr	r0, [pc, #376]	@ (8001170 <WriteCmdParamN+0x244>)
 8000ff8:	f7ff fc9e 	bl	8000938 <PIN_HIGH>
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	485c      	ldr	r0, [pc, #368]	@ (8001170 <WriteCmdParamN+0x244>)
 8001000:	f7ff fc9a 	bl	8000938 <PIN_HIGH>
 8001004:	2104      	movs	r1, #4
 8001006:	485a      	ldr	r0, [pc, #360]	@ (8001170 <WriteCmdParamN+0x244>)
 8001008:	f7ff fc96 	bl	8000938 <PIN_HIGH>
    while (N-- > 0) {
 800100c:	e09e      	b.n	800114c <WriteCmdParamN+0x220>
        uint8_t u8 = *block++;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	603a      	str	r2, [r7, #0]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8001018:	4b55      	ldr	r3, [pc, #340]	@ (8001170 <WriteCmdParamN+0x244>)
 800101a:	4a56      	ldr	r2, [pc, #344]	@ (8001174 <WriteCmdParamN+0x248>)
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	4b56      	ldr	r3, [pc, #344]	@ (8001178 <WriteCmdParamN+0x24c>)
 8001020:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8001024:	619a      	str	r2, [r3, #24]
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	035b      	lsls	r3, r3, #13
 800102a:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800102e:	7b7b      	ldrb	r3, [r7, #13]
 8001030:	109b      	asrs	r3, r3, #2
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	431a      	orrs	r2, r3
 8001038:	4b4d      	ldr	r3, [pc, #308]	@ (8001170 <WriteCmdParamN+0x244>)
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	4a4e      	ldr	r2, [pc, #312]	@ (8001178 <WriteCmdParamN+0x24c>)
 8001040:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	2108      	movs	r1, #8
 8001048:	4849      	ldr	r0, [pc, #292]	@ (8001170 <WriteCmdParamN+0x244>)
 800104a:	f7ff fc65 	bl	8000918 <PIN_LOW>
 800104e:	2108      	movs	r1, #8
 8001050:	4847      	ldr	r0, [pc, #284]	@ (8001170 <WriteCmdParamN+0x244>)
 8001052:	f7ff fc61 	bl	8000918 <PIN_LOW>
 8001056:	2108      	movs	r1, #8
 8001058:	4845      	ldr	r0, [pc, #276]	@ (8001170 <WriteCmdParamN+0x244>)
 800105a:	f7ff fc5d 	bl	8000918 <PIN_LOW>
 800105e:	2108      	movs	r1, #8
 8001060:	4843      	ldr	r0, [pc, #268]	@ (8001170 <WriteCmdParamN+0x244>)
 8001062:	f7ff fc69 	bl	8000938 <PIN_HIGH>
 8001066:	2108      	movs	r1, #8
 8001068:	4841      	ldr	r0, [pc, #260]	@ (8001170 <WriteCmdParamN+0x244>)
 800106a:	f7ff fc65 	bl	8000938 <PIN_HIGH>
        if (N && is8347) {
 800106e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d06a      	beq.n	800114c <WriteCmdParamN+0x220>
 8001076:	4b41      	ldr	r3, [pc, #260]	@ (800117c <WriteCmdParamN+0x250>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d066      	beq.n	800114c <WriteCmdParamN+0x220>
            cmd++;
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	3301      	adds	r3, #1
 8001082:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001084:	2104      	movs	r1, #4
 8001086:	483a      	ldr	r0, [pc, #232]	@ (8001170 <WriteCmdParamN+0x244>)
 8001088:	f7ff fc46 	bl	8000918 <PIN_LOW>
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	733b      	strb	r3, [r7, #12]
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	72fb      	strb	r3, [r7, #11]
 8001098:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <WriteCmdParamN+0x244>)
 800109a:	4a36      	ldr	r2, [pc, #216]	@ (8001174 <WriteCmdParamN+0x248>)
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	4b36      	ldr	r3, [pc, #216]	@ (8001178 <WriteCmdParamN+0x24c>)
 80010a0:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	035b      	lsls	r3, r3, #13
 80010aa:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	109b      	asrs	r3, r3, #2
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	431a      	orrs	r2, r3
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <WriteCmdParamN+0x244>)
 80010ba:	619a      	str	r2, [r3, #24]
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	4a2e      	ldr	r2, [pc, #184]	@ (8001178 <WriteCmdParamN+0x24c>)
 80010c0:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	2108      	movs	r1, #8
 80010c8:	4829      	ldr	r0, [pc, #164]	@ (8001170 <WriteCmdParamN+0x244>)
 80010ca:	f7ff fc25 	bl	8000918 <PIN_LOW>
 80010ce:	2108      	movs	r1, #8
 80010d0:	4827      	ldr	r0, [pc, #156]	@ (8001170 <WriteCmdParamN+0x244>)
 80010d2:	f7ff fc21 	bl	8000918 <PIN_LOW>
 80010d6:	2108      	movs	r1, #8
 80010d8:	4825      	ldr	r0, [pc, #148]	@ (8001170 <WriteCmdParamN+0x244>)
 80010da:	f7ff fc1d 	bl	8000918 <PIN_LOW>
 80010de:	2108      	movs	r1, #8
 80010e0:	4823      	ldr	r0, [pc, #140]	@ (8001170 <WriteCmdParamN+0x244>)
 80010e2:	f7ff fc29 	bl	8000938 <PIN_HIGH>
 80010e6:	2108      	movs	r1, #8
 80010e8:	4821      	ldr	r0, [pc, #132]	@ (8001170 <WriteCmdParamN+0x244>)
 80010ea:	f7ff fc25 	bl	8000938 <PIN_HIGH>
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <WriteCmdParamN+0x244>)
 80010f0:	4a20      	ldr	r2, [pc, #128]	@ (8001174 <WriteCmdParamN+0x248>)
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <WriteCmdParamN+0x24c>)
 80010f6:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80010fa:	619a      	str	r2, [r3, #24]
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	035b      	lsls	r3, r3, #13
 8001100:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	109b      	asrs	r3, r3, #2
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	431a      	orrs	r2, r3
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <WriteCmdParamN+0x244>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <WriteCmdParamN+0x24c>)
 8001116:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	2108      	movs	r1, #8
 800111e:	4814      	ldr	r0, [pc, #80]	@ (8001170 <WriteCmdParamN+0x244>)
 8001120:	f7ff fbfa 	bl	8000918 <PIN_LOW>
 8001124:	2108      	movs	r1, #8
 8001126:	4812      	ldr	r0, [pc, #72]	@ (8001170 <WriteCmdParamN+0x244>)
 8001128:	f7ff fbf6 	bl	8000918 <PIN_LOW>
 800112c:	2108      	movs	r1, #8
 800112e:	4810      	ldr	r0, [pc, #64]	@ (8001170 <WriteCmdParamN+0x244>)
 8001130:	f7ff fbf2 	bl	8000918 <PIN_LOW>
 8001134:	2108      	movs	r1, #8
 8001136:	480e      	ldr	r0, [pc, #56]	@ (8001170 <WriteCmdParamN+0x244>)
 8001138:	f7ff fbfe 	bl	8000938 <PIN_HIGH>
 800113c:	2108      	movs	r1, #8
 800113e:	480c      	ldr	r0, [pc, #48]	@ (8001170 <WriteCmdParamN+0x244>)
 8001140:	f7ff fbfa 	bl	8000938 <PIN_HIGH>
 8001144:	2104      	movs	r1, #4
 8001146:	480a      	ldr	r0, [pc, #40]	@ (8001170 <WriteCmdParamN+0x244>)
 8001148:	f7ff fbf6 	bl	8000938 <PIN_HIGH>
    while (N-- > 0) {
 800114c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	3a01      	subs	r2, #1
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	717a      	strb	r2, [r7, #5]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f73f af58 	bgt.w	800100e <WriteCmdParamN+0xe2>
        }
    }
    CS_IDLE;
 800115e:	2102      	movs	r1, #2
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <WriteCmdParamN+0x244>)
 8001162:	f7ff fbe9 	bl	8000938 <PIN_HIGH>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020000 	.word	0x40020000
 8001174:	80200000 	.word	0x80200000
 8001178:	40020400 	.word	0x40020400
 800117c:	20000083 	.word	0x20000083

08001180 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	4604      	mov	r4, r0
 8001188:	4608      	mov	r0, r1
 800118a:	4611      	mov	r1, r2
 800118c:	461a      	mov	r2, r3
 800118e:	4623      	mov	r3, r4
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	4603      	mov	r3, r0
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	460b      	mov	r3, r1
 8001198:	717b      	strb	r3, [r7, #5]
 800119a:	4613      	mov	r3, r2
 800119c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	733b      	strb	r3, [r7, #12]
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	737b      	strb	r3, [r7, #13]
 80011a6:	793b      	ldrb	r3, [r7, #4]
 80011a8:	73bb      	strb	r3, [r7, #14]
 80011aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011ae:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	2104      	movs	r1, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff feb6 	bl	8000f2c <WriteCmdParamN>
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24

    while (size > 0)
 80011d8:	e046      	b.n	8001268 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	627a      	str	r2, [r7, #36]	@ 0x24
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        uint8_t len = pgm_read_byte(p++);
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (cmd == TFTLCD_DELAY8)
 80011f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f8:	d108      	bne.n	800120c <init_table+0x44>
        {
            delay(len);
 80011fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fb72 	bl	80008e8 <delay>
            len = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800120a:	e024      	b.n	8001256 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001212:	e010      	b.n	8001236 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	627a      	str	r2, [r7, #36]	@ 0x24
 800121a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800121e:	7819      	ldrb	r1, [r3, #0]
 8001220:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8001224:	443b      	add	r3, r7
 8001226:	460a      	mov	r2, r1
 8001228:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 800122c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001236:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800123a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800123e:	429a      	cmp	r2, r3
 8001240:	d3e8      	bcc.n	8001214 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8001242:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001246:	b29b      	uxth	r3, r3
 8001248:	f997 1023 	ldrsb.w	r1, [r7, #35]	@ 0x23
 800124c:	f107 0208 	add.w	r2, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe6b 	bl	8000f2c <WriteCmdParamN>
        }
        size -= len + 2;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800125c:	b29b      	uxth	r3, r3
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b02      	subs	r3, #2
 8001264:	b29b      	uxth	r3, r3
 8001266:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8001268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dcb4      	bgt.n	80011da <init_table+0x12>
    }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800128a:	e01d      	b.n	80012c8 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1c9a      	adds	r2, r3, #2
 8001290:	60fa      	str	r2, [r7, #12]
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1c9a      	adds	r2, r3, #2
 800129a:	60fa      	str	r2, [r7, #12]
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 80012a0:	897b      	ldrh	r3, [r7, #10]
 80012a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d104      	bne.n	80012b4 <init_table16+0x3a>
            delay(d);
 80012aa:	893b      	ldrh	r3, [r7, #8]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fb1b 	bl	80008e8 <delay>
 80012b2:	e005      	b.n	80012c0 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 80012b4:	893a      	ldrh	r2, [r7, #8]
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd5c 	bl	8000d78 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	3b04      	subs	r3, #4
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 80012c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dcdd      	bgt.n	800128c <init_table16+0x12>
    }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <reset>:



void reset(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
    done_reset = 1;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <reset+0x84>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80012e6:	f7ff fc7b 	bl	8000be0 <setWriteDir>
    CTL_INIT();
 80012ea:	2110      	movs	r1, #16
 80012ec:	481d      	ldr	r0, [pc, #116]	@ (8001364 <reset+0x88>)
 80012ee:	f7ff fb49 	bl	8000984 <PIN_OUTPUT>
 80012f2:	2108      	movs	r1, #8
 80012f4:	481b      	ldr	r0, [pc, #108]	@ (8001364 <reset+0x88>)
 80012f6:	f7ff fb45 	bl	8000984 <PIN_OUTPUT>
 80012fa:	2104      	movs	r1, #4
 80012fc:	4819      	ldr	r0, [pc, #100]	@ (8001364 <reset+0x88>)
 80012fe:	f7ff fb41 	bl	8000984 <PIN_OUTPUT>
 8001302:	2102      	movs	r1, #2
 8001304:	4817      	ldr	r0, [pc, #92]	@ (8001364 <reset+0x88>)
 8001306:	f7ff fb3d 	bl	8000984 <PIN_OUTPUT>
 800130a:	2101      	movs	r1, #1
 800130c:	4815      	ldr	r0, [pc, #84]	@ (8001364 <reset+0x88>)
 800130e:	f7ff fb39 	bl	8000984 <PIN_OUTPUT>
    CS_IDLE;
 8001312:	2102      	movs	r1, #2
 8001314:	4813      	ldr	r0, [pc, #76]	@ (8001364 <reset+0x88>)
 8001316:	f7ff fb0f 	bl	8000938 <PIN_HIGH>
    RD_IDLE;
 800131a:	2110      	movs	r1, #16
 800131c:	4811      	ldr	r0, [pc, #68]	@ (8001364 <reset+0x88>)
 800131e:	f7ff fb0b 	bl	8000938 <PIN_HIGH>
    WR_IDLE;
 8001322:	2108      	movs	r1, #8
 8001324:	480f      	ldr	r0, [pc, #60]	@ (8001364 <reset+0x88>)
 8001326:	f7ff fb07 	bl	8000938 <PIN_HIGH>
    RESET_IDLE;
 800132a:	2101      	movs	r1, #1
 800132c:	480d      	ldr	r0, [pc, #52]	@ (8001364 <reset+0x88>)
 800132e:	f7ff fb03 	bl	8000938 <PIN_HIGH>
    delay(50);
 8001332:	2032      	movs	r0, #50	@ 0x32
 8001334:	f7ff fad8 	bl	80008e8 <delay>
    RESET_ACTIVE;
 8001338:	2101      	movs	r1, #1
 800133a:	480a      	ldr	r0, [pc, #40]	@ (8001364 <reset+0x88>)
 800133c:	f7ff faec 	bl	8000918 <PIN_LOW>
    delay(100);
 8001340:	2064      	movs	r0, #100	@ 0x64
 8001342:	f7ff fad1 	bl	80008e8 <delay>
    RESET_IDLE;
 8001346:	2101      	movs	r1, #1
 8001348:	4806      	ldr	r0, [pc, #24]	@ (8001364 <reset+0x88>)
 800134a:	f7ff faf5 	bl	8000938 <PIN_HIGH>
    delay(100);
 800134e:	2064      	movs	r0, #100	@ 0x64
 8001350:	f7ff faca 	bl	80008e8 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001354:	2100      	movs	r1, #0
 8001356:	20b0      	movs	r0, #176	@ 0xb0
 8001358:	f7ff fbf3 	bl	8000b42 <WriteCmdData>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000082 	.word	0x20000082
 8001364:	40020000 	.word	0x40020000

08001368 <read16bits>:

static uint16_t read16bits(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 800136e:	2110      	movs	r1, #16
 8001370:	486e      	ldr	r0, [pc, #440]	@ (800152c <read16bits+0x1c4>)
 8001372:	f7ff fae1 	bl	8000938 <PIN_HIGH>
 8001376:	2110      	movs	r1, #16
 8001378:	486c      	ldr	r0, [pc, #432]	@ (800152c <read16bits+0x1c4>)
 800137a:	f7ff facd 	bl	8000918 <PIN_LOW>
 800137e:	2110      	movs	r1, #16
 8001380:	486a      	ldr	r0, [pc, #424]	@ (800152c <read16bits+0x1c4>)
 8001382:	f7ff fac9 	bl	8000918 <PIN_LOW>
 8001386:	2110      	movs	r1, #16
 8001388:	4868      	ldr	r0, [pc, #416]	@ (800152c <read16bits+0x1c4>)
 800138a:	f7ff fac5 	bl	8000918 <PIN_LOW>
 800138e:	2110      	movs	r1, #16
 8001390:	4866      	ldr	r0, [pc, #408]	@ (800152c <read16bits+0x1c4>)
 8001392:	f7ff fac1 	bl	8000918 <PIN_LOW>
 8001396:	2110      	movs	r1, #16
 8001398:	4864      	ldr	r0, [pc, #400]	@ (800152c <read16bits+0x1c4>)
 800139a:	f7ff fabd 	bl	8000918 <PIN_LOW>
 800139e:	2110      	movs	r1, #16
 80013a0:	4862      	ldr	r0, [pc, #392]	@ (800152c <read16bits+0x1c4>)
 80013a2:	f7ff fab9 	bl	8000918 <PIN_LOW>
 80013a6:	2110      	movs	r1, #16
 80013a8:	4860      	ldr	r0, [pc, #384]	@ (800152c <read16bits+0x1c4>)
 80013aa:	f7ff fab5 	bl	8000918 <PIN_LOW>
 80013ae:	4b60      	ldr	r3, [pc, #384]	@ (8001530 <read16bits+0x1c8>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <read16bits+0x1c8>)
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b58      	ldr	r3, [pc, #352]	@ (800152c <read16bits+0x1c4>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	0b5b      	lsrs	r3, r3, #13
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b54      	ldr	r3, [pc, #336]	@ (8001530 <read16bits+0x1c8>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b50      	ldr	r3, [pc, #320]	@ (8001530 <read16bits+0x1c8>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001530 <read16bits+0x1c8>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	b29b      	uxth	r3, r3
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	b29b      	uxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b48      	ldr	r3, [pc, #288]	@ (8001530 <read16bits+0x1c8>)
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	b29b      	uxth	r3, r3
 8001412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001416:	b29b      	uxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b43      	ldr	r3, [pc, #268]	@ (800152c <read16bits+0x1c4>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	b29b      	uxth	r3, r3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	b29b      	uxth	r3, r3
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	b29b      	uxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	2110      	movs	r1, #16
 8001432:	483e      	ldr	r0, [pc, #248]	@ (800152c <read16bits+0x1c4>)
 8001434:	f7ff fa80 	bl	8000938 <PIN_HIGH>
 8001438:	2110      	movs	r1, #16
 800143a:	483c      	ldr	r0, [pc, #240]	@ (800152c <read16bits+0x1c4>)
 800143c:	f7ff fa7c 	bl	8000938 <PIN_HIGH>
    READ_8(lo);
 8001440:	2110      	movs	r1, #16
 8001442:	483a      	ldr	r0, [pc, #232]	@ (800152c <read16bits+0x1c4>)
 8001444:	f7ff fa78 	bl	8000938 <PIN_HIGH>
 8001448:	2110      	movs	r1, #16
 800144a:	4838      	ldr	r0, [pc, #224]	@ (800152c <read16bits+0x1c4>)
 800144c:	f7ff fa64 	bl	8000918 <PIN_LOW>
 8001450:	2110      	movs	r1, #16
 8001452:	4836      	ldr	r0, [pc, #216]	@ (800152c <read16bits+0x1c4>)
 8001454:	f7ff fa60 	bl	8000918 <PIN_LOW>
 8001458:	2110      	movs	r1, #16
 800145a:	4834      	ldr	r0, [pc, #208]	@ (800152c <read16bits+0x1c4>)
 800145c:	f7ff fa5c 	bl	8000918 <PIN_LOW>
 8001460:	2110      	movs	r1, #16
 8001462:	4832      	ldr	r0, [pc, #200]	@ (800152c <read16bits+0x1c4>)
 8001464:	f7ff fa58 	bl	8000918 <PIN_LOW>
 8001468:	2110      	movs	r1, #16
 800146a:	4830      	ldr	r0, [pc, #192]	@ (800152c <read16bits+0x1c4>)
 800146c:	f7ff fa54 	bl	8000918 <PIN_LOW>
 8001470:	2110      	movs	r1, #16
 8001472:	482e      	ldr	r0, [pc, #184]	@ (800152c <read16bits+0x1c4>)
 8001474:	f7ff fa50 	bl	8000918 <PIN_LOW>
 8001478:	2110      	movs	r1, #16
 800147a:	482c      	ldr	r0, [pc, #176]	@ (800152c <read16bits+0x1c4>)
 800147c:	f7ff fa4c 	bl	8000918 <PIN_LOW>
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <read16bits+0x1c8>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <read16bits+0x1c8>)
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <read16bits+0x1c4>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	0b5b      	lsrs	r3, r3, #13
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <read16bits+0x1c8>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <read16bits+0x1c8>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <read16bits+0x1c8>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <read16bits+0x1c8>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <read16bits+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	717b      	strb	r3, [r7, #5]
 8001502:	2110      	movs	r1, #16
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <read16bits+0x1c4>)
 8001506:	f7ff fa17 	bl	8000938 <PIN_HIGH>
 800150a:	2110      	movs	r1, #16
 800150c:	4807      	ldr	r0, [pc, #28]	@ (800152c <read16bits+0x1c4>)
 800150e:	f7ff fa13 	bl	8000938 <PIN_HIGH>
    return (ret << 8) | lo;
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	797b      	ldrb	r3, [r7, #5]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	b29b      	uxth	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400

08001534 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	80fb      	strh	r3, [r7, #6]
 8001540:	4613      	mov	r3, r2
 8001542:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <readReg+0x12c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <readReg+0x1c>
        reset();
 800154c:	f7ff fec6 	bl	80012dc <reset>
    CS_ACTIVE;
 8001550:	2102      	movs	r1, #2
 8001552:	4844      	ldr	r0, [pc, #272]	@ (8001664 <readReg+0x130>)
 8001554:	f7ff f9e0 	bl	8000918 <PIN_LOW>
    WriteCmd(reg);
 8001558:	2104      	movs	r1, #4
 800155a:	4842      	ldr	r0, [pc, #264]	@ (8001664 <readReg+0x130>)
 800155c:	f7ff f9dc 	bl	8000918 <PIN_LOW>
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	b29b      	uxth	r3, r3
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	73bb      	strb	r3, [r7, #14]
 800156c:	4b3d      	ldr	r3, [pc, #244]	@ (8001664 <readReg+0x130>)
 800156e:	4a3e      	ldr	r2, [pc, #248]	@ (8001668 <readReg+0x134>)
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	4b3e      	ldr	r3, [pc, #248]	@ (800166c <readReg+0x138>)
 8001574:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8001578:	619a      	str	r2, [r3, #24]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	035b      	lsls	r3, r3, #13
 800157e:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	109b      	asrs	r3, r3, #2
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	431a      	orrs	r2, r3
 800158c:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <readReg+0x130>)
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	4a36      	ldr	r2, [pc, #216]	@ (800166c <readReg+0x138>)
 8001594:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	2108      	movs	r1, #8
 800159c:	4831      	ldr	r0, [pc, #196]	@ (8001664 <readReg+0x130>)
 800159e:	f7ff f9bb 	bl	8000918 <PIN_LOW>
 80015a2:	2108      	movs	r1, #8
 80015a4:	482f      	ldr	r0, [pc, #188]	@ (8001664 <readReg+0x130>)
 80015a6:	f7ff f9b7 	bl	8000918 <PIN_LOW>
 80015aa:	2108      	movs	r1, #8
 80015ac:	482d      	ldr	r0, [pc, #180]	@ (8001664 <readReg+0x130>)
 80015ae:	f7ff f9b3 	bl	8000918 <PIN_LOW>
 80015b2:	2108      	movs	r1, #8
 80015b4:	482b      	ldr	r0, [pc, #172]	@ (8001664 <readReg+0x130>)
 80015b6:	f7ff f9bf 	bl	8000938 <PIN_HIGH>
 80015ba:	2108      	movs	r1, #8
 80015bc:	4829      	ldr	r0, [pc, #164]	@ (8001664 <readReg+0x130>)
 80015be:	f7ff f9bb 	bl	8000938 <PIN_HIGH>
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <readReg+0x130>)
 80015c4:	4a28      	ldr	r2, [pc, #160]	@ (8001668 <readReg+0x134>)
 80015c6:	619a      	str	r2, [r3, #24]
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <readReg+0x138>)
 80015ca:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80015ce:	619a      	str	r2, [r3, #24]
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	035b      	lsls	r3, r3, #13
 80015d4:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	109b      	asrs	r3, r3, #2
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	431a      	orrs	r2, r3
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <readReg+0x130>)
 80015e4:	619a      	str	r2, [r3, #24]
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	4a20      	ldr	r2, [pc, #128]	@ (800166c <readReg+0x138>)
 80015ea:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	2108      	movs	r1, #8
 80015f2:	481c      	ldr	r0, [pc, #112]	@ (8001664 <readReg+0x130>)
 80015f4:	f7ff f990 	bl	8000918 <PIN_LOW>
 80015f8:	2108      	movs	r1, #8
 80015fa:	481a      	ldr	r0, [pc, #104]	@ (8001664 <readReg+0x130>)
 80015fc:	f7ff f98c 	bl	8000918 <PIN_LOW>
 8001600:	2108      	movs	r1, #8
 8001602:	4818      	ldr	r0, [pc, #96]	@ (8001664 <readReg+0x130>)
 8001604:	f7ff f988 	bl	8000918 <PIN_LOW>
 8001608:	2108      	movs	r1, #8
 800160a:	4816      	ldr	r0, [pc, #88]	@ (8001664 <readReg+0x130>)
 800160c:	f7ff f994 	bl	8000938 <PIN_HIGH>
 8001610:	2108      	movs	r1, #8
 8001612:	4814      	ldr	r0, [pc, #80]	@ (8001664 <readReg+0x130>)
 8001614:	f7ff f990 	bl	8000938 <PIN_HIGH>
 8001618:	2104      	movs	r1, #4
 800161a:	4812      	ldr	r0, [pc, #72]	@ (8001664 <readReg+0x130>)
 800161c:	f7ff f98c 	bl	8000938 <PIN_HIGH>
    setReadDir();
 8001620:	f7ff fab4 	bl	8000b8c <setReadDir>
    delay(1);    //1us should be adequate
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff f95f 	bl	80008e8 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 800162a:	f7ff fe9d 	bl	8001368 <read16bits>
 800162e:	4603      	mov	r3, r0
 8001630:	81bb      	strh	r3, [r7, #12]
 8001632:	797b      	ldrb	r3, [r7, #5]
 8001634:	3b01      	subs	r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	717b      	strb	r3, [r7, #5]
 800163a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800163e:	2b00      	cmp	r3, #0
 8001640:	daf3      	bge.n	800162a <readReg+0xf6>
    RD_IDLE;
 8001642:	2110      	movs	r1, #16
 8001644:	4807      	ldr	r0, [pc, #28]	@ (8001664 <readReg+0x130>)
 8001646:	f7ff f977 	bl	8000938 <PIN_HIGH>
    CS_IDLE;
 800164a:	2102      	movs	r1, #2
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <readReg+0x130>)
 800164e:	f7ff f973 	bl	8000938 <PIN_HIGH>
    setWriteDir();
 8001652:	f7ff fac5 	bl	8000be0 <setWriteDir>
    return ret;
 8001656:	89bb      	ldrh	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000082 	.word	0x20000082
 8001664:	40020000 	.word	0x40020000
 8001668:	80200000 	.word	0x80200000
 800166c:	40020400 	.word	0x40020400

08001670 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff58 	bl	8001534 <readReg>
 8001684:	4603      	mov	r3, r0
 8001686:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	2101      	movs	r1, #1
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff51 	bl	8001534 <readReg>
 8001692:	4603      	mov	r3, r0
 8001694:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff3d 	bl	8001534 <readReg>
 80016ba:	4603      	mov	r3, r0
 80016bc:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff36 	bl	8001534 <readReg>
 80016c8:	4603      	mov	r3, r0
 80016ca:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2102      	movs	r1, #2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff2f 	bl	8001534 <readReg>
 80016d6:	4603      	mov	r3, r0
 80016d8:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	061a      	lsls	r2, r3, #24
 80016de:	89bb      	ldrh	r3, [r7, #12]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	4313      	orrs	r3, r2
 80016e4:	897a      	ldrh	r2, [r7, #10]
 80016e6:	0a12      	lsrs	r2, r2, #8
 80016e8:	b292      	uxth	r2, r2
 80016ea:	4313      	orrs	r3, r2
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <tft_init>:


void tft_init(uint16_t ID)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001706:	4bd7      	ldr	r3, [pc, #860]	@ (8001a64 <tft_init+0x370>)
 8001708:	2200      	movs	r2, #0
 800170a:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 800170c:	4ad6      	ldr	r2, [pc, #856]	@ (8001a68 <tft_init+0x374>)
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	8013      	strh	r3, [r2, #0]
 8001712:	4bd5      	ldr	r3, [pc, #852]	@ (8001a68 <tft_init+0x374>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f24c 5205 	movw	r2, #50437	@ 0xc505
 800171a:	4293      	cmp	r3, r2
 800171c:	f000 8320 	beq.w	8001d60 <tft_init+0x66c>
 8001720:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8001724:	4293      	cmp	r3, r2
 8001726:	f300 8333 	bgt.w	8001d90 <tft_init+0x69c>
 800172a:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800172e:	4293      	cmp	r3, r2
 8001730:	f000 831f 	beq.w	8001d72 <tft_init+0x67e>
 8001734:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8001738:	4293      	cmp	r3, r2
 800173a:	f300 8329 	bgt.w	8001d90 <tft_init+0x69c>
 800173e:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8001742:	4293      	cmp	r3, r2
 8001744:	f000 830c 	beq.w	8001d60 <tft_init+0x66c>
 8001748:	f24b 5205 	movw	r2, #46341	@ 0xb505
 800174c:	4293      	cmp	r3, r2
 800174e:	f300 831f 	bgt.w	8001d90 <tft_init+0x69c>
 8001752:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8001756:	4293      	cmp	r3, r2
 8001758:	f000 8263 	beq.w	8001c22 <tft_init+0x52e>
 800175c:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8001760:	4293      	cmp	r3, r2
 8001762:	f300 8315 	bgt.w	8001d90 <tft_init+0x69c>
 8001766:	f249 5295 	movw	r2, #38293	@ 0x9595
 800176a:	4293      	cmp	r3, r2
 800176c:	f000 81d0 	beq.w	8001b10 <tft_init+0x41c>
 8001770:	f249 5295 	movw	r2, #38293	@ 0x9595
 8001774:	4293      	cmp	r3, r2
 8001776:	f300 830b 	bgt.w	8001d90 <tft_init+0x69c>
 800177a:	f249 4288 	movw	r2, #38024	@ 0x9488
 800177e:	4293      	cmp	r3, r2
 8001780:	f300 8306 	bgt.w	8001d90 <tft_init+0x69c>
 8001784:	f249 4287 	movw	r2, #38023	@ 0x9487
 8001788:	4293      	cmp	r3, r2
 800178a:	f280 82d2 	bge.w	8001d32 <tft_init+0x63e>
 800178e:	f249 4286 	movw	r2, #38022	@ 0x9486
 8001792:	4293      	cmp	r3, r2
 8001794:	f000 8289 	beq.w	8001caa <tft_init+0x5b6>
 8001798:	f249 4286 	movw	r2, #38022	@ 0x9486
 800179c:	4293      	cmp	r3, r2
 800179e:	f300 82f7 	bgt.w	8001d90 <tft_init+0x69c>
 80017a2:	f249 4281 	movw	r2, #38017	@ 0x9481
 80017a6:	4293      	cmp	r3, r2
 80017a8:	f000 8268 	beq.w	8001c7c <tft_init+0x588>
 80017ac:	f249 4281 	movw	r2, #38017	@ 0x9481
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f300 82ed 	bgt.w	8001d90 <tft_init+0x69c>
 80017b6:	f249 3241 	movw	r2, #37697	@ 0x9341
 80017ba:	4293      	cmp	r3, r2
 80017bc:	f300 82e8 	bgt.w	8001d90 <tft_init+0x69c>
 80017c0:	f249 3202 	movw	r2, #37634	@ 0x9302
 80017c4:	4293      	cmp	r3, r2
 80017c6:	f280 80c3 	bge.w	8001950 <tft_init+0x25c>
 80017ca:	f249 0290 	movw	r2, #37008	@ 0x9090
 80017ce:	4293      	cmp	r3, r2
 80017d0:	f000 81af 	beq.w	8001b32 <tft_init+0x43e>
 80017d4:	f249 0290 	movw	r2, #37008	@ 0x9090
 80017d8:	4293      	cmp	r3, r2
 80017da:	f300 82d9 	bgt.w	8001d90 <tft_init+0x69c>
 80017de:	f248 3257 	movw	r2, #33623	@ 0x8357
 80017e2:	4293      	cmp	r3, r2
 80017e4:	f000 81a0 	beq.w	8001b28 <tft_init+0x434>
 80017e8:	f248 3257 	movw	r2, #33623	@ 0x8357
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f300 82cf 	bgt.w	8001d90 <tft_init+0x69c>
 80017f2:	f248 0231 	movw	r2, #32817	@ 0x8031
 80017f6:	4293      	cmp	r3, r2
 80017f8:	f000 817c 	beq.w	8001af4 <tft_init+0x400>
 80017fc:	f248 0231 	movw	r2, #32817	@ 0x8031
 8001800:	4293      	cmp	r3, r2
 8001802:	f300 82c5 	bgt.w	8001d90 <tft_init+0x69c>
 8001806:	f247 7296 	movw	r2, #30614	@ 0x7796
 800180a:	4293      	cmp	r3, r2
 800180c:	f000 828c 	beq.w	8001d28 <tft_init+0x634>
 8001810:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001814:	4293      	cmp	r3, r2
 8001816:	f300 82bb 	bgt.w	8001d90 <tft_init+0x69c>
 800181a:	f247 7293 	movw	r2, #30611	@ 0x7793
 800181e:	4293      	cmp	r3, r2
 8001820:	f000 82a7 	beq.w	8001d72 <tft_init+0x67e>
 8001824:	f247 7293 	movw	r2, #30611	@ 0x7793
 8001828:	4293      	cmp	r3, r2
 800182a:	f300 82b1 	bgt.w	8001d90 <tft_init+0x69c>
 800182e:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001832:	4293      	cmp	r3, r2
 8001834:	f000 8155 	beq.w	8001ae2 <tft_init+0x3ee>
 8001838:	f247 7289 	movw	r2, #30601	@ 0x7789
 800183c:	4293      	cmp	r3, r2
 800183e:	f300 82a7 	bgt.w	8001d90 <tft_init+0x69c>
 8001842:	f247 5275 	movw	r2, #30069	@ 0x7575
 8001846:	4293      	cmp	r3, r2
 8001848:	f000 8162 	beq.w	8001b10 <tft_init+0x41c>
 800184c:	f247 5275 	movw	r2, #30069	@ 0x7575
 8001850:	4293      	cmp	r3, r2
 8001852:	f300 829d 	bgt.w	8001d90 <tft_init+0x69c>
 8001856:	f646 0209 	movw	r2, #26633	@ 0x6809
 800185a:	4293      	cmp	r3, r2
 800185c:	f000 81aa 	beq.w	8001bb4 <tft_init+0x4c0>
 8001860:	f646 0209 	movw	r2, #26633	@ 0x6809
 8001864:	4293      	cmp	r3, r2
 8001866:	f300 8293 	bgt.w	8001d90 <tft_init+0x69c>
 800186a:	f246 7267 	movw	r2, #26471	@ 0x6767
 800186e:	4293      	cmp	r3, r2
 8001870:	f000 814e 	beq.w	8001b10 <tft_init+0x41c>
 8001874:	f246 7267 	movw	r2, #26471	@ 0x6767
 8001878:	4293      	cmp	r3, r2
 800187a:	f300 8289 	bgt.w	8001d90 <tft_init+0x69c>
 800187e:	f245 4208 	movw	r2, #21512	@ 0x5408
 8001882:	4293      	cmp	r3, r2
 8001884:	f000 8186 	beq.w	8001b94 <tft_init+0x4a0>
 8001888:	f245 4208 	movw	r2, #21512	@ 0x5408
 800188c:	4293      	cmp	r3, r2
 800188e:	f300 827f 	bgt.w	8001d90 <tft_init+0x69c>
 8001892:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001896:	4293      	cmp	r3, r2
 8001898:	f000 810e 	beq.w	8001ab8 <tft_init+0x3c4>
 800189c:	f245 3210 	movw	r2, #21264	@ 0x5310
 80018a0:	4293      	cmp	r3, r2
 80018a2:	f300 8275 	bgt.w	8001d90 <tft_init+0x69c>
 80018a6:	f244 7247 	movw	r2, #18247	@ 0x4747
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f000 812b 	beq.w	8001b06 <tft_init+0x412>
 80018b0:	f244 7247 	movw	r2, #18247	@ 0x4747
 80018b4:	4293      	cmp	r3, r2
 80018b6:	f300 826b 	bgt.w	8001d90 <tft_init+0x69c>
 80018ba:	f242 0253 	movw	r2, #8275	@ 0x2053
 80018be:	4293      	cmp	r3, r2
 80018c0:	f000 81aa 	beq.w	8001c18 <tft_init+0x524>
 80018c4:	f242 0253 	movw	r2, #8275	@ 0x2053
 80018c8:	4293      	cmp	r3, r2
 80018ca:	f300 8261 	bgt.w	8001d90 <tft_init+0x69c>
 80018ce:	f241 6202 	movw	r2, #5634	@ 0x1602
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f000 8197 	beq.w	8001c06 <tft_init+0x512>
 80018d8:	f241 6202 	movw	r2, #5634	@ 0x1602
 80018dc:	4293      	cmp	r3, r2
 80018de:	f300 8257 	bgt.w	8001d90 <tft_init+0x69c>
 80018e2:	f241 5281 	movw	r2, #5505	@ 0x1581
 80018e6:	4293      	cmp	r3, r2
 80018e8:	f000 81c3 	beq.w	8001c72 <tft_init+0x57e>
 80018ec:	f241 5281 	movw	r2, #5505	@ 0x1581
 80018f0:	4293      	cmp	r3, r2
 80018f2:	f300 824d 	bgt.w	8001d90 <tft_init+0x69c>
 80018f6:	f241 5226 	movw	r2, #5414	@ 0x1526
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f000 80d3 	beq.w	8001aa6 <tft_init+0x3b2>
 8001900:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001904:	4293      	cmp	r3, r2
 8001906:	f300 8243 	bgt.w	8001d90 <tft_init+0x69c>
 800190a:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 800190e:	f000 80c1 	beq.w	8001a94 <tft_init+0x3a0>
 8001912:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8001916:	f300 823b 	bgt.w	8001d90 <tft_init+0x69c>
 800191a:	f241 5211 	movw	r2, #5393	@ 0x1511
 800191e:	4293      	cmp	r3, r2
 8001920:	f000 80a4 	beq.w	8001a6c <tft_init+0x378>
 8001924:	f241 5211 	movw	r2, #5393	@ 0x1511
 8001928:	4293      	cmp	r3, r2
 800192a:	f300 8231 	bgt.w	8001d90 <tft_init+0x69c>
 800192e:	f241 5205 	movw	r2, #5381	@ 0x1505
 8001932:	4293      	cmp	r3, r2
 8001934:	f000 8133 	beq.w	8001b9e <tft_init+0x4aa>
 8001938:	f241 5205 	movw	r2, #5381	@ 0x1505
 800193c:	4293      	cmp	r3, r2
 800193e:	f300 8227 	bgt.w	8001d90 <tft_init+0x69c>
 8001942:	2b01      	cmp	r3, #1
 8001944:	f000 8121 	beq.w	8001b8a <tft_init+0x496>
 8001948:	2b99      	cmp	r3, #153	@ 0x99
 800194a:	f000 8109 	beq.w	8001b60 <tft_init+0x46c>
 800194e:	e21f      	b.n	8001d90 <tft_init+0x69c>
 8001950:	f5a3 4313 	sub.w	r3, r3, #37632	@ 0x9300
 8001954:	3b02      	subs	r3, #2
 8001956:	2b3f      	cmp	r3, #63	@ 0x3f
 8001958:	f200 821a 	bhi.w	8001d90 <tft_init+0x69c>
 800195c:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <tft_init+0x270>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001c2d 	.word	0x08001c2d
 8001968:	08001d91 	.word	0x08001d91
 800196c:	08001d91 	.word	0x08001d91
 8001970:	08001d91 	.word	0x08001d91
 8001974:	08001d91 	.word	0x08001d91
 8001978:	08001d91 	.word	0x08001d91
 800197c:	08001d91 	.word	0x08001d91
 8001980:	08001d91 	.word	0x08001d91
 8001984:	08001d91 	.word	0x08001d91
 8001988:	08001d91 	.word	0x08001d91
 800198c:	08001d91 	.word	0x08001d91
 8001990:	08001d91 	.word	0x08001d91
 8001994:	08001d91 	.word	0x08001d91
 8001998:	08001d91 	.word	0x08001d91
 800199c:	08001d91 	.word	0x08001d91
 80019a0:	08001d91 	.word	0x08001d91
 80019a4:	08001d91 	.word	0x08001d91
 80019a8:	08001d91 	.word	0x08001d91
 80019ac:	08001d91 	.word	0x08001d91
 80019b0:	08001d91 	.word	0x08001d91
 80019b4:	08001d91 	.word	0x08001d91
 80019b8:	08001d91 	.word	0x08001d91
 80019bc:	08001d91 	.word	0x08001d91
 80019c0:	08001d91 	.word	0x08001d91
 80019c4:	08001d91 	.word	0x08001d91
 80019c8:	08001d91 	.word	0x08001d91
 80019cc:	08001d91 	.word	0x08001d91
 80019d0:	08001d91 	.word	0x08001d91
 80019d4:	08001d91 	.word	0x08001d91
 80019d8:	08001d91 	.word	0x08001d91
 80019dc:	08001b9f 	.word	0x08001b9f
 80019e0:	08001d91 	.word	0x08001d91
 80019e4:	08001d91 	.word	0x08001d91
 80019e8:	08001d91 	.word	0x08001d91
 80019ec:	08001d91 	.word	0x08001d91
 80019f0:	08001bbf 	.word	0x08001bbf
 80019f4:	08001d91 	.word	0x08001d91
 80019f8:	08001bdf 	.word	0x08001bdf
 80019fc:	08001bbf 	.word	0x08001bbf
 8001a00:	08001c41 	.word	0x08001c41
 8001a04:	08001d91 	.word	0x08001d91
 8001a08:	08001d91 	.word	0x08001d91
 8001a0c:	08001d91 	.word	0x08001d91
 8001a10:	08001d91 	.word	0x08001d91
 8001a14:	08001d91 	.word	0x08001d91
 8001a18:	08001d91 	.word	0x08001d91
 8001a1c:	08001d91 	.word	0x08001d91
 8001a20:	08001bc9 	.word	0x08001bc9
 8001a24:	08001d91 	.word	0x08001d91
 8001a28:	08001d91 	.word	0x08001d91
 8001a2c:	08001d91 	.word	0x08001d91
 8001a30:	08001bc9 	.word	0x08001bc9
 8001a34:	08001d91 	.word	0x08001d91
 8001a38:	08001d91 	.word	0x08001d91
 8001a3c:	08001c37 	.word	0x08001c37
 8001a40:	08001d91 	.word	0x08001d91
 8001a44:	08001d91 	.word	0x08001d91
 8001a48:	08001d91 	.word	0x08001d91
 8001a4c:	08001d91 	.word	0x08001d91
 8001a50:	08001d91 	.word	0x08001d91
 8001a54:	08001d91 	.word	0x08001d91
 8001a58:	08001d91 	.word	0x08001d91
 8001a5c:	08001c57 	.word	0x08001c57
 8001a60:	08001c61 	.word	0x08001c61
 8001a64:	2000008a 	.word	0x2000008a
 8001a68:	2000008e 	.word	0x2000008e
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001a6c:	4b99      	ldr	r3, [pc, #612]	@ (8001cd4 <tft_init+0x5e0>)
 8001a6e:	2203      	movs	r2, #3
 8001a70:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8001a72:	4b99      	ldr	r3, [pc, #612]	@ (8001cd8 <tft_init+0x5e4>)
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	2303      	movs	r3, #3
 8001a78:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001a7a:	4b98      	ldr	r3, [pc, #608]	@ (8001cdc <tft_init+0x5e8>)
 8001a7c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a84:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001a86:	4b96      	ldr	r3, [pc, #600]	@ (8001ce0 <tft_init+0x5ec>)
 8001a88:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a90:	801a      	strh	r2, [r3, #0]
        break;
 8001a92:	e183      	b.n	8001d9c <tft_init+0x6a8>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001a94:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd4 <tft_init+0x5e0>)
 8001a96:	f240 4213 	movw	r2, #1043	@ 0x413
 8001a9a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001a9c:	4b91      	ldr	r3, [pc, #580]	@ (8001ce4 <tft_init+0x5f0>)
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	837b      	strh	r3, [r7, #26]
        break;
 8001aa4:	e17a      	b.n	8001d9c <tft_init+0x6a8>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cd4 <tft_init+0x5e0>)
 8001aa8:	f240 4213 	movw	r2, #1043	@ 0x413
 8001aac:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8001aae:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce8 <tft_init+0x5f4>)
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	837b      	strh	r3, [r7, #26]
        break;
 8001ab6:	e171      	b.n	8001d9c <tft_init+0x6a8>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001ab8:	4b86      	ldr	r3, [pc, #536]	@ (8001cd4 <tft_init+0x5e0>)
 8001aba:	f640 6213 	movw	r2, #3603	@ 0xe13
 8001abe:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8001ac0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cec <tft_init+0x5f8>)
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001ac8:	4b84      	ldr	r3, [pc, #528]	@ (8001cdc <tft_init+0x5e8>)
 8001aca:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ad2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001ad4:	4b82      	ldr	r3, [pc, #520]	@ (8001ce0 <tft_init+0x5ec>)
 8001ad6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ade:	801a      	strh	r2, [r3, #0]
        break;
 8001ae0:	e15c      	b.n	8001d9c <tft_init+0x6a8>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd4 <tft_init+0x5e0>)
 8001ae4:	f240 4213 	movw	r2, #1043	@ 0x413
 8001ae8:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8001aea:	4b81      	ldr	r3, [pc, #516]	@ (8001cf0 <tft_init+0x5fc>)
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	2341      	movs	r3, #65	@ 0x41
 8001af0:	837b      	strh	r3, [r7, #26]
        break;
 8001af2:	e153      	b.n	8001d9c <tft_init+0x6a8>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001af4:	4b77      	ldr	r3, [pc, #476]	@ (8001cd4 <tft_init+0x5e0>)
 8001af6:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001afa:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8001afc:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf4 <tft_init+0x600>)
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	2312      	movs	r3, #18
 8001b02:	837b      	strh	r3, [r7, #26]
        break;
 8001b04:	e14a      	b.n	8001d9c <tft_init+0x6a8>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 8001b06:	4b73      	ldr	r3, [pc, #460]	@ (8001cd4 <tft_init+0x5e0>)
 8001b08:	f241 6213 	movw	r2, #5651	@ 0x1613
 8001b0c:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 8001b0e:	e003      	b.n	8001b18 <tft_init+0x424>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 8001b10:	4b70      	ldr	r3, [pc, #448]	@ (8001cd4 <tft_init+0x5e0>)
 8001b12:	f241 4201 	movw	r2, #5121	@ 0x1401
 8001b16:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 8001b18:	4b77      	ldr	r3, [pc, #476]	@ (8001cf8 <tft_init+0x604>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 8001b1e:	2170      	movs	r1, #112	@ 0x70
 8001b20:	4876      	ldr	r0, [pc, #472]	@ (8001cfc <tft_init+0x608>)
 8001b22:	f7ff fb51 	bl	80011c8 <init_table>
        break;
 8001b26:	e139      	b.n	8001d9c <tft_init+0x6a8>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <tft_init+0x5e0>)
 8001b2a:	f241 4203 	movw	r2, #5123	@ 0x1403
 8001b2e:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8001b30:	e003      	b.n	8001b3a <tft_init+0x446>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001b32:	4b68      	ldr	r3, [pc, #416]	@ (8001cd4 <tft_init+0x5e0>)
 8001b34:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001b38:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8001b3e:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <tft_init+0x60c>)
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	2302      	movs	r3, #2
 8001b44:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001b46:	4b65      	ldr	r3, [pc, #404]	@ (8001cdc <tft_init+0x5e8>)
 8001b48:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b50:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001b52:	4b63      	ldr	r3, [pc, #396]	@ (8001ce0 <tft_init+0x5ec>)
 8001b54:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b5c:	801a      	strh	r2, [r3, #0]
        break;
 8001b5e:	e11d      	b.n	8001d9c <tft_init+0x6a8>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001b60:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd4 <tft_init+0x5e0>)
 8001b62:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001b66:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8001b68:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <tft_init+0x610>)
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	231d      	movs	r3, #29
 8001b6e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001b70:	4b5a      	ldr	r3, [pc, #360]	@ (8001cdc <tft_init+0x5e8>)
 8001b72:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b7a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001b7c:	4b58      	ldr	r3, [pc, #352]	@ (8001ce0 <tft_init+0x5ec>)
 8001b7e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b86:	801a      	strh	r2, [r3, #0]
        break;
 8001b88:	e108      	b.n	8001d9c <tft_init+0x6a8>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8001b8a:	4b52      	ldr	r3, [pc, #328]	@ (8001cd4 <tft_init+0x5e0>)
 8001b8c:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8001b90:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8001b92:	e008      	b.n	8001ba6 <tft_init+0x4b2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <tft_init+0x5e0>)
 8001b96:	f241 0204 	movw	r2, #4100	@ 0x1004
 8001b9a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8001b9c:	e003      	b.n	8001ba6 <tft_init+0x4b2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <tft_init+0x5e0>)
 8001ba0:	f241 0204 	movw	r2, #4100	@ 0x1004
 8001ba4:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001baa:	21d8      	movs	r1, #216	@ 0xd8
 8001bac:	4856      	ldr	r0, [pc, #344]	@ (8001d08 <tft_init+0x614>)
 8001bae:	f7ff fb64 	bl	800127a <init_table16>
        break;
 8001bb2:	e0f3      	b.n	8001d9c <tft_init+0x6a8>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001bb4:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <tft_init+0x5e0>)
 8001bb6:	f241 1202 	movw	r2, #4354	@ 0x1102
 8001bba:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001bbc:	e008      	b.n	8001bd0 <tft_init+0x4dc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8001bbe:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <tft_init+0x5e0>)
 8001bc0:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8001bc4:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001bc6:	e003      	b.n	8001bd0 <tft_init+0x4dc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001bc8:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <tft_init+0x5e0>)
 8001bca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bce:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8001bd4:	21cc      	movs	r1, #204	@ 0xcc
 8001bd6:	484d      	ldr	r0, [pc, #308]	@ (8001d0c <tft_init+0x618>)
 8001bd8:	f7ff fb4f 	bl	800127a <init_table16>
        break;
 8001bdc:	e0de      	b.n	8001d9c <tft_init+0x6a8>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001bde:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd4 <tft_init+0x5e0>)
 8001be0:	f240 4203 	movw	r2, #1027	@ 0x403
 8001be4:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001be6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <tft_init+0x61c>)
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	231e      	movs	r3, #30
 8001bec:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <tft_init+0x5e8>)
 8001bf0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001bf8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001bfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <tft_init+0x5ec>)
 8001bfc:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	22f0      	movs	r2, #240	@ 0xf0
 8001c02:	801a      	strh	r2, [r3, #0]
        break;
 8001c04:	e0ca      	b.n	8001d9c <tft_init+0x6a8>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <tft_init+0x5e0>)
 8001c08:	f240 4203 	movw	r2, #1027	@ 0x403
 8001c0c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8001c0e:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <tft_init+0x620>)
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2306      	movs	r3, #6
 8001c14:	837b      	strh	r3, [r7, #26]
        break;
 8001c16:	e0c1      	b.n	8001d9c <tft_init+0x6a8>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8001c18:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <tft_init+0x5e0>)
 8001c1a:	f241 4217 	movw	r2, #5143	@ 0x1417
 8001c1e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001c20:	e012      	b.n	8001c48 <tft_init+0x554>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8001c22:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <tft_init+0x5e0>)
 8001c24:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001c28:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001c2a:	e00d      	b.n	8001c48 <tft_init+0x554>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001c2c:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <tft_init+0x5e0>)
 8001c2e:	f240 4203 	movw	r2, #1027	@ 0x403
 8001c32:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001c34:	e008      	b.n	8001c48 <tft_init+0x554>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001c36:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <tft_init+0x5e0>)
 8001c38:	f240 4213 	movw	r2, #1043	@ 0x413
 8001c3c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001c3e:	e003      	b.n	8001c48 <tft_init+0x554>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <tft_init+0x5e0>)
 8001c42:	f241 6203 	movw	r2, #5635	@ 0x1603
 8001c46:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001c4c:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <tft_init+0x624>)
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	2303      	movs	r3, #3
 8001c52:	837b      	strh	r3, [r7, #26]
        break;
 8001c54:	e0a2      	b.n	8001d9c <tft_init+0x6a8>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <tft_init+0x5e0>)
 8001c58:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001c5c:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8001c5e:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <tft_init+0x5e0>)
 8001c62:	f240 4213 	movw	r2, #1043	@ 0x413
 8001c66:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001c68:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <tft_init+0x628>)
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	2365      	movs	r3, #101	@ 0x65
 8001c6e:	837b      	strh	r3, [r7, #26]
        break;
 8001c70:	e094      	b.n	8001d9c <tft_init+0x6a8>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <tft_init+0x5e0>)
 8001c74:	f240 4213 	movw	r2, #1043	@ 0x413
 8001c78:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001c7a:	e003      	b.n	8001c84 <tft_init+0x590>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <tft_init+0x5e0>)
 8001c7e:	f240 4207 	movw	r2, #1031	@ 0x407
 8001c82:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001c88:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <tft_init+0x62c>)
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	2345      	movs	r3, #69	@ 0x45
 8001c8e:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <tft_init+0x5e8>)
 8001c92:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c9a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <tft_init+0x5ec>)
 8001c9e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ca6:	801a      	strh	r2, [r3, #0]
        break;
 8001ca8:	e078      	b.n	8001d9c <tft_init+0x6a8>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <tft_init+0x5e0>)
 8001cac:	f240 4203 	movw	r2, #1027	@ 0x403
 8001cb0:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <tft_init+0x630>)
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	233b      	movs	r3, #59	@ 0x3b
 8001cb8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <tft_init+0x5e8>)
 8001cbc:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001cc4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <tft_init+0x5ec>)
 8001cc8:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001cd0:	801a      	strh	r2, [r3, #0]
        break;
 8001cd2:	e063      	b.n	8001d9c <tft_init+0x6a8>
 8001cd4:	2000008c 	.word	0x2000008c
 8001cd8:	08006974 	.word	0x08006974
 8001cdc:	080009cd 	.word	0x080009cd
 8001ce0:	080009b5 	.word	0x080009b5
 8001ce4:	08006978 	.word	0x08006978
 8001ce8:	08006980 	.word	0x08006980
 8001cec:	0800698c 	.word	0x0800698c
 8001cf0:	08006990 	.word	0x08006990
 8001cf4:	080069d4 	.word	0x080069d4
 8001cf8:	20000083 	.word	0x20000083
 8001cfc:	080069e8 	.word	0x080069e8
 8001d00:	08006a58 	.word	0x08006a58
 8001d04:	08006a5c 	.word	0x08006a5c
 8001d08:	08006a7c 	.word	0x08006a7c
 8001d0c:	08006b54 	.word	0x08006b54
 8001d10:	08006c20 	.word	0x08006c20
 8001d14:	08006c40 	.word	0x08006c40
 8001d18:	08006c48 	.word	0x08006c48
 8001d1c:	08006c4c 	.word	0x08006c4c
 8001d20:	08006cb4 	.word	0x08006cb4
 8001d24:	08006cfc 	.word	0x08006cfc
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001d28:	4b46      	ldr	r3, [pc, #280]	@ (8001e44 <tft_init+0x750>)
 8001d2a:	f240 4203 	movw	r2, #1027	@ 0x403
 8001d2e:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8001d30:	e003      	b.n	8001d3a <tft_init+0x646>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <tft_init+0x750>)
 8001d34:	f240 4213 	movw	r2, #1043	@ 0x413
 8001d38:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8001d3e:	4b42      	ldr	r3, [pc, #264]	@ (8001e48 <tft_init+0x754>)
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	232b      	movs	r3, #43	@ 0x2b
 8001d44:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <tft_init+0x758>)
 8001d48:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d50:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d52:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <tft_init+0x75c>)
 8001d54:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d5c:	801a      	strh	r2, [r3, #0]
        break;
 8001d5e:	e01d      	b.n	8001d9c <tft_init+0x6a8>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8001d60:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <tft_init+0x750>)
 8001d62:	f241 0208 	movw	r2, #4104	@ 0x1008
 8001d66:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001d68:	21b0      	movs	r1, #176	@ 0xb0
 8001d6a:	483a      	ldr	r0, [pc, #232]	@ (8001e54 <tft_init+0x760>)
 8001d6c:	f7ff fa85 	bl	800127a <init_table16>
        break;
 8001d70:	e014      	b.n	8001d9c <tft_init+0x6a8>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <tft_init+0x750>)
 8001d74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d78:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8001d7a:	21c0      	movs	r1, #192	@ 0xc0
 8001d7c:	4836      	ldr	r0, [pc, #216]	@ (8001e58 <tft_init+0x764>)
 8001d7e:	f7ff fa7c 	bl	800127a <init_table16>
        p16 = (int16_t *) & height;
 8001d82:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <tft_init+0x758>)
 8001d84:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001d8c:	801a      	strh	r2, [r3, #0]
        break;
 8001d8e:	e005      	b.n	8001d9c <tft_init+0x6a8>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8001d90:	4b2f      	ldr	r3, [pc, #188]	@ (8001e50 <tft_init+0x75c>)
 8001d92:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2200      	movs	r2, #0
 8001d98:	801a      	strh	r2, [r3, #0]
        break;
 8001d9a:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <tft_init+0x750>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <tft_init+0x768>)
 8001db2:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <tft_init+0x6e2>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001dba:	2109      	movs	r1, #9
 8001dbc:	4828      	ldr	r0, [pc, #160]	@ (8001e60 <tft_init+0x76c>)
 8001dbe:	f7ff fa03 	bl	80011c8 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001dc2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	69f8      	ldr	r0, [r7, #28]
 8001dca:	f7ff f9fd 	bl	80011c8 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001dce:	2106      	movs	r1, #6
 8001dd0:	4824      	ldr	r0, [pc, #144]	@ (8001e64 <tft_init+0x770>)
 8001dd2:	f7ff f9f9 	bl	80011c8 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 ff04 	bl	8002be4 <setRotation>
    invertDisplay(false);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f001 fcb3 	bl	8003748 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <tft_init+0x774>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	f249 4288 	movw	r2, #38024	@ 0x9488
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d125      	bne.n	8001e3a <tft_init+0x746>
		is555 = 0;
 8001dee:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <tft_init+0x778>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8001df4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f001 f97a 	bl	80030f4 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7fe fe85 	bl	8000b12 <readPixel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d112      	bne.n	8001e3a <tft_init+0x746>
			uint8_t pixfmt = 0x06;
 8001e14:	2306      	movs	r3, #6
 8001e16:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8001e18:	f107 030f 	add.w	r3, r7, #15
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	203a      	movs	r0, #58	@ 0x3a
 8001e22:	f7fe fea0 	bl	8000b66 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <tft_init+0x750>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	f023 0310 	bic.w	r3, r3, #16
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <tft_init+0x750>)
 8001e32:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <tft_init+0x778>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8001e3a:	bf00      	nop
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000008c 	.word	0x2000008c
 8001e48:	08006d38 	.word	0x08006d38
 8001e4c:	080009cd 	.word	0x080009cd
 8001e50:	080009b5 	.word	0x080009b5
 8001e54:	08006d64 	.word	0x08006d64
 8001e58:	08006e14 	.word	0x08006e14
 8001e5c:	20000090 	.word	0x20000090
 8001e60:	08006ed4 	.word	0x08006ed4
 8001e64:	08006ee0 	.word	0x08006ee0
 8001e68:	2000008e 	.word	0x2000008e
 8001e6c:	20000084 	.word	0x20000084

08001e70 <readID>:




uint16_t readID(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8001e76:	2100      	movs	r1, #0
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fb5b 	bl	8001534 <readReg>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8001e82:	89fb      	ldrh	r3, [r7, #14]
 8001e84:	f245 4208 	movw	r2, #21512	@ 0x5408
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d102      	bne.n	8001e92 <readID+0x22>
        return 0x5408;
 8001e8c:	f245 4308 	movw	r3, #21512	@ 0x5408
 8001e90:	e128      	b.n	80020e4 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	f245 4220 	movw	r2, #21536	@ 0x5420
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d102      	bne.n	8001ea2 <readID+0x32>
        return 0x5420;
 8001e9c:	f245 4320 	movw	r3, #21536	@ 0x5420
 8001ea0:	e120      	b.n	80020e4 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	f648 1289 	movw	r2, #35209	@ 0x8989
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d102      	bne.n	8001eb2 <readID+0x42>
        return 0x1289;
 8001eac:	f241 2389 	movw	r3, #4745	@ 0x1289
 8001eb0:	e118      	b.n	80020e4 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2067      	movs	r0, #103	@ 0x67
 8001eb6:	f7ff fb3d 	bl	8001534 <readReg>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	f244 7247 	movw	r2, #18247	@ 0x4747
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <readID+0x5e>
        return 0x8347;
 8001ec8:	f248 3347 	movw	r3, #33607	@ 0x8347
 8001ecc:	e10a      	b.n	80020e4 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8001ece:	20a1      	movs	r0, #161	@ 0xa1
 8001ed0:	f7ff fbce 	bl	8001670 <readReg32>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	f246 1201 	movw	r2, #24833	@ 0x6101
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d102      	bne.n	8001ee8 <readID+0x78>
        return 0x1963;
 8001ee2:	f641 1363 	movw	r3, #6499	@ 0x1963
 8001ee6:	e0fd      	b.n	80020e4 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8001ee8:	89fb      	ldrh	r3, [r7, #14]
 8001eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d102      	bne.n	8001ef8 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8001ef2:	f241 5326 	movw	r3, #5414	@ 0x1526
 8001ef6:	e0f5      	b.n	80020e4 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8001ef8:	20bf      	movs	r0, #191	@ 0xbf
 8001efa:	f7ff fbd4 	bl	80016a6 <readReg40>
 8001efe:	4603      	mov	r3, r0
 8001f00:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	f248 3257 	movw	r2, #33623	@ 0x8357
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d102      	bne.n	8001f12 <readID+0xa2>
        return 0x8357;
 8001f0c:	f248 3357 	movw	r3, #33623	@ 0x8357
 8001f10:	e0e8      	b.n	80020e4 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	f249 4281 	movw	r2, #38017	@ 0x9481
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <readID+0xb2>
        return 0x9481;
 8001f1c:	f249 4381 	movw	r3, #38017	@ 0x9481
 8001f20:	e0e0      	b.n	80020e4 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	f241 5211 	movw	r2, #5393	@ 0x1511
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d102      	bne.n	8001f32 <readID+0xc2>
        return 0x1511;
 8001f2c:	f241 5311 	movw	r3, #5393	@ 0x1511
 8001f30:	e0d8      	b.n	80020e4 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8001f38:	d102      	bne.n	8001f40 <readID+0xd0>
        return 0x1520;
 8001f3a:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8001f3e:	e0d1      	b.n	80020e4 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8001f40:	89fb      	ldrh	r3, [r7, #14]
 8001f42:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d102      	bne.n	8001f50 <readID+0xe0>
        return 0x1526;
 8001f4a:	f241 5326 	movw	r3, #5414	@ 0x1526
 8001f4e:	e0c9      	b.n	80020e4 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	f241 5281 	movw	r2, #5505	@ 0x1581
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d102      	bne.n	8001f60 <readID+0xf0>
        return 0x1581;
 8001f5a:	f241 5381 	movw	r3, #5505	@ 0x1581
 8001f5e:	e0c1      	b.n	80020e4 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8001f60:	89fb      	ldrh	r3, [r7, #14]
 8001f62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001f66:	d102      	bne.n	8001f6e <readID+0xfe>
        return 0x6814;
 8001f68:	f646 0314 	movw	r3, #26644	@ 0x6814
 8001f6c:	e0ba      	b.n	80020e4 <readID+0x274>
    ret = readReg32(0xD4);
 8001f6e:	20d4      	movs	r0, #212	@ 0xd4
 8001f70:	f7ff fb7e 	bl	8001670 <readReg32>
 8001f74:	4603      	mov	r3, r0
 8001f76:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d102      	bne.n	8001f88 <readID+0x118>
        return 0x5310;
 8001f82:	f245 3310 	movw	r3, #21264	@ 0x5310
 8001f86:	e0ad      	b.n	80020e4 <readID+0x274>
    ret = readReg32(0xD7);
 8001f88:	20d7      	movs	r0, #215	@ 0xd7
 8001f8a:	f7ff fb71 	bl	8001670 <readReg32>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	f248 0231 	movw	r2, #32817	@ 0x8031
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d102      	bne.n	8001fa2 <readID+0x132>
        return 0x8031;
 8001f9c:	f248 0331 	movw	r3, #32817	@ 0x8031
 8001fa0:	e0a0      	b.n	80020e4 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8001fa2:	20ef      	movs	r0, #239	@ 0xef
 8001fa4:	f7ff fb7f 	bl	80016a6 <readReg40>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	f249 3227 	movw	r2, #37671	@ 0x9327
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d102      	bne.n	8001fbc <readID+0x14c>
        return 0x9327;
 8001fb6:	f249 3327 	movw	r3, #37671	@ 0x9327
 8001fba:	e093      	b.n	80020e4 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8001fbc:	20fe      	movs	r0, #254	@ 0xfe
 8001fbe:	f7ff fb57 	bl	8001670 <readReg32>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8001fc8:	89fb      	ldrh	r3, [r7, #14]
 8001fca:	f242 0253 	movw	r2, #8275	@ 0x2053
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d102      	bne.n	8001fd8 <readID+0x168>
        return 0x2053;
 8001fd2:	f242 0353 	movw	r3, #8275	@ 0x2053
 8001fd6:	e085      	b.n	80020e4 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8001fd8:	2004      	movs	r0, #4
 8001fda:	f7ff fb49 	bl	8001670 <readReg32>
 8001fde:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d122      	bne.n	8002036 <readID+0x1c6>
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff6:	d11e      	bne.n	8002036 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ec <readID+0x27c>)
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4611      	mov	r1, r2
 8002000:	8019      	strh	r1, [r3, #0]
 8002002:	3302      	adds	r3, #2
 8002004:	0c12      	lsrs	r2, r2, #16
 8002006:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2203      	movs	r2, #3
 800200c:	4619      	mov	r1, r3
 800200e:	20b9      	movs	r0, #185	@ 0xb9
 8002010:	f7fe fda9 	bl	8000b66 <pushCommand>
        msb = readReg(0xD0,0);
 8002014:	2100      	movs	r1, #0
 8002016:	20d0      	movs	r0, #208	@ 0xd0
 8002018:	f7ff fa8c 	bl	8001534 <readReg>
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	2b99      	cmp	r3, #153	@ 0x99
 8002024:	d101      	bne.n	800202a <readID+0x1ba>
 8002026:	2399      	movs	r3, #153	@ 0x99
 8002028:	e05c      	b.n	80020e4 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b90      	cmp	r3, #144	@ 0x90
 800202e:	d102      	bne.n	8002036 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8002030:	f249 0390 	movw	r3, #37008	@ 0x9090
 8002034:	e056      	b.n	80020e4 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	f241 5226 	movw	r2, #5414	@ 0x1526
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8002040:	f241 5326 	movw	r3, #5414	@ 0x1526
 8002044:	e04e      	b.n	80020e4 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8002046:	89fb      	ldrh	r3, [r7, #14]
 8002048:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <readID+0x1e6>
        return 0x7735;
 8002050:	f247 7335 	movw	r3, #30517	@ 0x7735
 8002054:	e046      	b.n	80020e4 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	f248 5252 	movw	r2, #34130	@ 0x8552
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <readID+0x1f6>
        return 0x7789;
 8002060:	f247 7389 	movw	r3, #30601	@ 0x7789
 8002064:	e03e      	b.n	80020e4 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8002066:	89fb      	ldrh	r3, [r7, #14]
 8002068:	f64a 4211 	movw	r2, #44049	@ 0xac11
 800206c:	4293      	cmp	r3, r2
 800206e:	d102      	bne.n	8002076 <readID+0x206>
        return 0xAC11;
 8002070:	f64a 4311 	movw	r3, #44049	@ 0xac11
 8002074:	e036      	b.n	80020e4 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8002076:	20d3      	movs	r0, #211	@ 0xd3
 8002078:	f7ff fafa 	bl	8001670 <readReg32>
 800207c:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	f249 1263 	movw	r2, #37219	@ 0x9163
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <readID+0x222>
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	e028      	b.n	80020e4 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002092:	20d3      	movs	r0, #211	@ 0xd3
 8002094:	f7ff faec 	bl	8001670 <readReg32>
 8002098:	4603      	mov	r3, r0
 800209a:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	2b93      	cmp	r3, #147	@ 0x93
 80020a8:	d00b      	beq.n	80020c2 <readID+0x252>
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b94      	cmp	r3, #148	@ 0x94
 80020ae:	d008      	beq.n	80020c2 <readID+0x252>
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	2b98      	cmp	r3, #152	@ 0x98
 80020b4:	d005      	beq.n	80020c2 <readID+0x252>
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b77      	cmp	r3, #119	@ 0x77
 80020ba:	d002      	beq.n	80020c2 <readID+0x252>
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2b16      	cmp	r3, #22
 80020c0:	d101      	bne.n	80020c6 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 80020c2:	89fb      	ldrh	r3, [r7, #14]
 80020c4:	e00e      	b.n	80020e4 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 80020c6:	89fb      	ldrh	r3, [r7, #14]
 80020c8:	2bd3      	cmp	r3, #211	@ 0xd3
 80020ca:	d004      	beq.n	80020d6 <readID+0x266>
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <readID+0x26a>
        return ret;             //16-bit write-only bus
 80020d6:	89fb      	ldrh	r3, [r7, #14]
 80020d8:	e004      	b.n	80020e4 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 80020da:	2100      	movs	r1, #0
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fa29 	bl	8001534 <readReg>
 80020e2:	4603      	mov	r3, r0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	08005f98 	.word	0x08005f98

080020f0 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b08b      	sub	sp, #44	@ 0x2c
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	81fb      	strh	r3, [r7, #14]
 80020fe:	460b      	mov	r3, r1
 8002100:	81bb      	strh	r3, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8002106:	4b9b      	ldr	r3, [pc, #620]	@ (8002374 <readGRAM+0x284>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t n = w * h, row = 0, col = 0;
 800210c:	88fa      	ldrh	r2, [r7, #6]
 800210e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002110:	fb12 f303 	smulbb	r3, r2, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002118:	2300      	movs	r3, #0
 800211a:	843b      	strh	r3, [r7, #32]
 800211c:	2300      	movs	r3, #0
 800211e:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8002120:	4b95      	ldr	r3, [pc, #596]	@ (8002378 <readGRAM+0x288>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <readGRAM+0x48>
 8002128:	4b94      	ldr	r3, [pc, #592]	@ (800237c <readGRAM+0x28c>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <readGRAM+0x48>
        _MR = 0x2E;
 8002134:	232e      	movs	r3, #46	@ 0x2e
 8002136:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8002138:	4b91      	ldr	r3, [pc, #580]	@ (8002380 <readGRAM+0x290>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <readGRAM+0x58>
 8002144:	232e      	movs	r3, #46	@ 0x2e
 8002146:	84bb      	strh	r3, [r7, #36]	@ 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002148:	89fa      	ldrh	r2, [r7, #14]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4413      	add	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29b      	uxth	r3, r3
 8002154:	b21c      	sxth	r4, r3
 8002156:	89ba      	ldrh	r2, [r7, #12]
 8002158:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800215a:	4413      	add	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29b      	uxth	r3, r3
 8002162:	b21b      	sxth	r3, r3
 8002164:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002168:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800216c:	4622      	mov	r2, r4
 800216e:	f001 f887 	bl	8003280 <setAddrWindow>
    while (n > 0) {
 8002172:	f000 bd12 	b.w	8002b9a <readGRAM+0xaaa>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002176:	4b81      	ldr	r3, [pc, #516]	@ (800237c <readGRAM+0x28c>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 8002182:	4b80      	ldr	r3, [pc, #512]	@ (8002384 <readGRAM+0x294>)
 8002184:	8818      	ldrh	r0, [r3, #0]
 8002186:	89fa      	ldrh	r2, [r7, #14]
 8002188:	8bfb      	ldrh	r3, [r7, #30]
 800218a:	4413      	add	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fcd7 	bl	8000b42 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002194:	4b7c      	ldr	r3, [pc, #496]	@ (8002388 <readGRAM+0x298>)
 8002196:	8818      	ldrh	r0, [r3, #0]
 8002198:	89ba      	ldrh	r2, [r7, #12]
 800219a:	8c3b      	ldrh	r3, [r7, #32]
 800219c:	4413      	add	r3, r2
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fcce 	bl	8000b42 <WriteCmdData>
        }
        CS_ACTIVE;
 80021a6:	2102      	movs	r1, #2
 80021a8:	4878      	ldr	r0, [pc, #480]	@ (800238c <readGRAM+0x29c>)
 80021aa:	f7fe fbb5 	bl	8000918 <PIN_LOW>
        WriteCmd(_MR);
 80021ae:	2104      	movs	r1, #4
 80021b0:	4876      	ldr	r0, [pc, #472]	@ (800238c <readGRAM+0x29c>)
 80021b2:	f7fe fbb1 	bl	8000918 <PIN_LOW>
 80021b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	777b      	strb	r3, [r7, #29]
 80021be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021c0:	773b      	strb	r3, [r7, #28]
 80021c2:	4b72      	ldr	r3, [pc, #456]	@ (800238c <readGRAM+0x29c>)
 80021c4:	4a72      	ldr	r2, [pc, #456]	@ (8002390 <readGRAM+0x2a0>)
 80021c6:	619a      	str	r2, [r3, #24]
 80021c8:	4b72      	ldr	r3, [pc, #456]	@ (8002394 <readGRAM+0x2a4>)
 80021ca:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	7f7b      	ldrb	r3, [r7, #29]
 80021d2:	035b      	lsls	r3, r3, #13
 80021d4:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80021d8:	7f7b      	ldrb	r3, [r7, #29]
 80021da:	109b      	asrs	r3, r3, #2
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <readGRAM+0x29c>)
 80021e4:	619a      	str	r2, [r3, #24]
 80021e6:	7f7b      	ldrb	r3, [r7, #29]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002394 <readGRAM+0x2a4>)
 80021ea:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	2108      	movs	r1, #8
 80021f2:	4866      	ldr	r0, [pc, #408]	@ (800238c <readGRAM+0x29c>)
 80021f4:	f7fe fb90 	bl	8000918 <PIN_LOW>
 80021f8:	2108      	movs	r1, #8
 80021fa:	4864      	ldr	r0, [pc, #400]	@ (800238c <readGRAM+0x29c>)
 80021fc:	f7fe fb8c 	bl	8000918 <PIN_LOW>
 8002200:	2108      	movs	r1, #8
 8002202:	4862      	ldr	r0, [pc, #392]	@ (800238c <readGRAM+0x29c>)
 8002204:	f7fe fb88 	bl	8000918 <PIN_LOW>
 8002208:	2108      	movs	r1, #8
 800220a:	4860      	ldr	r0, [pc, #384]	@ (800238c <readGRAM+0x29c>)
 800220c:	f7fe fb94 	bl	8000938 <PIN_HIGH>
 8002210:	2108      	movs	r1, #8
 8002212:	485e      	ldr	r0, [pc, #376]	@ (800238c <readGRAM+0x29c>)
 8002214:	f7fe fb90 	bl	8000938 <PIN_HIGH>
 8002218:	4b5c      	ldr	r3, [pc, #368]	@ (800238c <readGRAM+0x29c>)
 800221a:	4a5d      	ldr	r2, [pc, #372]	@ (8002390 <readGRAM+0x2a0>)
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	4b5d      	ldr	r3, [pc, #372]	@ (8002394 <readGRAM+0x2a4>)
 8002220:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8002224:	619a      	str	r2, [r3, #24]
 8002226:	7f3b      	ldrb	r3, [r7, #28]
 8002228:	035b      	lsls	r3, r3, #13
 800222a:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800222e:	7f3b      	ldrb	r3, [r7, #28]
 8002230:	109b      	asrs	r3, r3, #2
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	431a      	orrs	r2, r3
 8002238:	4b54      	ldr	r3, [pc, #336]	@ (800238c <readGRAM+0x29c>)
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	7f3b      	ldrb	r3, [r7, #28]
 800223e:	4a55      	ldr	r2, [pc, #340]	@ (8002394 <readGRAM+0x2a4>)
 8002240:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8002244:	6193      	str	r3, [r2, #24]
 8002246:	2108      	movs	r1, #8
 8002248:	4850      	ldr	r0, [pc, #320]	@ (800238c <readGRAM+0x29c>)
 800224a:	f7fe fb65 	bl	8000918 <PIN_LOW>
 800224e:	2108      	movs	r1, #8
 8002250:	484e      	ldr	r0, [pc, #312]	@ (800238c <readGRAM+0x29c>)
 8002252:	f7fe fb61 	bl	8000918 <PIN_LOW>
 8002256:	2108      	movs	r1, #8
 8002258:	484c      	ldr	r0, [pc, #304]	@ (800238c <readGRAM+0x29c>)
 800225a:	f7fe fb5d 	bl	8000918 <PIN_LOW>
 800225e:	2108      	movs	r1, #8
 8002260:	484a      	ldr	r0, [pc, #296]	@ (800238c <readGRAM+0x29c>)
 8002262:	f7fe fb69 	bl	8000938 <PIN_HIGH>
 8002266:	2108      	movs	r1, #8
 8002268:	4848      	ldr	r0, [pc, #288]	@ (800238c <readGRAM+0x29c>)
 800226a:	f7fe fb65 	bl	8000938 <PIN_HIGH>
 800226e:	2104      	movs	r1, #4
 8002270:	4846      	ldr	r0, [pc, #280]	@ (800238c <readGRAM+0x29c>)
 8002272:	f7fe fb61 	bl	8000938 <PIN_HIGH>
        setReadDir();
 8002276:	f7fe fc89 	bl	8000b8c <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800227a:	4b40      	ldr	r3, [pc, #256]	@ (800237c <readGRAM+0x28c>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8162 	bne.w	800254c <readGRAM+0x45c>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002288:	4b3c      	ldr	r3, [pc, #240]	@ (800237c <readGRAM+0x28c>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <readGRAM+0x1b0>
 8002294:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <readGRAM+0x290>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f241 2289 	movw	r2, #4745	@ 0x1289
 800229c:	4293      	cmp	r3, r2
 800229e:	d17b      	bne.n	8002398 <readGRAM+0x2a8>
            READ_8(r);
 80022a0:	2110      	movs	r1, #16
 80022a2:	483a      	ldr	r0, [pc, #232]	@ (800238c <readGRAM+0x29c>)
 80022a4:	f7fe fb48 	bl	8000938 <PIN_HIGH>
 80022a8:	2110      	movs	r1, #16
 80022aa:	4838      	ldr	r0, [pc, #224]	@ (800238c <readGRAM+0x29c>)
 80022ac:	f7fe fb34 	bl	8000918 <PIN_LOW>
 80022b0:	2110      	movs	r1, #16
 80022b2:	4836      	ldr	r0, [pc, #216]	@ (800238c <readGRAM+0x29c>)
 80022b4:	f7fe fb30 	bl	8000918 <PIN_LOW>
 80022b8:	2110      	movs	r1, #16
 80022ba:	4834      	ldr	r0, [pc, #208]	@ (800238c <readGRAM+0x29c>)
 80022bc:	f7fe fb2c 	bl	8000918 <PIN_LOW>
 80022c0:	2110      	movs	r1, #16
 80022c2:	4832      	ldr	r0, [pc, #200]	@ (800238c <readGRAM+0x29c>)
 80022c4:	f7fe fb28 	bl	8000918 <PIN_LOW>
 80022c8:	2110      	movs	r1, #16
 80022ca:	4830      	ldr	r0, [pc, #192]	@ (800238c <readGRAM+0x29c>)
 80022cc:	f7fe fb24 	bl	8000918 <PIN_LOW>
 80022d0:	2110      	movs	r1, #16
 80022d2:	482e      	ldr	r0, [pc, #184]	@ (800238c <readGRAM+0x29c>)
 80022d4:	f7fe fb20 	bl	8000918 <PIN_LOW>
 80022d8:	2110      	movs	r1, #16
 80022da:	482c      	ldr	r0, [pc, #176]	@ (800238c <readGRAM+0x29c>)
 80022dc:	f7fe fb1c 	bl	8000918 <PIN_LOW>
 80022e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002394 <readGRAM+0x2a4>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b29      	ldr	r3, [pc, #164]	@ (8002394 <readGRAM+0x2a4>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <readGRAM+0x29c>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	0b5b      	lsrs	r3, r3, #13
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <readGRAM+0x2a4>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <readGRAM+0x2a4>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <readGRAM+0x2a4>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <readGRAM+0x2a4>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <readGRAM+0x29c>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	75fb      	strb	r3, [r7, #23]
 8002362:	2110      	movs	r1, #16
 8002364:	4809      	ldr	r0, [pc, #36]	@ (800238c <readGRAM+0x29c>)
 8002366:	f7fe fae7 	bl	8000938 <PIN_HIGH>
 800236a:	2110      	movs	r1, #16
 800236c:	4807      	ldr	r0, [pc, #28]	@ (800238c <readGRAM+0x29c>)
 800236e:	f7fe fae3 	bl	8000938 <PIN_HIGH>
 8002372:	e0eb      	b.n	800254c <readGRAM+0x45c>
 8002374:	20000098 	.word	0x20000098
 8002378:	20000083 	.word	0x20000083
 800237c:	2000008c 	.word	0x2000008c
 8002380:	2000008e 	.word	0x2000008e
 8002384:	20000094 	.word	0x20000094
 8002388:	20000096 	.word	0x20000096
 800238c:	40020000 	.word	0x40020000
 8002390:	80200000 	.word	0x80200000
 8002394:	40020400 	.word	0x40020400
        } else {
            READ_16(dummy);
 8002398:	2110      	movs	r1, #16
 800239a:	48a5      	ldr	r0, [pc, #660]	@ (8002630 <readGRAM+0x540>)
 800239c:	f7fe facc 	bl	8000938 <PIN_HIGH>
 80023a0:	2110      	movs	r1, #16
 80023a2:	48a3      	ldr	r0, [pc, #652]	@ (8002630 <readGRAM+0x540>)
 80023a4:	f7fe fab8 	bl	8000918 <PIN_LOW>
 80023a8:	2110      	movs	r1, #16
 80023aa:	48a1      	ldr	r0, [pc, #644]	@ (8002630 <readGRAM+0x540>)
 80023ac:	f7fe fab4 	bl	8000918 <PIN_LOW>
 80023b0:	2110      	movs	r1, #16
 80023b2:	489f      	ldr	r0, [pc, #636]	@ (8002630 <readGRAM+0x540>)
 80023b4:	f7fe fab0 	bl	8000918 <PIN_LOW>
 80023b8:	2110      	movs	r1, #16
 80023ba:	489d      	ldr	r0, [pc, #628]	@ (8002630 <readGRAM+0x540>)
 80023bc:	f7fe faac 	bl	8000918 <PIN_LOW>
 80023c0:	2110      	movs	r1, #16
 80023c2:	489b      	ldr	r0, [pc, #620]	@ (8002630 <readGRAM+0x540>)
 80023c4:	f7fe faa8 	bl	8000918 <PIN_LOW>
 80023c8:	2110      	movs	r1, #16
 80023ca:	4899      	ldr	r0, [pc, #612]	@ (8002630 <readGRAM+0x540>)
 80023cc:	f7fe faa4 	bl	8000918 <PIN_LOW>
 80023d0:	2110      	movs	r1, #16
 80023d2:	4897      	ldr	r0, [pc, #604]	@ (8002630 <readGRAM+0x540>)
 80023d4:	f7fe faa0 	bl	8000918 <PIN_LOW>
 80023d8:	4b96      	ldr	r3, [pc, #600]	@ (8002634 <readGRAM+0x544>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b93      	ldr	r3, [pc, #588]	@ (8002634 <readGRAM+0x544>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002630 <readGRAM+0x540>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	0b5b      	lsrs	r3, r3, #13
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b8b      	ldr	r3, [pc, #556]	@ (8002634 <readGRAM+0x544>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b87      	ldr	r3, [pc, #540]	@ (8002634 <readGRAM+0x544>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b83      	ldr	r3, [pc, #524]	@ (8002634 <readGRAM+0x544>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b7f      	ldr	r3, [pc, #508]	@ (8002634 <readGRAM+0x544>)
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b7a      	ldr	r3, [pc, #488]	@ (8002630 <readGRAM+0x540>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	76fb      	strb	r3, [r7, #27]
 800245a:	2110      	movs	r1, #16
 800245c:	4874      	ldr	r0, [pc, #464]	@ (8002630 <readGRAM+0x540>)
 800245e:	f7fe fa6b 	bl	8000938 <PIN_HIGH>
 8002462:	2110      	movs	r1, #16
 8002464:	4872      	ldr	r0, [pc, #456]	@ (8002630 <readGRAM+0x540>)
 8002466:	f7fe fa67 	bl	8000938 <PIN_HIGH>
 800246a:	2110      	movs	r1, #16
 800246c:	4870      	ldr	r0, [pc, #448]	@ (8002630 <readGRAM+0x540>)
 800246e:	f7fe fa63 	bl	8000938 <PIN_HIGH>
 8002472:	2110      	movs	r1, #16
 8002474:	486e      	ldr	r0, [pc, #440]	@ (8002630 <readGRAM+0x540>)
 8002476:	f7fe fa4f 	bl	8000918 <PIN_LOW>
 800247a:	2110      	movs	r1, #16
 800247c:	486c      	ldr	r0, [pc, #432]	@ (8002630 <readGRAM+0x540>)
 800247e:	f7fe fa4b 	bl	8000918 <PIN_LOW>
 8002482:	2110      	movs	r1, #16
 8002484:	486a      	ldr	r0, [pc, #424]	@ (8002630 <readGRAM+0x540>)
 8002486:	f7fe fa47 	bl	8000918 <PIN_LOW>
 800248a:	2110      	movs	r1, #16
 800248c:	4868      	ldr	r0, [pc, #416]	@ (8002630 <readGRAM+0x540>)
 800248e:	f7fe fa43 	bl	8000918 <PIN_LOW>
 8002492:	2110      	movs	r1, #16
 8002494:	4866      	ldr	r0, [pc, #408]	@ (8002630 <readGRAM+0x540>)
 8002496:	f7fe fa3f 	bl	8000918 <PIN_LOW>
 800249a:	2110      	movs	r1, #16
 800249c:	4864      	ldr	r0, [pc, #400]	@ (8002630 <readGRAM+0x540>)
 800249e:	f7fe fa3b 	bl	8000918 <PIN_LOW>
 80024a2:	2110      	movs	r1, #16
 80024a4:	4862      	ldr	r0, [pc, #392]	@ (8002630 <readGRAM+0x540>)
 80024a6:	f7fe fa37 	bl	8000918 <PIN_LOW>
 80024aa:	4b62      	ldr	r3, [pc, #392]	@ (8002634 <readGRAM+0x544>)
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002634 <readGRAM+0x544>)
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002630 <readGRAM+0x540>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	0b5b      	lsrs	r3, r3, #13
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b56      	ldr	r3, [pc, #344]	@ (8002634 <readGRAM+0x544>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b52      	ldr	r3, [pc, #328]	@ (8002634 <readGRAM+0x544>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002634 <readGRAM+0x544>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	b29b      	uxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <readGRAM+0x544>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002512:	b29b      	uxth	r3, r3
 8002514:	4313      	orrs	r3, r2
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b45      	ldr	r3, [pc, #276]	@ (8002630 <readGRAM+0x540>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	b29b      	uxth	r3, r3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	b29b      	uxth	r3, r3
 8002522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002526:	b29b      	uxth	r3, r3
 8002528:	4313      	orrs	r3, r2
 800252a:	833b      	strh	r3, [r7, #24]
 800252c:	2110      	movs	r1, #16
 800252e:	4840      	ldr	r0, [pc, #256]	@ (8002630 <readGRAM+0x540>)
 8002530:	f7fe fa02 	bl	8000938 <PIN_HIGH>
 8002534:	2110      	movs	r1, #16
 8002536:	483e      	ldr	r0, [pc, #248]	@ (8002630 <readGRAM+0x540>)
 8002538:	f7fe f9fe 	bl	8000938 <PIN_HIGH>
 800253c:	7efb      	ldrb	r3, [r7, #27]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	b21a      	sxth	r2, r3
 8002542:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	b21b      	sxth	r3, r3
 800254a:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 800254c:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <readGRAM+0x548>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002554:	4293      	cmp	r3, r2
 8002556:	f040 82ee 	bne.w	8002b36 <readGRAM+0xa46>
 800255a:	2110      	movs	r1, #16
 800255c:	4834      	ldr	r0, [pc, #208]	@ (8002630 <readGRAM+0x540>)
 800255e:	f7fe f9eb 	bl	8000938 <PIN_HIGH>
 8002562:	2110      	movs	r1, #16
 8002564:	4832      	ldr	r0, [pc, #200]	@ (8002630 <readGRAM+0x540>)
 8002566:	f7fe f9d7 	bl	8000918 <PIN_LOW>
 800256a:	2110      	movs	r1, #16
 800256c:	4830      	ldr	r0, [pc, #192]	@ (8002630 <readGRAM+0x540>)
 800256e:	f7fe f9d3 	bl	8000918 <PIN_LOW>
 8002572:	2110      	movs	r1, #16
 8002574:	482e      	ldr	r0, [pc, #184]	@ (8002630 <readGRAM+0x540>)
 8002576:	f7fe f9cf 	bl	8000918 <PIN_LOW>
 800257a:	2110      	movs	r1, #16
 800257c:	482c      	ldr	r0, [pc, #176]	@ (8002630 <readGRAM+0x540>)
 800257e:	f7fe f9cb 	bl	8000918 <PIN_LOW>
 8002582:	2110      	movs	r1, #16
 8002584:	482a      	ldr	r0, [pc, #168]	@ (8002630 <readGRAM+0x540>)
 8002586:	f7fe f9c7 	bl	8000918 <PIN_LOW>
 800258a:	2110      	movs	r1, #16
 800258c:	4828      	ldr	r0, [pc, #160]	@ (8002630 <readGRAM+0x540>)
 800258e:	f7fe f9c3 	bl	8000918 <PIN_LOW>
 8002592:	2110      	movs	r1, #16
 8002594:	4826      	ldr	r0, [pc, #152]	@ (8002630 <readGRAM+0x540>)
 8002596:	f7fe f9bf 	bl	8000918 <PIN_LOW>
 800259a:	4b26      	ldr	r3, [pc, #152]	@ (8002634 <readGRAM+0x544>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <readGRAM+0x544>)
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <readGRAM+0x540>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	0b5b      	lsrs	r3, r3, #13
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <readGRAM+0x544>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <readGRAM+0x544>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <readGRAM+0x544>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <readGRAM+0x544>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	b2db      	uxtb	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <readGRAM+0x540>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	2110      	movs	r1, #16
 800261e:	4804      	ldr	r0, [pc, #16]	@ (8002630 <readGRAM+0x540>)
 8002620:	f7fe f98a 	bl	8000938 <PIN_HIGH>
 8002624:	2110      	movs	r1, #16
 8002626:	4802      	ldr	r0, [pc, #8]	@ (8002630 <readGRAM+0x540>)
 8002628:	f7fe f986 	bl	8000938 <PIN_HIGH>
        while (n)
 800262c:	e283      	b.n	8002b36 <readGRAM+0xa46>
 800262e:	bf00      	nop
 8002630:	40020000 	.word	0x40020000
 8002634:	40020400 	.word	0x40020400
 8002638:	2000008e 	.word	0x2000008e
        {
            if (_lcd_capable & READ_24BITS)
 800263c:	4ba8      	ldr	r3, [pc, #672]	@ (80028e0 <readGRAM+0x7f0>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 815a 	beq.w	80028fe <readGRAM+0x80e>
            {
                READ_8(r);
 800264a:	2110      	movs	r1, #16
 800264c:	48a5      	ldr	r0, [pc, #660]	@ (80028e4 <readGRAM+0x7f4>)
 800264e:	f7fe f973 	bl	8000938 <PIN_HIGH>
 8002652:	2110      	movs	r1, #16
 8002654:	48a3      	ldr	r0, [pc, #652]	@ (80028e4 <readGRAM+0x7f4>)
 8002656:	f7fe f95f 	bl	8000918 <PIN_LOW>
 800265a:	2110      	movs	r1, #16
 800265c:	48a1      	ldr	r0, [pc, #644]	@ (80028e4 <readGRAM+0x7f4>)
 800265e:	f7fe f95b 	bl	8000918 <PIN_LOW>
 8002662:	2110      	movs	r1, #16
 8002664:	489f      	ldr	r0, [pc, #636]	@ (80028e4 <readGRAM+0x7f4>)
 8002666:	f7fe f957 	bl	8000918 <PIN_LOW>
 800266a:	2110      	movs	r1, #16
 800266c:	489d      	ldr	r0, [pc, #628]	@ (80028e4 <readGRAM+0x7f4>)
 800266e:	f7fe f953 	bl	8000918 <PIN_LOW>
 8002672:	2110      	movs	r1, #16
 8002674:	489b      	ldr	r0, [pc, #620]	@ (80028e4 <readGRAM+0x7f4>)
 8002676:	f7fe f94f 	bl	8000918 <PIN_LOW>
 800267a:	2110      	movs	r1, #16
 800267c:	4899      	ldr	r0, [pc, #612]	@ (80028e4 <readGRAM+0x7f4>)
 800267e:	f7fe f94b 	bl	8000918 <PIN_LOW>
 8002682:	2110      	movs	r1, #16
 8002684:	4897      	ldr	r0, [pc, #604]	@ (80028e4 <readGRAM+0x7f4>)
 8002686:	f7fe f947 	bl	8000918 <PIN_LOW>
 800268a:	4b97      	ldr	r3, [pc, #604]	@ (80028e8 <readGRAM+0x7f8>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b94      	ldr	r3, [pc, #592]	@ (80028e8 <readGRAM+0x7f8>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b8f      	ldr	r3, [pc, #572]	@ (80028e4 <readGRAM+0x7f4>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	0b5b      	lsrs	r3, r3, #13
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b8b      	ldr	r3, [pc, #556]	@ (80028e8 <readGRAM+0x7f8>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b87      	ldr	r3, [pc, #540]	@ (80028e8 <readGRAM+0x7f8>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b83      	ldr	r3, [pc, #524]	@ (80028e8 <readGRAM+0x7f8>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b7f      	ldr	r3, [pc, #508]	@ (80028e8 <readGRAM+0x7f8>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b7a      	ldr	r3, [pc, #488]	@ (80028e4 <readGRAM+0x7f4>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	75fb      	strb	r3, [r7, #23]
 800270c:	2110      	movs	r1, #16
 800270e:	4875      	ldr	r0, [pc, #468]	@ (80028e4 <readGRAM+0x7f4>)
 8002710:	f7fe f912 	bl	8000938 <PIN_HIGH>
 8002714:	2110      	movs	r1, #16
 8002716:	4873      	ldr	r0, [pc, #460]	@ (80028e4 <readGRAM+0x7f4>)
 8002718:	f7fe f90e 	bl	8000938 <PIN_HIGH>
                READ_8(g);
 800271c:	2110      	movs	r1, #16
 800271e:	4871      	ldr	r0, [pc, #452]	@ (80028e4 <readGRAM+0x7f4>)
 8002720:	f7fe f90a 	bl	8000938 <PIN_HIGH>
 8002724:	2110      	movs	r1, #16
 8002726:	486f      	ldr	r0, [pc, #444]	@ (80028e4 <readGRAM+0x7f4>)
 8002728:	f7fe f8f6 	bl	8000918 <PIN_LOW>
 800272c:	2110      	movs	r1, #16
 800272e:	486d      	ldr	r0, [pc, #436]	@ (80028e4 <readGRAM+0x7f4>)
 8002730:	f7fe f8f2 	bl	8000918 <PIN_LOW>
 8002734:	2110      	movs	r1, #16
 8002736:	486b      	ldr	r0, [pc, #428]	@ (80028e4 <readGRAM+0x7f4>)
 8002738:	f7fe f8ee 	bl	8000918 <PIN_LOW>
 800273c:	2110      	movs	r1, #16
 800273e:	4869      	ldr	r0, [pc, #420]	@ (80028e4 <readGRAM+0x7f4>)
 8002740:	f7fe f8ea 	bl	8000918 <PIN_LOW>
 8002744:	2110      	movs	r1, #16
 8002746:	4867      	ldr	r0, [pc, #412]	@ (80028e4 <readGRAM+0x7f4>)
 8002748:	f7fe f8e6 	bl	8000918 <PIN_LOW>
 800274c:	2110      	movs	r1, #16
 800274e:	4865      	ldr	r0, [pc, #404]	@ (80028e4 <readGRAM+0x7f4>)
 8002750:	f7fe f8e2 	bl	8000918 <PIN_LOW>
 8002754:	2110      	movs	r1, #16
 8002756:	4863      	ldr	r0, [pc, #396]	@ (80028e4 <readGRAM+0x7f4>)
 8002758:	f7fe f8de 	bl	8000918 <PIN_LOW>
 800275c:	4b62      	ldr	r3, [pc, #392]	@ (80028e8 <readGRAM+0x7f8>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b5f      	ldr	r3, [pc, #380]	@ (80028e8 <readGRAM+0x7f8>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4313      	orrs	r3, r2
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b5a      	ldr	r3, [pc, #360]	@ (80028e4 <readGRAM+0x7f4>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	0b5b      	lsrs	r3, r3, #13
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b57      	ldr	r3, [pc, #348]	@ (80028e8 <readGRAM+0x7f8>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <readGRAM+0x7f8>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <readGRAM+0x7f8>)
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b4b      	ldr	r3, [pc, #300]	@ (80028e8 <readGRAM+0x7f8>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <readGRAM+0x7f4>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	757b      	strb	r3, [r7, #21]
 80027de:	2110      	movs	r1, #16
 80027e0:	4840      	ldr	r0, [pc, #256]	@ (80028e4 <readGRAM+0x7f4>)
 80027e2:	f7fe f8a9 	bl	8000938 <PIN_HIGH>
 80027e6:	2110      	movs	r1, #16
 80027e8:	483e      	ldr	r0, [pc, #248]	@ (80028e4 <readGRAM+0x7f4>)
 80027ea:	f7fe f8a5 	bl	8000938 <PIN_HIGH>
                READ_8(b);
 80027ee:	2110      	movs	r1, #16
 80027f0:	483c      	ldr	r0, [pc, #240]	@ (80028e4 <readGRAM+0x7f4>)
 80027f2:	f7fe f8a1 	bl	8000938 <PIN_HIGH>
 80027f6:	2110      	movs	r1, #16
 80027f8:	483a      	ldr	r0, [pc, #232]	@ (80028e4 <readGRAM+0x7f4>)
 80027fa:	f7fe f88d 	bl	8000918 <PIN_LOW>
 80027fe:	2110      	movs	r1, #16
 8002800:	4838      	ldr	r0, [pc, #224]	@ (80028e4 <readGRAM+0x7f4>)
 8002802:	f7fe f889 	bl	8000918 <PIN_LOW>
 8002806:	2110      	movs	r1, #16
 8002808:	4836      	ldr	r0, [pc, #216]	@ (80028e4 <readGRAM+0x7f4>)
 800280a:	f7fe f885 	bl	8000918 <PIN_LOW>
 800280e:	2110      	movs	r1, #16
 8002810:	4834      	ldr	r0, [pc, #208]	@ (80028e4 <readGRAM+0x7f4>)
 8002812:	f7fe f881 	bl	8000918 <PIN_LOW>
 8002816:	2110      	movs	r1, #16
 8002818:	4832      	ldr	r0, [pc, #200]	@ (80028e4 <readGRAM+0x7f4>)
 800281a:	f7fe f87d 	bl	8000918 <PIN_LOW>
 800281e:	2110      	movs	r1, #16
 8002820:	4830      	ldr	r0, [pc, #192]	@ (80028e4 <readGRAM+0x7f4>)
 8002822:	f7fe f879 	bl	8000918 <PIN_LOW>
 8002826:	2110      	movs	r1, #16
 8002828:	482e      	ldr	r0, [pc, #184]	@ (80028e4 <readGRAM+0x7f4>)
 800282a:	f7fe f875 	bl	8000918 <PIN_LOW>
 800282e:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <readGRAM+0x7f8>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <readGRAM+0x7f8>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4313      	orrs	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <readGRAM+0x7f4>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <readGRAM+0x7f8>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b1e      	ldr	r3, [pc, #120]	@ (80028e8 <readGRAM+0x7f8>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <readGRAM+0x7f8>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <readGRAM+0x7f8>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <readGRAM+0x7f4>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4313      	orrs	r3, r2
 80028ae:	753b      	strb	r3, [r7, #20]
 80028b0:	2110      	movs	r1, #16
 80028b2:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <readGRAM+0x7f4>)
 80028b4:	f7fe f840 	bl	8000938 <PIN_HIGH>
 80028b8:	2110      	movs	r1, #16
 80028ba:	480a      	ldr	r0, [pc, #40]	@ (80028e4 <readGRAM+0x7f4>)
 80028bc:	f7fe f83c 	bl	8000938 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <readGRAM+0x7f0>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00f      	beq.n	80028ec <readGRAM+0x7fc>
                    ret = color565(b, g, r);
 80028cc:	7dfa      	ldrb	r2, [r7, #23]
 80028ce:	7d79      	ldrb	r1, [r7, #21]
 80028d0:	7d3b      	ldrb	r3, [r7, #20]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f8f7 	bl	8000ac6 <color565>
 80028d8:	4603      	mov	r3, r0
 80028da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80028dc:	e110      	b.n	8002b00 <readGRAM+0xa10>
 80028de:	bf00      	nop
 80028e0:	2000008c 	.word	0x2000008c
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
                else
                    ret = color565(r, g, b);
 80028ec:	7d3a      	ldrb	r2, [r7, #20]
 80028ee:	7d79      	ldrb	r1, [r7, #21]
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f8e7 	bl	8000ac6 <color565>
 80028f8:	4603      	mov	r3, r0
 80028fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80028fc:	e100      	b.n	8002b00 <readGRAM+0xa10>
            } else
            {
                READ_16(ret);
 80028fe:	2110      	movs	r1, #16
 8002900:	4890      	ldr	r0, [pc, #576]	@ (8002b44 <readGRAM+0xa54>)
 8002902:	f7fe f819 	bl	8000938 <PIN_HIGH>
 8002906:	2110      	movs	r1, #16
 8002908:	488e      	ldr	r0, [pc, #568]	@ (8002b44 <readGRAM+0xa54>)
 800290a:	f7fe f805 	bl	8000918 <PIN_LOW>
 800290e:	2110      	movs	r1, #16
 8002910:	488c      	ldr	r0, [pc, #560]	@ (8002b44 <readGRAM+0xa54>)
 8002912:	f7fe f801 	bl	8000918 <PIN_LOW>
 8002916:	2110      	movs	r1, #16
 8002918:	488a      	ldr	r0, [pc, #552]	@ (8002b44 <readGRAM+0xa54>)
 800291a:	f7fd fffd 	bl	8000918 <PIN_LOW>
 800291e:	2110      	movs	r1, #16
 8002920:	4888      	ldr	r0, [pc, #544]	@ (8002b44 <readGRAM+0xa54>)
 8002922:	f7fd fff9 	bl	8000918 <PIN_LOW>
 8002926:	2110      	movs	r1, #16
 8002928:	4886      	ldr	r0, [pc, #536]	@ (8002b44 <readGRAM+0xa54>)
 800292a:	f7fd fff5 	bl	8000918 <PIN_LOW>
 800292e:	2110      	movs	r1, #16
 8002930:	4884      	ldr	r0, [pc, #528]	@ (8002b44 <readGRAM+0xa54>)
 8002932:	f7fd fff1 	bl	8000918 <PIN_LOW>
 8002936:	2110      	movs	r1, #16
 8002938:	4882      	ldr	r0, [pc, #520]	@ (8002b44 <readGRAM+0xa54>)
 800293a:	f7fd ffed 	bl	8000918 <PIN_LOW>
 800293e:	4b82      	ldr	r3, [pc, #520]	@ (8002b48 <readGRAM+0xa58>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b48 <readGRAM+0xa58>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b44 <readGRAM+0xa54>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	0b5b      	lsrs	r3, r3, #13
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4313      	orrs	r3, r2
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <readGRAM+0xa58>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <readGRAM+0xa58>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4313      	orrs	r3, r2
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b48 <readGRAM+0xa58>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4313      	orrs	r3, r2
 800299a:	b2da      	uxtb	r2, r3
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <readGRAM+0xa58>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b65      	ldr	r3, [pc, #404]	@ (8002b44 <readGRAM+0xa54>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	75bb      	strb	r3, [r7, #22]
 80029c0:	2110      	movs	r1, #16
 80029c2:	4860      	ldr	r0, [pc, #384]	@ (8002b44 <readGRAM+0xa54>)
 80029c4:	f7fd ffb8 	bl	8000938 <PIN_HIGH>
 80029c8:	2110      	movs	r1, #16
 80029ca:	485e      	ldr	r0, [pc, #376]	@ (8002b44 <readGRAM+0xa54>)
 80029cc:	f7fd ffb4 	bl	8000938 <PIN_HIGH>
 80029d0:	2110      	movs	r1, #16
 80029d2:	485c      	ldr	r0, [pc, #368]	@ (8002b44 <readGRAM+0xa54>)
 80029d4:	f7fd ffb0 	bl	8000938 <PIN_HIGH>
 80029d8:	2110      	movs	r1, #16
 80029da:	485a      	ldr	r0, [pc, #360]	@ (8002b44 <readGRAM+0xa54>)
 80029dc:	f7fd ff9c 	bl	8000918 <PIN_LOW>
 80029e0:	2110      	movs	r1, #16
 80029e2:	4858      	ldr	r0, [pc, #352]	@ (8002b44 <readGRAM+0xa54>)
 80029e4:	f7fd ff98 	bl	8000918 <PIN_LOW>
 80029e8:	2110      	movs	r1, #16
 80029ea:	4856      	ldr	r0, [pc, #344]	@ (8002b44 <readGRAM+0xa54>)
 80029ec:	f7fd ff94 	bl	8000918 <PIN_LOW>
 80029f0:	2110      	movs	r1, #16
 80029f2:	4854      	ldr	r0, [pc, #336]	@ (8002b44 <readGRAM+0xa54>)
 80029f4:	f7fd ff90 	bl	8000918 <PIN_LOW>
 80029f8:	2110      	movs	r1, #16
 80029fa:	4852      	ldr	r0, [pc, #328]	@ (8002b44 <readGRAM+0xa54>)
 80029fc:	f7fd ff8c 	bl	8000918 <PIN_LOW>
 8002a00:	2110      	movs	r1, #16
 8002a02:	4850      	ldr	r0, [pc, #320]	@ (8002b44 <readGRAM+0xa54>)
 8002a04:	f7fd ff88 	bl	8000918 <PIN_LOW>
 8002a08:	2110      	movs	r1, #16
 8002a0a:	484e      	ldr	r0, [pc, #312]	@ (8002b44 <readGRAM+0xa54>)
 8002a0c:	f7fd ff84 	bl	8000918 <PIN_LOW>
 8002a10:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <readGRAM+0xa58>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <readGRAM+0xa58>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b45      	ldr	r3, [pc, #276]	@ (8002b44 <readGRAM+0xa54>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	0b5b      	lsrs	r3, r3, #13
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b42      	ldr	r3, [pc, #264]	@ (8002b48 <readGRAM+0xa58>)
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b48 <readGRAM+0xa58>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <readGRAM+0xa58>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <readGRAM+0xa58>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <readGRAM+0xa54>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a92:	2110      	movs	r1, #16
 8002a94:	482b      	ldr	r0, [pc, #172]	@ (8002b44 <readGRAM+0xa54>)
 8002a96:	f7fd ff4f 	bl	8000938 <PIN_HIGH>
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	4829      	ldr	r0, [pc, #164]	@ (8002b44 <readGRAM+0xa54>)
 8002a9e:	f7fd ff4b 	bl	8000938 <PIN_HIGH>
 8002aa2:	7dbb      	ldrb	r3, [r7, #22]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8002ab2:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <readGRAM+0xa5c>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <readGRAM+0x9e2>
                    ret = (ret >> 8) | (ret << 8);
 8002abe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b21b      	sxth	r3, r3
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (_lcd_capable & READ_BGR)
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <readGRAM+0xa5c>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <readGRAM+0xa10>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002ade:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002ae2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002ae6:	b21a      	sxth	r2, r3
 8002ae8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aea:	0adb      	lsrs	r3, r3, #11
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b21b      	sxth	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b21a      	sxth	r2, r3
 8002af4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002af6:	02db      	lsls	r3, r3, #11
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	b21b      	sxth	r3, r3
 8002afe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <readGRAM+0xa60>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <readGRAM+0xa24>
 8002b08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd ff8a 	bl	8000a24 <color555_to_565>
 8002b10:	4603      	mov	r3, r0
 8002b12:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif
            *block++ = ret;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1c9a      	adds	r2, r3, #2
 8002b18:	60ba      	str	r2, [r7, #8]
 8002b1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b1c:	801a      	strh	r2, [r3, #0]
            n--;
 8002b1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <readGRAM+0xa5c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <readGRAM+0xa64>
        while (n)
 8002b36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f47f ad7e 	bne.w	800263c <readGRAM+0x54c>
 8002b40:	e009      	b.n	8002b56 <readGRAM+0xa66>
 8002b42:	bf00      	nop
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	2000008c 	.word	0x2000008c
 8002b50:	20000084 	.word	0x20000084
                break;
 8002b54:	bf00      	nop
        }
        if (++col >= w) {
 8002b56:	8bfb      	ldrh	r3, [r7, #30]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	83fb      	strh	r3, [r7, #30]
 8002b5e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	db0d      	blt.n	8002b86 <readGRAM+0xa96>
            col = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8002b6e:	8c3b      	ldrh	r3, [r7, #32]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	843b      	strh	r3, [r7, #32]
 8002b76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002b7a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	db01      	blt.n	8002b86 <readGRAM+0xa96>
                row = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8002b86:	2110      	movs	r1, #16
 8002b88:	4814      	ldr	r0, [pc, #80]	@ (8002bdc <readGRAM+0xaec>)
 8002b8a:	f7fd fed5 	bl	8000938 <PIN_HIGH>
        CS_IDLE;
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4812      	ldr	r0, [pc, #72]	@ (8002bdc <readGRAM+0xaec>)
 8002b92:	f7fd fed1 	bl	8000938 <PIN_HIGH>
        setWriteDir();
 8002b96:	f7fe f823 	bl	8000be0 <setWriteDir>
    while (n > 0) {
 8002b9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f73f aae9 	bgt.w	8002176 <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <readGRAM+0xaf0>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d110      	bne.n	8002bd2 <readGRAM+0xae2>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002bb0:	f7fd ff00 	bl	80009b4 <width>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b21c      	sxth	r4, r3
 8002bbc:	f7fd ff06 	bl	80009cc <height>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	4622      	mov	r2, r4
 8002bca:	2100      	movs	r1, #0
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f000 fb57 	bl	8003280 <setAddrWindow>
    return 0;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	372c      	adds	r7, #44	@ 0x2c
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	2000008c 	.word	0x2000008c

08002be4 <setRotation>:

void setRotation(uint8_t r)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8002bee:	4b9c      	ldr	r3, [pc, #624]	@ (8002e60 <setRotation+0x27c>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b99      	ldr	r3, [pc, #612]	@ (8002e64 <setRotation+0x280>)
 8002bfe:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8002c00:	4b98      	ldr	r3, [pc, #608]	@ (8002e64 <setRotation+0x280>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <setRotation+0x2e>
 8002c0c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002c10:	e000      	b.n	8002c14 <setRotation+0x30>
 8002c12:	22f0      	movs	r2, #240	@ 0xf0
 8002c14:	4b94      	ldr	r3, [pc, #592]	@ (8002e68 <setRotation+0x284>)
 8002c16:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8002c18:	4b92      	ldr	r3, [pc, #584]	@ (8002e64 <setRotation+0x280>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <setRotation+0x44>
 8002c24:	22f0      	movs	r2, #240	@ 0xf0
 8002c26:	e001      	b.n	8002c2c <setRotation+0x48>
 8002c28:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e6c <setRotation+0x288>)
 8002c2e:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8002c30:	4b8c      	ldr	r3, [pc, #560]	@ (8002e64 <setRotation+0x280>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d817      	bhi.n	8002c68 <setRotation+0x84>
 8002c38:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <setRotation+0x5c>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c57 	.word	0x08002c57
 8002c48:	08002c5d 	.word	0x08002c5d
 8002c4c:	08002c63 	.word	0x08002c63
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002c50:	2348      	movs	r3, #72	@ 0x48
 8002c52:	72fb      	strb	r3, [r7, #11]
       break;
 8002c54:	e008      	b.n	8002c68 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8002c56:	2328      	movs	r3, #40	@ 0x28
 8002c58:	72fb      	strb	r3, [r7, #11]
       break;
 8002c5a:	e005      	b.n	8002c68 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002c5c:	2398      	movs	r3, #152	@ 0x98
 8002c5e:	72fb      	strb	r3, [r7, #11]
       break;
 8002c60:	e002      	b.n	8002c68 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8002c62:	23f8      	movs	r3, #248	@ 0xf8
 8002c64:	72fb      	strb	r3, [r7, #11]
       break;
 8002c66:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002c68:	4b81      	ldr	r3, [pc, #516]	@ (8002e70 <setRotation+0x28c>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <setRotation+0x9c>
       val ^= 0x80;
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002c80:	4b7b      	ldr	r3, [pc, #492]	@ (8002e70 <setRotation+0x28c>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <setRotation+0xb2>
       val ^= 0x40;
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8002c96:	4b76      	ldr	r3, [pc, #472]	@ (8002e70 <setRotation+0x28c>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <setRotation+0xc8>
       val ^= 0x08;
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	f083 0308 	eor.w	r3, r3, #8
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002cac:	4b70      	ldr	r3, [pc, #448]	@ (8002e70 <setRotation+0x28c>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8119 	beq.w	8002eec <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002cba:	4b6e      	ldr	r3, [pc, #440]	@ (8002e74 <setRotation+0x290>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	f646 0214 	movw	r2, #26644	@ 0x6814
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d128      	bne.n	8002d18 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	105b      	asrs	r3, r3, #1
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	105b      	asrs	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002cf0:	8a3b      	ldrh	r3, [r7, #16]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	89fb      	ldrh	r3, [r7, #14]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8002d04:	233b      	movs	r3, #59	@ 0x3b
 8002d06:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2103      	movs	r1, #3
 8002d10:	20b6      	movs	r0, #182	@ 0xb6
 8002d12:	f7fe f90b 	bl	8000f2c <WriteCmdParamN>
           goto common_MC;
 8002d16:	e0c0      	b.n	8002e9a <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002d18:	4b56      	ldr	r3, [pc, #344]	@ (8002e74 <setRotation+0x290>)
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <setRotation+0x158>
 8002d24:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <setRotation+0x290>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d005      	beq.n	8002d3c <setRotation+0x158>
 8002d30:	4b50      	ldr	r3, [pc, #320]	@ (8002e74 <setRotation+0x290>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d139      	bne.n	8002db0 <setRotation+0x1cc>
           if (val & 0x80)
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da04      	bge.n	8002d4e <setRotation+0x16a>
               val |= 0x01;    //GS
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <setRotation+0x17e>
               val |= 0x02;    //SS
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8002d62:	4b44      	ldr	r3, [pc, #272]	@ (8002e74 <setRotation+0x290>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d104      	bne.n	8002d78 <setRotation+0x194>
 8002d6e:	7afb      	ldrb	r3, [r7, #11]
 8002d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8002d78:	4b3e      	ldr	r3, [pc, #248]	@ (8002e74 <setRotation+0x290>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d104      	bne.n	8002d8e <setRotation+0x1aa>
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	f003 032f 	and.w	r3, r3, #47	@ 0x2f
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8002d8e:	4b39      	ldr	r3, [pc, #228]	@ (8002e74 <setRotation+0x290>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d160      	bne.n	8002e5c <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f023 0310 	bic.w	r3, r3, #16
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8002dae:	e055      	b.n	8002e5c <setRotation+0x278>
      }
       else if (is8347) {
 8002db0:	4b31      	ldr	r3, [pc, #196]	@ (8002e78 <setRotation+0x294>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d06f      	beq.n	8002e98 <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8002db8:	4b30      	ldr	r3, [pc, #192]	@ (8002e7c <setRotation+0x298>)
 8002dba:	2202      	movs	r2, #2
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <setRotation+0x29c>)
 8002dc0:	2206      	movs	r2, #6
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e84 <setRotation+0x2a0>)
 8002dc6:	2222      	movs	r2, #34	@ 0x22
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	4b2f      	ldr	r3, [pc, #188]	@ (8002e88 <setRotation+0x2a4>)
 8002dcc:	2202      	movs	r2, #2
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e8c <setRotation+0x2a8>)
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <setRotation+0x2ac>)
 8002dd8:	2206      	movs	r2, #6
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <setRotation+0x2b0>)
 8002dde:	2208      	movs	r2, #8
 8002de0:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <setRotation+0x290>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	2b65      	cmp	r3, #101	@ 0x65
 8002de8:	d121      	bne.n	8002e2e <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8002df4:	7afb      	ldrb	r3, [r7, #11]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <setRotation+0x226>
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	f083 032c 	eor.w	r3, r3, #44	@ 0x2c
 8002e04:	43db      	mvns	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <setRotation+0x23e>
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <setRotation+0x298>)
 8002e16:	2282      	movs	r2, #130	@ 0x82
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <setRotation+0x29c>)
 8002e1c:	2280      	movs	r2, #128	@ 0x80
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e005      	b.n	8002e2e <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8002e22:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <setRotation+0x298>)
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <setRotation+0x29c>)
 8002e2a:	2282      	movs	r2, #130	@ 0x82
 8002e2c:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <setRotation+0x290>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	f245 2252 	movw	r2, #21074	@ 0x5252
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d145      	bne.n	8002ec6 <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8002e44:	7afb      	ldrb	r3, [r7, #11]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03b      	beq.n	8002ec6 <setRotation+0x2e2>
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	f083 032b 	eor.w	r3, r3, #43	@ 0x2b
 8002e54:	43db      	mvns	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002e5a:	e034      	b.n	8002ec6 <setRotation+0x2e2>
           goto common_MC;
 8002e5c:	bf00      	nop
 8002e5e:	e01c      	b.n	8002e9a <setRotation+0x2b6>
 8002e60:	20000090 	.word	0x20000090
 8002e64:	20000088 	.word	0x20000088
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	20000006 	.word	0x20000006
 8002e70:	2000008c 	.word	0x2000008c
 8002e74:	2000008e 	.word	0x2000008e
 8002e78:	20000083 	.word	0x20000083
 8002e7c:	20000094 	.word	0x20000094
 8002e80:	20000096 	.word	0x20000096
 8002e84:	20000098 	.word	0x20000098
 8002e88:	2000009a 	.word	0x2000009a
 8002e8c:	2000009c 	.word	0x2000009c
 8002e90:	2000009e 	.word	0x2000009e
 8002e94:	200000a0 	.word	0x200000a0
       }
     common_MC:
 8002e98:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8002e9a:	4b8a      	ldr	r3, [pc, #552]	@ (80030c4 <setRotation+0x4e0>)
 8002e9c:	222a      	movs	r2, #42	@ 0x2a
 8002e9e:	801a      	strh	r2, [r3, #0]
 8002ea0:	4b89      	ldr	r3, [pc, #548]	@ (80030c8 <setRotation+0x4e4>)
 8002ea2:	222b      	movs	r2, #43	@ 0x2b
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	4b89      	ldr	r3, [pc, #548]	@ (80030cc <setRotation+0x4e8>)
 8002ea8:	222c      	movs	r2, #44	@ 0x2c
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	4b88      	ldr	r3, [pc, #544]	@ (80030d0 <setRotation+0x4ec>)
 8002eae:	222a      	movs	r2, #42	@ 0x2a
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	4b88      	ldr	r3, [pc, #544]	@ (80030d4 <setRotation+0x4f0>)
 8002eb4:	222a      	movs	r2, #42	@ 0x2a
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	4b87      	ldr	r3, [pc, #540]	@ (80030d8 <setRotation+0x4f4>)
 8002eba:	222b      	movs	r2, #43	@ 0x2b
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	4b87      	ldr	r3, [pc, #540]	@ (80030dc <setRotation+0x4f8>)
 8002ec0:	222b      	movs	r2, #43	@ 0x2b
 8002ec2:	801a      	strh	r2, [r3, #0]
 8002ec4:	e000      	b.n	8002ec8 <setRotation+0x2e4>
			goto common_BGR;
 8002ec6:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8002ec8:	4b85      	ldr	r3, [pc, #532]	@ (80030e0 <setRotation+0x4fc>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <setRotation+0x2f0>
 8002ed0:	2316      	movs	r3, #22
 8002ed2:	e000      	b.n	8002ed6 <setRotation+0x2f2>
 8002ed4:	2336      	movs	r3, #54	@ 0x36
 8002ed6:	f107 020b 	add.w	r2, r7, #11
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe f825 	bl	8000f2c <WriteCmdParamN>
       _lcd_madctl = val;
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80030e4 <setRotation+0x500>)
 8002ee8:	801a      	strh	r2, [r3, #0]
 8002eea:	e0a5      	b.n	8003038 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8002eec:	4b7e      	ldr	r3, [pc, #504]	@ (80030e8 <setRotation+0x504>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <setRotation+0x33c>
 8002ef8:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002efc:	4293      	cmp	r3, r2
 8002efe:	dc4f      	bgt.n	8002fa0 <setRotation+0x3bc>
 8002f00:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <setRotation+0x33c>
 8002f08:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	dc47      	bgt.n	8002fa0 <setRotation+0x3bc>
 8002f10:	f245 4220 	movw	r2, #21536	@ 0x5420
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <setRotation+0x33c>
 8002f18:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d13f      	bne.n	8002fa0 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8002f20:	4b68      	ldr	r3, [pc, #416]	@ (80030c4 <setRotation+0x4e0>)
 8002f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	4b67      	ldr	r3, [pc, #412]	@ (80030c8 <setRotation+0x4e4>)
 8002f2a:	f240 2201 	movw	r2, #513	@ 0x201
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	4b66      	ldr	r3, [pc, #408]	@ (80030cc <setRotation+0x4e8>)
 8002f32:	f240 2202 	movw	r2, #514	@ 0x202
 8002f36:	801a      	strh	r2, [r3, #0]
 8002f38:	4b65      	ldr	r3, [pc, #404]	@ (80030d0 <setRotation+0x4ec>)
 8002f3a:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	4b64      	ldr	r3, [pc, #400]	@ (80030d4 <setRotation+0x4f0>)
 8002f42:	f240 2211 	movw	r2, #529	@ 0x211
 8002f46:	801a      	strh	r2, [r3, #0]
 8002f48:	4b63      	ldr	r3, [pc, #396]	@ (80030d8 <setRotation+0x4f4>)
 8002f4a:	f240 2212 	movw	r2, #530	@ 0x212
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	4b62      	ldr	r3, [pc, #392]	@ (80030dc <setRotation+0x4f8>)
 8002f52:	f240 2213 	movw	r2, #531	@ 0x213
 8002f56:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002f58:	7afb      	ldrb	r3, [r7, #11]
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002f66:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8002f68:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002f6c:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80030e8 <setRotation+0x504>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d005      	beq.n	8002f86 <setRotation+0x3a2>
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80030e8 <setRotation+0x504>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f245 4220 	movw	r2, #21536	@ 0x5420
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d102      	bne.n	8002f8c <setRotation+0x3a8>
 8002f86:	8abb      	ldrh	r3, [r7, #20]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8002f8c:	8a3a      	ldrh	r2, [r7, #16]
 8002f8e:	8abb      	ldrh	r3, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002f9a:	f7fd fdd2 	bl	8000b42 <WriteCmdData>
           goto common_SS;
 8002f9e:	e024      	b.n	8002fea <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8002fa0:	4b48      	ldr	r3, [pc, #288]	@ (80030c4 <setRotation+0x4e0>)
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	4b48      	ldr	r3, [pc, #288]	@ (80030c8 <setRotation+0x4e4>)
 8002fa8:	2221      	movs	r2, #33	@ 0x21
 8002faa:	801a      	strh	r2, [r3, #0]
 8002fac:	4b47      	ldr	r3, [pc, #284]	@ (80030cc <setRotation+0x4e8>)
 8002fae:	2222      	movs	r2, #34	@ 0x22
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <setRotation+0x4ec>)
 8002fb4:	2250      	movs	r2, #80	@ 0x50
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	4b46      	ldr	r3, [pc, #280]	@ (80030d4 <setRotation+0x4f0>)
 8002fba:	2251      	movs	r2, #81	@ 0x51
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	4b46      	ldr	r3, [pc, #280]	@ (80030d8 <setRotation+0x4f4>)
 8002fc0:	2252      	movs	r2, #82	@ 0x52
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	4b45      	ldr	r3, [pc, #276]	@ (80030dc <setRotation+0x4f8>)
 8002fc6:	2253      	movs	r2, #83	@ 0x53
 8002fc8:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002fd4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002fd8:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8002fda:	8a3b      	ldrh	r3, [r7, #16]
 8002fdc:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	2060      	movs	r0, #96	@ 0x60
 8002fe6:	f7fd fdac 	bl	8000b42 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7fd fda1 	bl	8000b42 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	109b      	asrs	r3, r3, #2
 8003004:	b29b      	uxth	r3, r3
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8003016:	8afb      	ldrh	r3, [r7, #22]
 8003018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800301c:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 800301e:	8afb      	ldrh	r3, [r7, #22]
 8003020:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003024:	b29a      	uxth	r2, r3
 8003026:	4b2f      	ldr	r3, [pc, #188]	@ (80030e4 <setRotation+0x500>)
 8003028:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 800302a:	4b2e      	ldr	r3, [pc, #184]	@ (80030e4 <setRotation+0x500>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	4619      	mov	r1, r3
 8003030:	2003      	movs	r0, #3
 8003032:	f7fd fd86 	bl	8000b42 <WriteCmdData>
           break;
 8003036:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003038:	4b2c      	ldr	r3, [pc, #176]	@ (80030ec <setRotation+0x508>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <setRotation+0x4a8>
 8003044:	4b2a      	ldr	r3, [pc, #168]	@ (80030f0 <setRotation+0x50c>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11d      	bne.n	800308c <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8003050:	4b1c      	ldr	r3, [pc, #112]	@ (80030c4 <setRotation+0x4e0>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	81bb      	strh	r3, [r7, #12]
 8003056:	4b1c      	ldr	r3, [pc, #112]	@ (80030c8 <setRotation+0x4e4>)
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <setRotation+0x4e0>)
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	4a1a      	ldr	r2, [pc, #104]	@ (80030c8 <setRotation+0x4e4>)
 8003060:	89bb      	ldrh	r3, [r7, #12]
 8003062:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003064:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <setRotation+0x4ec>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	81bb      	strh	r3, [r7, #12]
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <setRotation+0x4f4>)
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <setRotation+0x4ec>)
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	4a19      	ldr	r2, [pc, #100]	@ (80030d8 <setRotation+0x4f4>)
 8003074:	89bb      	ldrh	r3, [r7, #12]
 8003076:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003078:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <setRotation+0x4f0>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	81bb      	strh	r3, [r7, #12]
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <setRotation+0x4f8>)
 8003080:	881a      	ldrh	r2, [r3, #0]
 8003082:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <setRotation+0x4f0>)
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	4a15      	ldr	r2, [pc, #84]	@ (80030dc <setRotation+0x4f8>)
 8003088:	89bb      	ldrh	r3, [r7, #12]
 800308a:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 800308c:	f7fd fc92 	bl	80009b4 <width>
 8003090:	4603      	mov	r3, r0
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	b21c      	sxth	r4, r3
 8003098:	f7fd fc98 	bl	80009cc <height>
 800309c:	4603      	mov	r3, r0
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	4622      	mov	r2, r4
 80030a6:	2100      	movs	r1, #0
 80030a8:	2000      	movs	r0, #0
 80030aa:	f000 f8e9 	bl	8003280 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80030b4:	2000      	movs	r0, #0
 80030b6:	f000 fa07 	bl	80034c8 <vertScroll>
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000094 	.word	0x20000094
 80030c8:	20000096 	.word	0x20000096
 80030cc:	20000098 	.word	0x20000098
 80030d0:	2000009a 	.word	0x2000009a
 80030d4:	2000009c 	.word	0x2000009c
 80030d8:	2000009e 	.word	0x2000009e
 80030dc:	200000a0 	.word	0x200000a0
 80030e0:	20000083 	.word	0x20000083
 80030e4:	20000092 	.word	0x20000092
 80030e8:	2000008e 	.word	0x2000008e
 80030ec:	20000088 	.word	0x20000088
 80030f0:	2000008c 	.word	0x2000008c

080030f4 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
 80030fe:	460b      	mov	r3, r1
 8003100:	80bb      	strh	r3, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f2c0 80a8 	blt.w	8003260 <drawPixel+0x16c>
 8003110:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f2c0 80a3 	blt.w	8003260 <drawPixel+0x16c>
 800311a:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800311e:	f7fd fc49 	bl	80009b4 <width>
 8003122:	4603      	mov	r3, r0
 8003124:	429c      	cmp	r4, r3
 8003126:	f280 809b 	bge.w	8003260 <drawPixel+0x16c>
 800312a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800312e:	f7fd fc4d 	bl	80009cc <height>
 8003132:	4603      	mov	r3, r0
 8003134:	429c      	cmp	r4, r3
 8003136:	f280 8093 	bge.w	8003260 <drawPixel+0x16c>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 800313a:	4b4b      	ldr	r3, [pc, #300]	@ (8003268 <drawPixel+0x174>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <drawPixel+0x5a>
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fc4d 	bl	80009e4 <color565_to_555>
 800314a:	4603      	mov	r3, r0
 800314c:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 800314e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003156:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800315a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800315e:	f000 f88f 	bl	8003280 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003162:	4b42      	ldr	r3, [pc, #264]	@ (800326c <drawPixel+0x178>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d072      	beq.n	8003250 <drawPixel+0x15c>
 800316a:	2102      	movs	r1, #2
 800316c:	4840      	ldr	r0, [pc, #256]	@ (8003270 <drawPixel+0x17c>)
 800316e:	f7fd fbd3 	bl	8000918 <PIN_LOW>
 8003172:	2104      	movs	r1, #4
 8003174:	483e      	ldr	r0, [pc, #248]	@ (8003270 <drawPixel+0x17c>)
 8003176:	f7fd fbcf 	bl	8000918 <PIN_LOW>
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <drawPixel+0x180>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b29b      	uxth	r3, r3
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <drawPixel+0x180>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	73bb      	strb	r3, [r7, #14]
 800318a:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <drawPixel+0x17c>)
 800318c:	4a3a      	ldr	r2, [pc, #232]	@ (8003278 <drawPixel+0x184>)
 800318e:	619a      	str	r2, [r3, #24]
 8003190:	4b3a      	ldr	r3, [pc, #232]	@ (800327c <drawPixel+0x188>)
 8003192:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8003196:	619a      	str	r2, [r3, #24]
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	035b      	lsls	r3, r3, #13
 800319c:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	109b      	asrs	r3, r3, #2
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	431a      	orrs	r2, r3
 80031aa:	4b31      	ldr	r3, [pc, #196]	@ (8003270 <drawPixel+0x17c>)
 80031ac:	619a      	str	r2, [r3, #24]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	4a32      	ldr	r2, [pc, #200]	@ (800327c <drawPixel+0x188>)
 80031b2:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80031b6:	6193      	str	r3, [r2, #24]
 80031b8:	2108      	movs	r1, #8
 80031ba:	482d      	ldr	r0, [pc, #180]	@ (8003270 <drawPixel+0x17c>)
 80031bc:	f7fd fbac 	bl	8000918 <PIN_LOW>
 80031c0:	2108      	movs	r1, #8
 80031c2:	482b      	ldr	r0, [pc, #172]	@ (8003270 <drawPixel+0x17c>)
 80031c4:	f7fd fba8 	bl	8000918 <PIN_LOW>
 80031c8:	2108      	movs	r1, #8
 80031ca:	4829      	ldr	r0, [pc, #164]	@ (8003270 <drawPixel+0x17c>)
 80031cc:	f7fd fba4 	bl	8000918 <PIN_LOW>
 80031d0:	2108      	movs	r1, #8
 80031d2:	4827      	ldr	r0, [pc, #156]	@ (8003270 <drawPixel+0x17c>)
 80031d4:	f7fd fbb0 	bl	8000938 <PIN_HIGH>
 80031d8:	2108      	movs	r1, #8
 80031da:	4825      	ldr	r0, [pc, #148]	@ (8003270 <drawPixel+0x17c>)
 80031dc:	f7fd fbac 	bl	8000938 <PIN_HIGH>
 80031e0:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <drawPixel+0x17c>)
 80031e2:	4a25      	ldr	r2, [pc, #148]	@ (8003278 <drawPixel+0x184>)
 80031e4:	619a      	str	r2, [r3, #24]
 80031e6:	4b25      	ldr	r3, [pc, #148]	@ (800327c <drawPixel+0x188>)
 80031e8:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	035b      	lsls	r3, r3, #13
 80031f2:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	109b      	asrs	r3, r3, #2
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	431a      	orrs	r2, r3
 8003200:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <drawPixel+0x17c>)
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <drawPixel+0x188>)
 8003208:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 800320c:	6193      	str	r3, [r2, #24]
 800320e:	2108      	movs	r1, #8
 8003210:	4817      	ldr	r0, [pc, #92]	@ (8003270 <drawPixel+0x17c>)
 8003212:	f7fd fb81 	bl	8000918 <PIN_LOW>
 8003216:	2108      	movs	r1, #8
 8003218:	4815      	ldr	r0, [pc, #84]	@ (8003270 <drawPixel+0x17c>)
 800321a:	f7fd fb7d 	bl	8000918 <PIN_LOW>
 800321e:	2108      	movs	r1, #8
 8003220:	4813      	ldr	r0, [pc, #76]	@ (8003270 <drawPixel+0x17c>)
 8003222:	f7fd fb79 	bl	8000918 <PIN_LOW>
 8003226:	2108      	movs	r1, #8
 8003228:	4811      	ldr	r0, [pc, #68]	@ (8003270 <drawPixel+0x17c>)
 800322a:	f7fd fb85 	bl	8000938 <PIN_HIGH>
 800322e:	2108      	movs	r1, #8
 8003230:	480f      	ldr	r0, [pc, #60]	@ (8003270 <drawPixel+0x17c>)
 8003232:	f7fd fb81 	bl	8000938 <PIN_HIGH>
 8003236:	2104      	movs	r1, #4
 8003238:	480d      	ldr	r0, [pc, #52]	@ (8003270 <drawPixel+0x17c>)
 800323a:	f7fd fb7d 	bl	8000938 <PIN_HIGH>
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fcf7 	bl	8000c34 <write24>
 8003246:	2102      	movs	r1, #2
 8003248:	4809      	ldr	r0, [pc, #36]	@ (8003270 <drawPixel+0x17c>)
 800324a:	f7fd fb75 	bl	8000938 <PIN_HIGH>
 800324e:	e008      	b.n	8003262 <drawPixel+0x16e>
   WriteCmdData(_MW, color);
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <drawPixel+0x180>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fc72 	bl	8000b42 <WriteCmdData>
 800325e:	e000      	b.n	8003262 <drawPixel+0x16e>
       return;
 8003260:	bf00      	nop
}
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	20000084 	.word	0x20000084
 800326c:	20000085 	.word	0x20000085
 8003270:	40020000 	.word	0x40020000
 8003274:	20000098 	.word	0x20000098
 8003278:	80200000 	.word	0x80200000
 800327c:	40020400 	.word	0x40020400

08003280 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af02      	add	r7, sp, #8
 8003286:	4604      	mov	r4, r0
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	80fb      	strh	r3, [r7, #6]
 8003292:	4603      	mov	r3, r0
 8003294:	80bb      	strh	r3, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	807b      	strh	r3, [r7, #2]
 800329a:	4613      	mov	r3, r2
 800329c:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800329e:	4b80      	ldr	r3, [pc, #512]	@ (80034a0 <setAddrWindow+0x220>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	f249 3227 	movw	r2, #37671	@ 0x9327
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d117      	bne.n	80032da <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80032aa:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <setAddrWindow+0x224>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <setAddrWindow+0x42>
 80032b2:	88bb      	ldrh	r3, [r7, #4]
 80032b4:	3320      	adds	r3, #32
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	80bb      	strh	r3, [r7, #4]
 80032ba:	883b      	ldrh	r3, [r7, #0]
 80032bc:	3320      	adds	r3, #32
 80032be:	b29b      	uxth	r3, r3
 80032c0:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80032c2:	4b78      	ldr	r3, [pc, #480]	@ (80034a4 <setAddrWindow+0x224>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <setAddrWindow+0x5a>
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	3320      	adds	r3, #32
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	80fb      	strh	r3, [r7, #6]
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	3320      	adds	r3, #32
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80032da:	4b71      	ldr	r3, [pc, #452]	@ (80034a0 <setAddrWindow+0x220>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f241 5226 	movw	r2, #5414	@ 0x1526
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d128      	bne.n	8003338 <setAddrWindow+0xb8>
 80032e6:	4b6f      	ldr	r3, [pc, #444]	@ (80034a4 <setAddrWindow+0x224>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d022      	beq.n	8003338 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	81fb      	strh	r3, [r7, #14]
 80032fc:	883a      	ldrh	r2, [r7, #0]
 80032fe:	88bb      	ldrh	r3, [r7, #4]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	b29b      	uxth	r3, r3
 8003304:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003306:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <setAddrWindow+0x9c>
 800330e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003312:	b29b      	uxth	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	803b      	strh	r3, [r7, #0]
 800331a:	e00d      	b.n	8003338 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 800331c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <setAddrWindow+0xb8>
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	807b      	strh	r3, [r7, #2]
 800332e:	883a      	ldrh	r2, [r7, #0]
 8003330:	89bb      	ldrh	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003338:	4b5b      	ldr	r3, [pc, #364]	@ (80034a8 <setAddrWindow+0x228>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d054      	beq.n	80033ee <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003344:	4b59      	ldr	r3, [pc, #356]	@ (80034ac <setAddrWindow+0x22c>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b2d8      	uxtb	r0, r3
 800334a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334e:	121b      	asrs	r3, r3, #8
 8003350:	b21b      	sxth	r3, r3
 8003352:	b2d9      	uxtb	r1, r3
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800335c:	121b      	asrs	r3, r3, #8
 800335e:	b21b      	sxth	r3, r3
 8003360:	b2dc      	uxtb	r4, r3
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4623      	mov	r3, r4
 800336a:	f7fd ff09 	bl	8001180 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 800336e:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <setAddrWindow+0x230>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b2d8      	uxtb	r0, r3
 8003374:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003378:	121b      	asrs	r3, r3, #8
 800337a:	b21b      	sxth	r3, r3
 800337c:	b2d9      	uxtb	r1, r3
 800337e:	88bb      	ldrh	r3, [r7, #4]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003386:	121b      	asrs	r3, r3, #8
 8003388:	b21b      	sxth	r3, r3
 800338a:	b2dc      	uxtb	r4, r3
 800338c:	883b      	ldrh	r3, [r7, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4623      	mov	r3, r4
 8003394:	f7fd fef4 	bl	8001180 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003398:	4b46      	ldr	r3, [pc, #280]	@ (80034b4 <setAddrWindow+0x234>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d07b      	beq.n	8003498 <setAddrWindow+0x218>
 80033a0:	4b3f      	ldr	r3, [pc, #252]	@ (80034a0 <setAddrWindow+0x220>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	2b65      	cmp	r3, #101	@ 0x65
 80033a6:	d177      	bne.n	8003498 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80033a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ac:	121b      	asrs	r3, r3, #8
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	723b      	strb	r3, [r7, #8]
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80033ba:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <setAddrWindow+0x238>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	f107 0208 	add.w	r2, r7, #8
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fdb1 	bl	8000f2c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 80033ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033ce:	121b      	asrs	r3, r3, #8
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	723b      	strb	r3, [r7, #8]
 80033d6:	88bb      	ldrh	r3, [r7, #4]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 80033dc:	4b37      	ldr	r3, [pc, #220]	@ (80034bc <setAddrWindow+0x23c>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f107 0208 	add.w	r2, r7, #8
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fda0 	bl	8000f2c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80033ec:	e054      	b.n	8003498 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 80033ee:	4b32      	ldr	r3, [pc, #200]	@ (80034b8 <setAddrWindow+0x238>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fba3 	bl	8000b42 <WriteCmdData>
       WriteCmdData(_MP, y);
 80033fc:	4b2f      	ldr	r3, [pc, #188]	@ (80034bc <setAddrWindow+0x23c>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	88ba      	ldrh	r2, [r7, #4]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd fb9c 	bl	8000b42 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800340a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800340e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003412:	429a      	cmp	r2, r3
 8003414:	d105      	bne.n	8003422 <setAddrWindow+0x1a2>
 8003416:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800341a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d03a      	beq.n	8003498 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003422:	4b21      	ldr	r3, [pc, #132]	@ (80034a8 <setAddrWindow+0x228>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <setAddrWindow+0x1e0>
               if (rotation & 1)
 800342e:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <setAddrWindow+0x224>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 800343a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	b21a      	sxth	r2, r3
 8003442:	88bb      	ldrh	r3, [r7, #4]
 8003444:	4313      	orrs	r3, r2
 8003446:	80bb      	strh	r3, [r7, #4]
 8003448:	88bb      	ldrh	r3, [r7, #4]
 800344a:	803b      	strh	r3, [r7, #0]
 800344c:	e008      	b.n	8003460 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 800344e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	b21a      	sxth	r2, r3
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	4313      	orrs	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8003460:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <setAddrWindow+0x22c>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd fb6a 	bl	8000b42 <WriteCmdData>
           WriteCmdData(_SP, y);
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <setAddrWindow+0x230>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	88ba      	ldrh	r2, [r7, #4]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fb63 	bl	8000b42 <WriteCmdData>
           WriteCmdData(_EC, x1);
 800347c:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <setAddrWindow+0x240>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	887a      	ldrh	r2, [r7, #2]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fb5c 	bl	8000b42 <WriteCmdData>
           WriteCmdData(_EP, y1);
 800348a:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <setAddrWindow+0x244>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	883a      	ldrh	r2, [r7, #0]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fb55 	bl	8000b42 <WriteCmdData>
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	2000008e 	.word	0x2000008e
 80034a4:	20000088 	.word	0x20000088
 80034a8:	2000008c 	.word	0x2000008c
 80034ac:	2000009a 	.word	0x2000009a
 80034b0:	2000009e 	.word	0x2000009e
 80034b4:	20000083 	.word	0x20000083
 80034b8:	20000094 	.word	0x20000094
 80034bc:	20000096 	.word	0x20000096
 80034c0:	2000009c 	.word	0x2000009c
 80034c4:	200000a0 	.word	0x200000a0

080034c8 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
 80034d2:	460b      	mov	r3, r1
 80034d4:	80bb      	strh	r3, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80034da:	4b89      	ldr	r3, [pc, #548]	@ (8003700 <vertScroll+0x238>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	f249 3227 	movw	r2, #37671	@ 0x9327
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10b      	bne.n	80034fe <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 80034e6:	4b87      	ldr	r3, [pc, #540]	@ (8003704 <vertScroll+0x23c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <vertScroll+0x2e>
 80034ee:	4b85      	ldr	r3, [pc, #532]	@ (8003704 <vertScroll+0x23c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d103      	bne.n	80034fe <vertScroll+0x36>
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	3320      	adds	r3, #32
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	88bb      	ldrh	r3, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800350a:	b29b      	uxth	r3, r3
 800350c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003512:	4b7b      	ldr	r3, [pc, #492]	@ (8003700 <vertScroll+0x238>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f249 3227 	movw	r2, #37671	@ 0x9327
 800351a:	4293      	cmp	r3, r2
 800351c:	d103      	bne.n	8003526 <vertScroll+0x5e>
 800351e:	8afb      	ldrh	r3, [r7, #22]
 8003520:	3320      	adds	r3, #32
 8003522:	b29b      	uxth	r3, r3
 8003524:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003526:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800352a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800352e:	425b      	negs	r3, r3
 8003530:	429a      	cmp	r2, r3
 8003532:	dd05      	ble.n	8003540 <vertScroll+0x78>
 8003534:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003538:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	db01      	blt.n	8003544 <vertScroll+0x7c>
 8003540:	2300      	movs	r3, #0
 8003542:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	4413      	add	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 800354e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da04      	bge.n	8003560 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8003556:	8aba      	ldrh	r2, [r7, #20]
 8003558:	88bb      	ldrh	r3, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	88bb      	ldrh	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800356e:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <vertScroll+0x240>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d071      	beq.n	800365e <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 800357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357e:	121b      	asrs	r3, r3, #8
 8003580:	b21b      	sxth	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 800358c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003590:	121b      	asrs	r3, r3, #8
 8003592:	b21b      	sxth	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8003598:	88bb      	ldrh	r3, [r7, #4]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 800359e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035a2:	121b      	asrs	r3, r3, #8
 80035a4:	b21b      	sxth	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80035aa:	8afb      	ldrh	r3, [r7, #22]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80035b0:	4b56      	ldr	r3, [pc, #344]	@ (800370c <vertScroll+0x244>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <vertScroll+0xf4>
 80035b8:	230e      	movs	r3, #14
 80035ba:	e000      	b.n	80035be <vertScroll+0xf6>
 80035bc:	2333      	movs	r3, #51	@ 0x33
 80035be:	f107 020c 	add.w	r2, r7, #12
 80035c2:	2106      	movs	r1, #6
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fcb1 	bl	8000f2c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80035ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035ce:	121b      	asrs	r3, r3, #8
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80035d6:	8abb      	ldrh	r3, [r7, #20]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80035dc:	4b4b      	ldr	r3, [pc, #300]	@ (800370c <vertScroll+0x244>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <vertScroll+0x120>
 80035e4:	2314      	movs	r3, #20
 80035e6:	e000      	b.n	80035ea <vertScroll+0x122>
 80035e8:	2337      	movs	r3, #55	@ 0x37
 80035ea:	f107 020c 	add.w	r2, r7, #12
 80035ee:	2102      	movs	r1, #2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fc9b 	bl	8000f2c <WriteCmdParamN>
		if (is8347) {
 80035f6:	4b45      	ldr	r3, [pc, #276]	@ (800370c <vertScroll+0x244>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01f      	beq.n	800363e <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 80035fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <vertScroll+0x152>
 8003606:	4b3e      	ldr	r3, [pc, #248]	@ (8003700 <vertScroll+0x238>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	f248 3247 	movw	r2, #33607	@ 0x8347
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <vertScroll+0x14e>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <vertScroll+0x154>
 8003616:	2308      	movs	r3, #8
 8003618:	e000      	b.n	800361c <vertScroll+0x154>
 800361a:	2300      	movs	r3, #0
 800361c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800361e:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <vertScroll+0x238>)
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <vertScroll+0x166>
 800362a:	2318      	movs	r3, #24
 800362c:	e000      	b.n	8003630 <vertScroll+0x168>
 800362e:	2301      	movs	r3, #1
 8003630:	f107 020c 	add.w	r2, r7, #12
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fc78 	bl	8000f2c <WriteCmdParamN>
 800363c:	e05d      	b.n	80036fa <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800363e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d159      	bne.n	80036fa <vertScroll+0x232>
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <vertScroll+0x240>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d053      	beq.n	80036fa <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	2013      	movs	r0, #19
 8003658:	f7fd fc68 	bl	8000f2c <WriteCmdParamN>
 800365c:	e04d      	b.n	80036fa <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <vertScroll+0x238>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003666:	4293      	cmp	r3, r2
 8003668:	d027      	beq.n	80036ba <vertScroll+0x1f2>
 800366a:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800366e:	4293      	cmp	r3, r2
 8003670:	dc34      	bgt.n	80036dc <vertScroll+0x214>
 8003672:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003676:	4293      	cmp	r3, r2
 8003678:	d01f      	beq.n	80036ba <vertScroll+0x1f2>
 800367a:	f249 3226 	movw	r2, #37670	@ 0x9326
 800367e:	4293      	cmp	r3, r2
 8003680:	dc2c      	bgt.n	80036dc <vertScroll+0x214>
 8003682:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003686:	4293      	cmp	r3, r2
 8003688:	d017      	beq.n	80036ba <vertScroll+0x1f2>
 800368a:	f247 7293 	movw	r2, #30611	@ 0x7793
 800368e:	4293      	cmp	r3, r2
 8003690:	dc24      	bgt.n	80036dc <vertScroll+0x214>
 8003692:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003696:	4293      	cmp	r3, r2
 8003698:	d00f      	beq.n	80036ba <vertScroll+0x1f2>
 800369a:	f247 7283 	movw	r2, #30595	@ 0x7783
 800369e:	4293      	cmp	r3, r2
 80036a0:	d11c      	bne.n	80036dc <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <vertScroll+0x248>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	4619      	mov	r1, r3
 80036a8:	2061      	movs	r0, #97	@ 0x61
 80036aa:	f7fd fa4a 	bl	8000b42 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80036ae:	8abb      	ldrh	r3, [r7, #20]
 80036b0:	4619      	mov	r1, r3
 80036b2:	206a      	movs	r0, #106	@ 0x6a
 80036b4:	f7fd fa45 	bl	8000b42 <WriteCmdData>
        break;
 80036b8:	e01f      	b.n	80036fa <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <vertScroll+0x248>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	f240 4001 	movw	r0, #1025	@ 0x401
 80036ca:	f7fd fa3a 	bl	8000b42 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80036ce:	8abb      	ldrh	r3, [r7, #20]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f240 4004 	movw	r0, #1028	@ 0x404
 80036d6:	f7fd fa34 	bl	8000b42 <WriteCmdData>
        break;
 80036da:	e00e      	b.n	80036fa <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <vertScroll+0x248>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	2061      	movs	r0, #97	@ 0x61
 80036ea:	f7fd fa2a 	bl	8000b42 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80036ee:	8abb      	ldrh	r3, [r7, #20]
 80036f0:	4619      	mov	r1, r3
 80036f2:	206a      	movs	r0, #106	@ 0x6a
 80036f4:	f7fd fa25 	bl	8000b42 <WriteCmdData>
        break;
 80036f8:	bf00      	nop
    }
}
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	2000008e 	.word	0x2000008e
 8003704:	20000088 	.word	0x20000088
 8003708:	2000008c 	.word	0x2000008c
 800370c:	20000083 	.word	0x20000083
 8003710:	20000090 	.word	0x20000090

08003714 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af02      	add	r7, sp, #8
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <fillScreen+0x2c>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b21a      	sxth	r2, r3
 8003724:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <fillScreen+0x30>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b219      	sxth	r1, r3
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	460b      	mov	r3, r1
 8003730:	2100      	movs	r1, #0
 8003732:	2000      	movs	r0, #0
 8003734:	f000 fbee 	bl	8003f14 <fillRect>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000004 	.word	0x20000004
 8003744:	20000006 	.word	0x20000006

08003748 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003752:	4b4c      	ldr	r3, [pc, #304]	@ (8003884 <invertDisplay+0x13c>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	b21a      	sxth	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	b21b      	sxth	r3, r3
 800376a:	4053      	eors	r3, r2
 800376c:	b21b      	sxth	r3, r3
 800376e:	b29a      	uxth	r2, r3
 8003770:	4b45      	ldr	r3, [pc, #276]	@ (8003888 <invertDisplay+0x140>)
 8003772:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003774:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <invertDisplay+0x13c>)
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d035      	beq.n	80037ec <invertDisplay+0xa4>
        if (is8347) {
 8003780:	4b42      	ldr	r3, [pc, #264]	@ (800388c <invertDisplay+0x144>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d024      	beq.n	80037d2 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003788:	4b41      	ldr	r3, [pc, #260]	@ (8003890 <invertDisplay+0x148>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003790:	4293      	cmp	r3, r2
 8003792:	d005      	beq.n	80037a0 <invertDisplay+0x58>
 8003794:	4b3e      	ldr	r3, [pc, #248]	@ (8003890 <invertDisplay+0x148>)
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	f245 2252 	movw	r2, #21074	@ 0x5252
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80037a0:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <invertDisplay+0x140>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <invertDisplay+0x64>
 80037a8:	2306      	movs	r3, #6
 80037aa:	e000      	b.n	80037ae <invertDisplay+0x66>
 80037ac:	2302      	movs	r3, #2
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e007      	b.n	80037c2 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80037b2:	4b35      	ldr	r3, [pc, #212]	@ (8003888 <invertDisplay+0x140>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <invertDisplay+0x76>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e000      	b.n	80037c0 <invertDisplay+0x78>
 80037be:	230a      	movs	r3, #10
 80037c0:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80037c2:	f107 030f 	add.w	r3, r7, #15
 80037c6:	461a      	mov	r2, r3
 80037c8:	2101      	movs	r1, #1
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7fd fbae 	bl	8000f2c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80037d0:	e055      	b.n	800387e <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80037d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003888 <invertDisplay+0x140>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <invertDisplay+0x96>
 80037da:	2321      	movs	r3, #33	@ 0x21
 80037dc:	e000      	b.n	80037e0 <invertDisplay+0x98>
 80037de:	2320      	movs	r3, #32
 80037e0:	2200      	movs	r2, #0
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fba1 	bl	8000f2c <WriteCmdParamN>
 80037ea:	e048      	b.n	800387e <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80037ec:	4b28      	ldr	r3, [pc, #160]	@ (8003890 <invertDisplay+0x148>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d030      	beq.n	800385a <invertDisplay+0x112>
 80037f8:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80037fc:	4293      	cmp	r3, r2
 80037fe:	dc37      	bgt.n	8003870 <invertDisplay+0x128>
 8003800:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003804:	4293      	cmp	r3, r2
 8003806:	d028      	beq.n	800385a <invertDisplay+0x112>
 8003808:	f249 3226 	movw	r2, #37670	@ 0x9326
 800380c:	4293      	cmp	r3, r2
 800380e:	dc2f      	bgt.n	8003870 <invertDisplay+0x128>
 8003810:	f249 2225 	movw	r2, #37413	@ 0x9225
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <invertDisplay+0xf8>
 8003818:	f249 2225 	movw	r2, #37413	@ 0x9225
 800381c:	4293      	cmp	r3, r2
 800381e:	dc27      	bgt.n	8003870 <invertDisplay+0x128>
 8003820:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003824:	4293      	cmp	r3, r2
 8003826:	d018      	beq.n	800385a <invertDisplay+0x112>
 8003828:	f247 7293 	movw	r2, #30611	@ 0x7793
 800382c:	4293      	cmp	r3, r2
 800382e:	dc1f      	bgt.n	8003870 <invertDisplay+0x128>
 8003830:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8003834:	d004      	beq.n	8003840 <invertDisplay+0xf8>
 8003836:	f245 4220 	movw	r2, #21536	@ 0x5420
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <invertDisplay+0x112>
 800383e:	e017      	b.n	8003870 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003840:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <invertDisplay+0x140>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	b21b      	sxth	r3, r3
 8003848:	f043 0313 	orr.w	r3, r3, #19
 800384c:	b21b      	sxth	r3, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	4619      	mov	r1, r3
 8003852:	2007      	movs	r0, #7
 8003854:	f7fd f975 	bl	8000b42 <WriteCmdData>
        break;
 8003858:	e011      	b.n	800387e <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <invertDisplay+0x140>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	b29b      	uxth	r3, r3
 8003864:	4619      	mov	r1, r3
 8003866:	f240 4001 	movw	r0, #1025	@ 0x401
 800386a:	f7fd f96a 	bl	8000b42 <WriteCmdData>
        break;
 800386e:	e006      	b.n	800387e <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <invertDisplay+0x140>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	4619      	mov	r1, r3
 8003876:	2061      	movs	r0, #97	@ 0x61
 8003878:	f7fd f963 	bl	8000b42 <WriteCmdData>
        break;
 800387c:	bf00      	nop
    }
}
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2000008c 	.word	0x2000008c
 8003888:	20000090 	.word	0x20000090
 800388c:	20000083 	.word	0x20000083
 8003890:	2000008e 	.word	0x2000008e

08003894 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	af02      	add	r7, sp, #8
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	80fb      	strh	r3, [r7, #6]
 80038a6:	4603      	mov	r3, r0
 80038a8:	80bb      	strh	r3, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	807b      	strh	r3, [r7, #2]
 80038ae:	4613      	mov	r3, r2
 80038b0:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 80038b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80038b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80038ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80038be:	883b      	ldrh	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	2201      	movs	r2, #1
 80038c6:	f000 fb25 	bl	8003f14 <fillRect>
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}

080038d2 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	4604      	mov	r4, r0
 80038da:	4608      	mov	r0, r1
 80038dc:	4611      	mov	r1, r2
 80038de:	461a      	mov	r2, r3
 80038e0:	4623      	mov	r3, r4
 80038e2:	80fb      	strh	r3, [r7, #6]
 80038e4:	4603      	mov	r3, r0
 80038e6:	80bb      	strh	r3, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
 80038ec:	4613      	mov	r3, r2
 80038ee:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 80038f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80038f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80038f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80038fc:	883b      	ldrh	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	f000 fb07 	bl	8003f14 <fillRect>
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}

0800390e <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	80fb      	strh	r3, [r7, #6]
 8003918:	460b      	mov	r3, r1
 800391a:	80bb      	strh	r3, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8003920:	887a      	ldrh	r2, [r7, #2]
 8003922:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fbe2 	bl	80030f4 <drawPixel>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b089      	sub	sp, #36	@ 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4623      	mov	r3, r4
 8003948:	80fb      	strh	r3, [r7, #6]
 800394a:	4603      	mov	r3, r0
 800394c:	80bb      	strh	r3, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	807b      	strh	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003956:	f9b7 2000 	ldrsh.w	r2, [r7]
 800395a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003964:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003968:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800396c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003970:	1acb      	subs	r3, r1, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	bfb8      	it	lt
 8003976:	425b      	neglt	r3, r3
 8003978:	429a      	cmp	r2, r3
 800397a:	bfcc      	ite	gt
 800397c:	2301      	movgt	r3, #1
 800397e:	2300      	movle	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8003984:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00b      	beq.n	80039a4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	833b      	strh	r3, [r7, #24]
 8003990:	88bb      	ldrh	r3, [r7, #4]
 8003992:	80fb      	strh	r3, [r7, #6]
 8003994:	8b3b      	ldrh	r3, [r7, #24]
 8003996:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	82fb      	strh	r3, [r7, #22]
 800399c:	883b      	ldrh	r3, [r7, #0]
 800399e:	807b      	strh	r3, [r7, #2]
 80039a0:	8afb      	ldrh	r3, [r7, #22]
 80039a2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80039a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dd0b      	ble.n	80039c8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	82bb      	strh	r3, [r7, #20]
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	80fb      	strh	r3, [r7, #6]
 80039b8:	8abb      	ldrh	r3, [r7, #20]
 80039ba:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80039bc:	88bb      	ldrh	r3, [r7, #4]
 80039be:	827b      	strh	r3, [r7, #18]
 80039c0:	883b      	ldrh	r3, [r7, #0]
 80039c2:	80bb      	strh	r3, [r7, #4]
 80039c4:	8a7b      	ldrh	r3, [r7, #18]
 80039c6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80039c8:	887a      	ldrh	r2, [r7, #2]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80039d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80039d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bfb8      	it	lt
 80039e0:	425b      	neglt	r3, r3
 80039e2:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80039e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039e8:	0fda      	lsrs	r2, r3, #31
 80039ea:	4413      	add	r3, r2
 80039ec:	105b      	asrs	r3, r3, #1
 80039ee:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80039f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	da02      	bge.n	8003a02 <writeLine+0xca>
        ystep = 1;
 80039fc:	2301      	movs	r3, #1
 80039fe:	83bb      	strh	r3, [r7, #28]
 8003a00:	e031      	b.n	8003a66 <writeLine+0x12e>
    } else {
        ystep = -1;
 8003a02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a06:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8003a08:	e02d      	b.n	8003a66 <writeLine+0x12e>
        if (steep) {
 8003a0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <writeLine+0xec>
            writePixel(y0, x0, color);
 8003a12:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003a14:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003a18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff76 	bl	800390e <writePixel>
 8003a22:	e007      	b.n	8003a34 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8003a24:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003a26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff6d 	bl	800390e <writePixel>
        }
        err -= dy;
 8003a34:	8bfa      	ldrh	r2, [r7, #30]
 8003a36:	89fb      	ldrh	r3, [r7, #14]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8003a3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	da09      	bge.n	8003a5a <writeLine+0x122>
            y0 += ystep;
 8003a46:	88ba      	ldrh	r2, [r7, #4]
 8003a48:	8bbb      	ldrh	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8003a50:	8bfa      	ldrh	r2, [r7, #30]
 8003a52:	8a3b      	ldrh	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8003a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	80fb      	strh	r3, [r7, #6]
 8003a66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	ddcb      	ble.n	8003a0a <writeLine+0xd2>
        }
    }
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	3724      	adds	r7, #36	@ 0x24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	80fb      	strh	r3, [r7, #6]
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80bb      	strh	r3, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	807b      	strh	r3, [r7, #2]
 8003a96:	4613      	mov	r3, r2
 8003a98:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8003a9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d11a      	bne.n	8003adc <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003aa6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003aaa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	dd05      	ble.n	8003abe <drawLine+0x42>
 8003ab2:	88bb      	ldrh	r3, [r7, #4]
 8003ab4:	81bb      	strh	r3, [r7, #12]
 8003ab6:	883b      	ldrh	r3, [r7, #0]
 8003ab8:	80bb      	strh	r3, [r7, #4]
 8003aba:	89bb      	ldrh	r3, [r7, #12]
 8003abc:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003abe:	883a      	ldrh	r2, [r7, #0]
 8003ac0:	88bb      	ldrh	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b21a      	sxth	r2, r3
 8003acc:	8c3b      	ldrh	r3, [r7, #32]
 8003ace:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ad2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003ad6:	f7ff fedd 	bl	8003894 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003ada:	e02d      	b.n	8003b38 <drawLine+0xbc>
    } else if(y0 == y1){
 8003adc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003ae0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d11a      	bne.n	8003b1e <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003ae8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	dd05      	ble.n	8003b00 <drawLine+0x84>
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	81fb      	strh	r3, [r7, #14]
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	80fb      	strh	r3, [r7, #6]
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	b21a      	sxth	r2, r3
 8003b0e:	8c3b      	ldrh	r3, [r7, #32]
 8003b10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003b14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b18:	f7ff fedb 	bl	80038d2 <drawFastHLine>
}
 8003b1c:	e00c      	b.n	8003b38 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 8003b1e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003b22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003b2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b2e:	8c3b      	ldrh	r3, [r7, #32]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4623      	mov	r3, r4
 8003b34:	f7ff ff00 	bl	8003938 <writeLine>
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}

08003b40 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4623      	mov	r3, r4
 8003b50:	80fb      	strh	r3, [r7, #6]
 8003b52:	4603      	mov	r3, r0
 8003b54:	80bb      	strh	r3, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	807b      	strh	r3, [r7, #2]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	f1c3 0301 	rsb	r3, r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	03d2      	lsls	r2, r2, #15
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8003b82:	88ba      	ldrh	r2, [r7, #4]
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	4413      	add	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b219      	sxth	r1, r3
 8003b8c:	883a      	ldrh	r2, [r7, #0]
 8003b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff febb 	bl	800390e <writePixel>
    writePixel(x0  , y0-r, color);
 8003b98:	88ba      	ldrh	r2, [r7, #4]
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	b219      	sxth	r1, r3
 8003ba2:	883a      	ldrh	r2, [r7, #0]
 8003ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff feb0 	bl	800390e <writePixel>
    writePixel(x0+r, y0  , color);
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	887b      	ldrh	r3, [r7, #2]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b21b      	sxth	r3, r3
 8003bb8:	883a      	ldrh	r2, [r7, #0]
 8003bba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fea5 	bl	800390e <writePixel>
    writePixel(x0-r, y0  , color);
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	883a      	ldrh	r2, [r7, #0]
 8003bd0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fe9a 	bl	800390e <writePixel>

    while (x<y) {
 8003bda:	e091      	b.n	8003d00 <drawCircle+0x1c0>
        if (f >= 0) {
 8003bdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	db0e      	blt.n	8003c02 <drawCircle+0xc2>
            y--;
 8003be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003bf0:	8a7b      	ldrh	r3, [r7, #18]
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003bf8:	8afa      	ldrh	r2, [r7, #22]
 8003bfa:	8a7b      	ldrh	r3, [r7, #18]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003c02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003c0e:	8abb      	ldrh	r3, [r7, #20]
 8003c10:	3302      	adds	r3, #2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003c16:	8afa      	ldrh	r2, [r7, #22]
 8003c18:	8abb      	ldrh	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	8a3b      	ldrh	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	b218      	sxth	r0, r3
 8003c2a:	88ba      	ldrh	r2, [r7, #4]
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	4413      	add	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	883a      	ldrh	r2, [r7, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	f7ff fe69 	bl	800390e <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	8a3b      	ldrh	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b218      	sxth	r0, r3
 8003c46:	88ba      	ldrh	r2, [r7, #4]
 8003c48:	89fb      	ldrh	r3, [r7, #14]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b21b      	sxth	r3, r3
 8003c50:	883a      	ldrh	r2, [r7, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	f7ff fe5b 	bl	800390e <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	8a3b      	ldrh	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b218      	sxth	r0, r3
 8003c62:	88ba      	ldrh	r2, [r7, #4]
 8003c64:	89fb      	ldrh	r3, [r7, #14]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	b21b      	sxth	r3, r3
 8003c6c:	883a      	ldrh	r2, [r7, #0]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7ff fe4d 	bl	800390e <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	8a3b      	ldrh	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b218      	sxth	r0, r3
 8003c7e:	88ba      	ldrh	r2, [r7, #4]
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b21b      	sxth	r3, r3
 8003c88:	883a      	ldrh	r2, [r7, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7ff fe3f 	bl	800390e <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	89fb      	ldrh	r3, [r7, #14]
 8003c94:	4413      	add	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b218      	sxth	r0, r3
 8003c9a:	88ba      	ldrh	r2, [r7, #4]
 8003c9c:	8a3b      	ldrh	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	883a      	ldrh	r2, [r7, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f7ff fe31 	bl	800390e <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	89fb      	ldrh	r3, [r7, #14]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b218      	sxth	r0, r3
 8003cb6:	88ba      	ldrh	r2, [r7, #4]
 8003cb8:	8a3b      	ldrh	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	b21b      	sxth	r3, r3
 8003cc0:	883a      	ldrh	r2, [r7, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7ff fe23 	bl	800390e <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b218      	sxth	r0, r3
 8003cd2:	88ba      	ldrh	r2, [r7, #4]
 8003cd4:	8a3b      	ldrh	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b21b      	sxth	r3, r3
 8003cdc:	883a      	ldrh	r2, [r7, #0]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7ff fe15 	bl	800390e <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b218      	sxth	r0, r3
 8003cee:	88ba      	ldrh	r2, [r7, #4]
 8003cf0:	8a3b      	ldrh	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	883a      	ldrh	r2, [r7, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f7ff fe07 	bl	800390e <writePixel>
    while (x<y) {
 8003d00:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f6ff af67 	blt.w	8003bdc <drawCircle+0x9c>
    }
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd90      	pop	{r4, r7, pc}

08003d18 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	4604      	mov	r4, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4623      	mov	r3, r4
 8003d28:	80fb      	strh	r3, [r7, #6]
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80bb      	strh	r3, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	807b      	strh	r3, [r7, #2]
 8003d32:	4613      	mov	r3, r2
 8003d34:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8003d36:	88ba      	ldrh	r2, [r7, #4]
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b219      	sxth	r1, r3
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3301      	adds	r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b21a      	sxth	r2, r3
 8003d4c:	883b      	ldrh	r3, [r7, #0]
 8003d4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003d52:	f7ff fd9f 	bl	8003894 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8003d56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d5e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003d62:	883b      	ldrh	r3, [r7, #0]
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	2300      	movs	r3, #0
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	f000 f804 	bl	8003d78 <fillCircleHelper>
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4623      	mov	r3, r4
 8003d88:	80fb      	strh	r3, [r7, #6]
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80bb      	strh	r3, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
 8003d92:	4613      	mov	r3, r2
 8003d94:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	f1c3 0301 	rsb	r3, r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	461a      	mov	r2, r3
 8003da8:	03d2      	lsls	r2, r2, #15
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8003dba:	8a3b      	ldrh	r3, [r7, #16]
 8003dbc:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8003dbe:	89fb      	ldrh	r3, [r7, #14]
 8003dc0:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8003dc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8003dce:	e095      	b.n	8003efc <fillCircleHelper+0x184>
        if (f >= 0) {
 8003dd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	db0e      	blt.n	8003df6 <fillCircleHelper+0x7e>
            y--;
 8003dd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003de4:	8a7b      	ldrh	r3, [r7, #18]
 8003de6:	3302      	adds	r3, #2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8003dec:	8afa      	ldrh	r2, [r7, #22]
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	4413      	add	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003df6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003e02:	8abb      	ldrh	r3, [r7, #20]
 8003e04:	3302      	adds	r3, #2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8003e0a:	8afa      	ldrh	r2, [r7, #22]
 8003e0c:	8abb      	ldrh	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8003e14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	db31      	blt.n	8003e84 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8003e20:	787b      	ldrb	r3, [r7, #1]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <fillCircleHelper+0xda>
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	8a3b      	ldrh	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b218      	sxth	r0, r3
 8003e34:	88ba      	ldrh	r2, [r7, #4]
 8003e36:	89fb      	ldrh	r3, [r7, #14]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	b219      	sxth	r1, r3
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e46:	4413      	add	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e4e:	f7ff fd21 	bl	8003894 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8003e52:	787b      	ldrb	r3, [r7, #1]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <fillCircleHelper+0x10c>
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	8a3b      	ldrh	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	b218      	sxth	r0, r3
 8003e66:	88ba      	ldrh	r2, [r7, #4]
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b219      	sxth	r1, r3
 8003e70:	89fb      	ldrh	r3, [r7, #14]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e78:	4413      	add	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e80:	f7ff fd08 	bl	8003894 <drawFastVLine>
        }
        if(y != py) {
 8003e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d033      	beq.n	8003ef8 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d013      	beq.n	8003ec2 <fillCircleHelper+0x14a>
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	b218      	sxth	r0, r3
 8003ea4:	88ba      	ldrh	r2, [r7, #4]
 8003ea6:	89bb      	ldrh	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	b219      	sxth	r1, r3
 8003eae:	89bb      	ldrh	r3, [r7, #12]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003eb6:	4413      	add	r3, r2
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	b21a      	sxth	r2, r3
 8003ebc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ebe:	f7ff fce9 	bl	8003894 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8003ec2:	787b      	ldrb	r3, [r7, #1]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <fillCircleHelper+0x17c>
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	b218      	sxth	r0, r3
 8003ed6:	88ba      	ldrh	r2, [r7, #4]
 8003ed8:	89bb      	ldrh	r3, [r7, #12]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b219      	sxth	r1, r3
 8003ee0:	89bb      	ldrh	r3, [r7, #12]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ee8:	4413      	add	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	b21a      	sxth	r2, r3
 8003eee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ef0:	f7ff fcd0 	bl	8003894 <drawFastVLine>
            py = y;
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8003ef8:	8a3b      	ldrh	r3, [r7, #16]
 8003efa:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8003efc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003f00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f6ff af63 	blt.w	8003dd0 <fillCircleHelper+0x58>
    }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}

08003f14 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	4623      	mov	r3, r4
 8003f24:	80fb      	strh	r3, [r7, #6]
 8003f26:	4603      	mov	r3, r0
 8003f28:	80bb      	strh	r3, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	807b      	strh	r3, [r7, #2]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8003f32:	4b76      	ldr	r3, [pc, #472]	@ (800410c <fillRect+0x1f8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <fillRect+0x32>
 8003f3a:	8c3b      	ldrh	r3, [r7, #32]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fd51 	bl	80009e4 <color565_to_555>
 8003f42:	4603      	mov	r3, r0
 8003f44:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8003f46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da08      	bge.n	8003f60 <fillRect+0x4c>
        w = -w;
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	425b      	negs	r3, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	807b      	strh	r3, [r7, #2]
        x -= w;
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	4413      	add	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8003f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da01      	bge.n	8003f76 <fillRect+0x62>
        x = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8003f76:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003f7a:	f7fc fd1b 	bl	80009b4 <width>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	429c      	cmp	r4, r3
 8003f82:	dd03      	ble.n	8003f8c <fillRect+0x78>
        end = width();
 8003f84:	f7fc fd16 	bl	80009b4 <width>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8003f8c:	89fa      	ldrh	r2, [r7, #14]
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8003f96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da08      	bge.n	8003fb0 <fillRect+0x9c>
        h = -h;
 8003f9e:	883b      	ldrh	r3, [r7, #0]
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	803b      	strh	r3, [r7, #0]
        y -= h;
 8003fa6:	88ba      	ldrh	r2, [r7, #4]
 8003fa8:	883b      	ldrh	r3, [r7, #0]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003fb0:	88ba      	ldrh	r2, [r7, #4]
 8003fb2:	883b      	ldrh	r3, [r7, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8003fba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da01      	bge.n	8003fc6 <fillRect+0xb2>
        y = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8003fc6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003fca:	f7fc fcff 	bl	80009cc <height>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	dd03      	ble.n	8003fdc <fillRect+0xc8>
        end = height();
 8003fd4:	f7fc fcfa 	bl	80009cc <height>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8003fdc:	89fa      	ldrh	r2, [r7, #14]
 8003fde:	88bb      	ldrh	r3, [r7, #4]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	4413      	add	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b21c      	sxth	r4, r3
 8003ff4:	88ba      	ldrh	r2, [r7, #4]
 8003ff6:	883b      	ldrh	r3, [r7, #0]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b21b      	sxth	r3, r3
 8004002:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004006:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800400a:	4622      	mov	r2, r4
 800400c:	f7ff f938 	bl	8003280 <setAddrWindow>
    CS_ACTIVE;
 8004010:	2102      	movs	r1, #2
 8004012:	483f      	ldr	r0, [pc, #252]	@ (8004110 <fillRect+0x1fc>)
 8004014:	f7fc fc80 	bl	8000918 <PIN_LOW>
    WriteCmd(_MW);
 8004018:	2104      	movs	r1, #4
 800401a:	483d      	ldr	r0, [pc, #244]	@ (8004110 <fillRect+0x1fc>)
 800401c:	f7fc fc7c 	bl	8000918 <PIN_LOW>
 8004020:	4b3c      	ldr	r3, [pc, #240]	@ (8004114 <fillRect+0x200>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	b29b      	uxth	r3, r3
 8004028:	737b      	strb	r3, [r7, #13]
 800402a:	4b3a      	ldr	r3, [pc, #232]	@ (8004114 <fillRect+0x200>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	733b      	strb	r3, [r7, #12]
 8004030:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <fillRect+0x1fc>)
 8004032:	4a39      	ldr	r2, [pc, #228]	@ (8004118 <fillRect+0x204>)
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	4b39      	ldr	r3, [pc, #228]	@ (800411c <fillRect+0x208>)
 8004038:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 800403c:	619a      	str	r2, [r3, #24]
 800403e:	7b7b      	ldrb	r3, [r7, #13]
 8004040:	035b      	lsls	r3, r3, #13
 8004042:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8004046:	7b7b      	ldrb	r3, [r7, #13]
 8004048:	109b      	asrs	r3, r3, #2
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	431a      	orrs	r2, r3
 8004050:	4b2f      	ldr	r3, [pc, #188]	@ (8004110 <fillRect+0x1fc>)
 8004052:	619a      	str	r2, [r3, #24]
 8004054:	7b7b      	ldrb	r3, [r7, #13]
 8004056:	4a31      	ldr	r2, [pc, #196]	@ (800411c <fillRect+0x208>)
 8004058:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 800405c:	6193      	str	r3, [r2, #24]
 800405e:	2108      	movs	r1, #8
 8004060:	482b      	ldr	r0, [pc, #172]	@ (8004110 <fillRect+0x1fc>)
 8004062:	f7fc fc59 	bl	8000918 <PIN_LOW>
 8004066:	2108      	movs	r1, #8
 8004068:	4829      	ldr	r0, [pc, #164]	@ (8004110 <fillRect+0x1fc>)
 800406a:	f7fc fc55 	bl	8000918 <PIN_LOW>
 800406e:	2108      	movs	r1, #8
 8004070:	4827      	ldr	r0, [pc, #156]	@ (8004110 <fillRect+0x1fc>)
 8004072:	f7fc fc51 	bl	8000918 <PIN_LOW>
 8004076:	2108      	movs	r1, #8
 8004078:	4825      	ldr	r0, [pc, #148]	@ (8004110 <fillRect+0x1fc>)
 800407a:	f7fc fc5d 	bl	8000938 <PIN_HIGH>
 800407e:	2108      	movs	r1, #8
 8004080:	4823      	ldr	r0, [pc, #140]	@ (8004110 <fillRect+0x1fc>)
 8004082:	f7fc fc59 	bl	8000938 <PIN_HIGH>
 8004086:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <fillRect+0x1fc>)
 8004088:	4a23      	ldr	r2, [pc, #140]	@ (8004118 <fillRect+0x204>)
 800408a:	619a      	str	r2, [r3, #24]
 800408c:	4b23      	ldr	r3, [pc, #140]	@ (800411c <fillRect+0x208>)
 800408e:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	7b3b      	ldrb	r3, [r7, #12]
 8004096:	035b      	lsls	r3, r3, #13
 8004098:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800409c:	7b3b      	ldrb	r3, [r7, #12]
 800409e:	109b      	asrs	r3, r3, #2
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	431a      	orrs	r2, r3
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <fillRect+0x1fc>)
 80040a8:	619a      	str	r2, [r3, #24]
 80040aa:	7b3b      	ldrb	r3, [r7, #12]
 80040ac:	4a1b      	ldr	r2, [pc, #108]	@ (800411c <fillRect+0x208>)
 80040ae:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80040b2:	6193      	str	r3, [r2, #24]
 80040b4:	2108      	movs	r1, #8
 80040b6:	4816      	ldr	r0, [pc, #88]	@ (8004110 <fillRect+0x1fc>)
 80040b8:	f7fc fc2e 	bl	8000918 <PIN_LOW>
 80040bc:	2108      	movs	r1, #8
 80040be:	4814      	ldr	r0, [pc, #80]	@ (8004110 <fillRect+0x1fc>)
 80040c0:	f7fc fc2a 	bl	8000918 <PIN_LOW>
 80040c4:	2108      	movs	r1, #8
 80040c6:	4812      	ldr	r0, [pc, #72]	@ (8004110 <fillRect+0x1fc>)
 80040c8:	f7fc fc26 	bl	8000918 <PIN_LOW>
 80040cc:	2108      	movs	r1, #8
 80040ce:	4810      	ldr	r0, [pc, #64]	@ (8004110 <fillRect+0x1fc>)
 80040d0:	f7fc fc32 	bl	8000938 <PIN_HIGH>
 80040d4:	2108      	movs	r1, #8
 80040d6:	480e      	ldr	r0, [pc, #56]	@ (8004110 <fillRect+0x1fc>)
 80040d8:	f7fc fc2e 	bl	8000938 <PIN_HIGH>
 80040dc:	2104      	movs	r1, #4
 80040de:	480c      	ldr	r0, [pc, #48]	@ (8004110 <fillRect+0x1fc>)
 80040e0:	f7fc fc2a 	bl	8000938 <PIN_HIGH>
    if (h > w) {
 80040e4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dd05      	ble.n	80040fc <fillRect+0x1e8>
        end = h;
 80040f0:	883b      	ldrh	r3, [r7, #0]
 80040f2:	81fb      	strh	r3, [r7, #14]
        h = w;
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	803b      	strh	r3, [r7, #0]
        w = end;
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80040fc:	8c3b      	ldrh	r3, [r7, #32]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	b29b      	uxth	r3, r3
 8004102:	72fb      	strb	r3, [r7, #11]
 8004104:	8c3b      	ldrh	r3, [r7, #32]
 8004106:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004108:	e06a      	b.n	80041e0 <fillRect+0x2cc>
 800410a:	bf00      	nop
 800410c:	20000084 	.word	0x20000084
 8004110:	40020000 	.word	0x40020000
 8004114:	20000098 	.word	0x20000098
 8004118:	80200000 	.word	0x80200000
 800411c:	40020400 	.word	0x40020400
        end = w;
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004124:	4b48      	ldr	r3, [pc, #288]	@ (8004248 <fillRect+0x334>)
 8004126:	4a49      	ldr	r2, [pc, #292]	@ (800424c <fillRect+0x338>)
 8004128:	619a      	str	r2, [r3, #24]
 800412a:	4b49      	ldr	r3, [pc, #292]	@ (8004250 <fillRect+0x33c>)
 800412c:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	7afb      	ldrb	r3, [r7, #11]
 8004134:	035b      	lsls	r3, r3, #13
 8004136:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	109b      	asrs	r3, r3, #2
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	431a      	orrs	r2, r3
 8004144:	4b40      	ldr	r3, [pc, #256]	@ (8004248 <fillRect+0x334>)
 8004146:	619a      	str	r2, [r3, #24]
 8004148:	7afb      	ldrb	r3, [r7, #11]
 800414a:	4a41      	ldr	r2, [pc, #260]	@ (8004250 <fillRect+0x33c>)
 800414c:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 8004150:	6193      	str	r3, [r2, #24]
 8004152:	2108      	movs	r1, #8
 8004154:	483c      	ldr	r0, [pc, #240]	@ (8004248 <fillRect+0x334>)
 8004156:	f7fc fbdf 	bl	8000918 <PIN_LOW>
 800415a:	2108      	movs	r1, #8
 800415c:	483a      	ldr	r0, [pc, #232]	@ (8004248 <fillRect+0x334>)
 800415e:	f7fc fbdb 	bl	8000918 <PIN_LOW>
 8004162:	2108      	movs	r1, #8
 8004164:	4838      	ldr	r0, [pc, #224]	@ (8004248 <fillRect+0x334>)
 8004166:	f7fc fbd7 	bl	8000918 <PIN_LOW>
 800416a:	2108      	movs	r1, #8
 800416c:	4836      	ldr	r0, [pc, #216]	@ (8004248 <fillRect+0x334>)
 800416e:	f7fc fbe3 	bl	8000938 <PIN_HIGH>
 8004172:	2108      	movs	r1, #8
 8004174:	4834      	ldr	r0, [pc, #208]	@ (8004248 <fillRect+0x334>)
 8004176:	f7fc fbdf 	bl	8000938 <PIN_HIGH>
            write8(lo);
 800417a:	4b33      	ldr	r3, [pc, #204]	@ (8004248 <fillRect+0x334>)
 800417c:	4a33      	ldr	r2, [pc, #204]	@ (800424c <fillRect+0x338>)
 800417e:	619a      	str	r2, [r3, #24]
 8004180:	4b33      	ldr	r3, [pc, #204]	@ (8004250 <fillRect+0x33c>)
 8004182:	f44f 02f6 	mov.w	r2, #8060928	@ 0x7b0000
 8004186:	619a      	str	r2, [r3, #24]
 8004188:	7abb      	ldrb	r3, [r7, #10]
 800418a:	035b      	lsls	r3, r3, #13
 800418c:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8004190:	7abb      	ldrb	r3, [r7, #10]
 8004192:	109b      	asrs	r3, r3, #2
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	431a      	orrs	r2, r3
 800419a:	4b2b      	ldr	r3, [pc, #172]	@ (8004248 <fillRect+0x334>)
 800419c:	619a      	str	r2, [r3, #24]
 800419e:	7abb      	ldrb	r3, [r7, #10]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004250 <fillRect+0x33c>)
 80041a2:	f003 037b 	and.w	r3, r3, #123	@ 0x7b
 80041a6:	6193      	str	r3, [r2, #24]
 80041a8:	2108      	movs	r1, #8
 80041aa:	4827      	ldr	r0, [pc, #156]	@ (8004248 <fillRect+0x334>)
 80041ac:	f7fc fbb4 	bl	8000918 <PIN_LOW>
 80041b0:	2108      	movs	r1, #8
 80041b2:	4825      	ldr	r0, [pc, #148]	@ (8004248 <fillRect+0x334>)
 80041b4:	f7fc fbb0 	bl	8000918 <PIN_LOW>
 80041b8:	2108      	movs	r1, #8
 80041ba:	4823      	ldr	r0, [pc, #140]	@ (8004248 <fillRect+0x334>)
 80041bc:	f7fc fbac 	bl	8000918 <PIN_LOW>
 80041c0:	2108      	movs	r1, #8
 80041c2:	4821      	ldr	r0, [pc, #132]	@ (8004248 <fillRect+0x334>)
 80041c4:	f7fc fbb8 	bl	8000938 <PIN_HIGH>
 80041c8:	2108      	movs	r1, #8
 80041ca:	481f      	ldr	r0, [pc, #124]	@ (8004248 <fillRect+0x334>)
 80041cc:	f7fc fbb4 	bl	8000938 <PIN_HIGH>
        } while (--end != 0);
 80041d0:	89fb      	ldrh	r3, [r7, #14]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	81fb      	strh	r3, [r7, #14]
 80041d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1a1      	bne.n	8004124 <fillRect+0x210>
    while (h-- > 0) {
 80041e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	3a01      	subs	r2, #1
 80041e8:	b292      	uxth	r2, r2
 80041ea:	803a      	strh	r2, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	dc97      	bgt.n	8004120 <fillRect+0x20c>
#endif
    }
    CS_IDLE;
 80041f0:	2102      	movs	r1, #2
 80041f2:	4815      	ldr	r0, [pc, #84]	@ (8004248 <fillRect+0x334>)
 80041f4:	f7fc fba0 	bl	8000938 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80041f8:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <fillRect+0x340>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <fillRect+0x308>
 8004204:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <fillRect+0x344>)
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	f241 5226 	movw	r2, #5414	@ 0x1526
 800420c:	4293      	cmp	r3, r2
 800420e:	d116      	bne.n	800423e <fillRect+0x32a>
 8004210:	4b12      	ldr	r3, [pc, #72]	@ (800425c <fillRect+0x348>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <fillRect+0x32a>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800421c:	f7fc fbca 	bl	80009b4 <width>
 8004220:	4603      	mov	r3, r0
 8004222:	3b01      	subs	r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	b21c      	sxth	r4, r3
 8004228:	f7fc fbd0 	bl	80009cc <height>
 800422c:	4603      	mov	r3, r0
 800422e:	3b01      	subs	r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	b21b      	sxth	r3, r3
 8004234:	4622      	mov	r2, r4
 8004236:	2100      	movs	r1, #0
 8004238:	2000      	movs	r0, #0
 800423a:	f7ff f821 	bl	8003280 <setAddrWindow>
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bd90      	pop	{r4, r7, pc}
 8004246:	bf00      	nop
 8004248:	40020000 	.word	0x40020000
 800424c:	80200000 	.word	0x80200000
 8004250:	40020400 	.word	0x40020400
 8004254:	2000008c 	.word	0x2000008c
 8004258:	2000008e 	.word	0x2000008e
 800425c:	20000088 	.word	0x20000088

08004260 <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8004264:	2000      	movs	r0, #0
 8004266:	f7ff fa55 	bl	8003714 <fillScreen>
    fillScreen(RED);
 800426a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800426e:	f7ff fa51 	bl	8003714 <fillScreen>
    fillScreen(GREEN);
 8004272:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004276:	f7ff fa4d 	bl	8003714 <fillScreen>
    fillScreen(BLUE);
 800427a:	201f      	movs	r0, #31
 800427c:	f7ff fa4a 	bl	8003714 <fillScreen>
    fillScreen(BLACK);
 8004280:	2000      	movs	r0, #0
 8004282:	f7ff fa47 	bl	8003714 <fillScreen>
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}

0800428a <testLines>:

void testLines(uint16_t color)
{
 800428a:	b590      	push	{r4, r7, lr}
 800428c:	b08b      	sub	sp, #44	@ 0x2c
 800428e:	af02      	add	r7, sp, #8
 8004290:	4603      	mov	r3, r0
 8004292:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = width(),
 8004294:	f7fc fb8e 	bl	80009b4 <width>
 8004298:	4603      	mov	r3, r0
 800429a:	617b      	str	r3, [r7, #20]
                  h = height();
 800429c:	f7fc fb96 	bl	80009cc <height>
 80042a0:	4603      	mov	r3, r0
 80042a2:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7ff fa35 	bl	8003714 <fillScreen>

    x1 = y1 = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e00f      	b.n	80042de <testLines+0x54>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	b218      	sxth	r0, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	b219      	sxth	r1, r3
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	b21c      	sxth	r4, r3
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	4623      	mov	r3, r4
 80042d4:	f7ff fbd2 	bl	8003a7c <drawLine>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3306      	adds	r3, #6
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	dbeb      	blt.n	80042be <testLines+0x34>
    x2    = w - 1;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e00f      	b.n	8004312 <testLines+0x88>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	b218      	sxth	r0, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	b219      	sxth	r1, r3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	b21a      	sxth	r2, r3
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	b21c      	sxth	r4, r3
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	4623      	mov	r3, r4
 8004308:	f7ff fbb8 	bl	8003a7c <drawLine>
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	3306      	adds	r3, #6
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	429a      	cmp	r2, r3
 8004318:	dbeb      	blt.n	80042f2 <testLines+0x68>

    fillScreen(BLACK);
 800431a:	2000      	movs	r0, #0
 800431c:	f7ff f9fa 	bl	8003714 <fillScreen>

    x1    = w - 1;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3b01      	subs	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3b01      	subs	r3, #1
 800432e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e00f      	b.n	8004356 <testLines+0xcc>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	b218      	sxth	r0, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	b219      	sxth	r1, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	b21a      	sxth	r2, r3
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	b21c      	sxth	r4, r3
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4623      	mov	r3, r4
 800434c:	f7ff fb96 	bl	8003a7c <drawLine>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3306      	adds	r3, #6
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	429a      	cmp	r2, r3
 800435c:	dbeb      	blt.n	8004336 <testLines+0xac>
    x2    = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e00f      	b.n	8004388 <testLines+0xfe>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	b218      	sxth	r0, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	b219      	sxth	r1, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	b21a      	sxth	r2, r3
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	b21c      	sxth	r4, r3
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4623      	mov	r3, r4
 800437e:	f7ff fb7d 	bl	8003a7c <drawLine>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3306      	adds	r3, #6
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	429a      	cmp	r2, r3
 800438e:	dbeb      	blt.n	8004368 <testLines+0xde>

    fillScreen(BLACK);
 8004390:	2000      	movs	r0, #0
 8004392:	f7ff f9bf 	bl	8003714 <fillScreen>

    x1    = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3b01      	subs	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e00f      	b.n	80043ca <testLines+0x140>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	b218      	sxth	r0, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	b219      	sxth	r1, r3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	b21c      	sxth	r4, r3
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4623      	mov	r3, r4
 80043c0:	f7ff fb5c 	bl	8003a7c <drawLine>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	3306      	adds	r3, #6
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	dbeb      	blt.n	80043aa <testLines+0x120>
    x2    = w - 1;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e00f      	b.n	80043fe <testLines+0x174>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	b218      	sxth	r0, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	b219      	sxth	r1, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	b21a      	sxth	r2, r3
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	b21c      	sxth	r4, r3
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	4623      	mov	r3, r4
 80043f4:	f7ff fb42 	bl	8003a7c <drawLine>
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	3306      	adds	r3, #6
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	dbeb      	blt.n	80043de <testLines+0x154>

    fillScreen(BLACK);
 8004406:	2000      	movs	r0, #0
 8004408:	f7ff f984 	bl	8003714 <fillScreen>

    x1    = w - 1;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3b01      	subs	r3, #1
 8004410:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3b01      	subs	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e00f      	b.n	8004442 <testLines+0x1b8>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	b218      	sxth	r0, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	b219      	sxth	r1, r3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	b21a      	sxth	r2, r3
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	b21c      	sxth	r4, r3
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4623      	mov	r3, r4
 8004438:	f7ff fb20 	bl	8003a7c <drawLine>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3306      	adds	r3, #6
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	dbeb      	blt.n	8004422 <testLines+0x198>
    x2    = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e00f      	b.n	8004474 <testLines+0x1ea>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	b218      	sxth	r0, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	b219      	sxth	r1, r3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	b21a      	sxth	r2, r3
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	b21c      	sxth	r4, r3
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	4623      	mov	r3, r4
 800446a:	f7ff fb07 	bl	8003a7c <drawLine>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3306      	adds	r3, #6
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	dbeb      	blt.n	8004454 <testLines+0x1ca>

}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	@ 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd90      	pop	{r4, r7, pc}

08004486 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	460a      	mov	r2, r1
 8004490:	80fb      	strh	r3, [r7, #6]
 8004492:	4613      	mov	r3, r2
 8004494:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = width(), h = height();
 8004496:	f7fc fa8d 	bl	80009b4 <width>
 800449a:	4603      	mov	r3, r0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	f7fc fa95 	bl	80009cc <height>
 80044a2:	4603      	mov	r3, r0
 80044a4:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7ff f934 	bl	8003714 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e00a      	b.n	80044c8 <testFastLines+0x42>
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	b219      	sxth	r1, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	b21a      	sxth	r2, r3
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	2000      	movs	r0, #0
 80044be:	f7ff fa08 	bl	80038d2 <drawFastHLine>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3305      	adds	r3, #5
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	dbf0      	blt.n	80044b2 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e00a      	b.n	80044ec <testFastLines+0x66>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	b218      	sxth	r0, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	b21a      	sxth	r2, r3
 80044de:	88bb      	ldrh	r3, [r7, #4]
 80044e0:	2100      	movs	r1, #0
 80044e2:	f7ff f9d7 	bl	8003894 <drawFastVLine>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	3305      	adds	r3, #5
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dbf0      	blt.n	80044d6 <testFastLines+0x50>
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	460a      	mov	r2, r1
 8004508:	71fb      	strb	r3, [r7, #7]
 800450a:	4613      	mov	r3, r2
 800450c:	80bb      	strh	r3, [r7, #4]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 800450e:	f7fc fa51 	bl	80009b4 <width>
 8004512:	4603      	mov	r3, r0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	f7fc fa59 	bl	80009cc <height>
 800451a:	4603      	mov	r3, r0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8004524:	2000      	movs	r0, #0
 8004526:	f7ff f8f5 	bl	8003714 <fillScreen>
    for (x = radius; x < w; x += r2) {
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e017      	b.n	8004560 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e00c      	b.n	8004550 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	b218      	sxth	r0, r3
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	b219      	sxth	r1, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	b21a      	sxth	r2, r3
 8004542:	88bb      	ldrh	r3, [r7, #4]
 8004544:	f7ff fbe8 	bl	8003d18 <fillCircle>
        for (y = radius; y < h; y += r2) {
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	dbee      	blt.n	8004536 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	dbe3      	blt.n	8004530 <testFilledCircles+0x32>
        }
    }

}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b088      	sub	sp, #32
 8004576:	af00      	add	r7, sp, #0
 8004578:	4603      	mov	r3, r0
 800457a:	460a      	mov	r2, r1
 800457c:	71fb      	strb	r3, [r7, #7]
 800457e:	4613      	mov	r3, r2
 8004580:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8004588:	f7fc fa14 	bl	80009b4 <width>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	4413      	add	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 8004596:	f7fc fa19 	bl	80009cc <height>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4413      	add	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	e017      	b.n	80045da <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e00c      	b.n	80045ca <testCircles+0x58>
            drawCircle(x, y, radius, color);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	b218      	sxth	r0, r3
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	b219      	sxth	r1, r3
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	b21a      	sxth	r2, r3
 80045bc:	88bb      	ldrh	r3, [r7, #4]
 80045be:	f7ff fabf 	bl	8003b40 <drawCircle>
        for (y = 0; y < h; y += r2) {
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	dbee      	blt.n	80045b0 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	4413      	add	r3, r2
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	429a      	cmp	r2, r3
 80045e0:	dbe3      	blt.n	80045aa <testCircles+0x38>
        }
    }

}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <drawChar>:
}



void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b08b      	sub	sp, #44	@ 0x2c
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	80fb      	strh	r3, [r7, #6]
 80045fe:	4603      	mov	r3, r0
 8004600:	80bb      	strh	r3, [r7, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	70fb      	strb	r3, [r7, #3]
 8004606:	4613      	mov	r3, r2
 8004608:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800460a:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <drawChar+0x17c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3308      	adds	r3, #8
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4a52      	ldr	r2, [pc, #328]	@ (8004768 <drawChar+0x17c>)
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	3204      	adds	r2, #4
 8004622:	8812      	ldrh	r2, [r2, #0]
 8004624:	4413      	add	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8004628:	4b4f      	ldr	r3, [pc, #316]	@ (8004768 <drawChar+0x17c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3302      	adds	r3, #2
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3303      	adds	r3, #3
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3305      	adds	r3, #5
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3306      	adds	r3, #6
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	76fb      	strb	r3, [r7, #27]
 800465a:	2300      	movs	r3, #0
 800465c:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	833b      	strh	r3, [r7, #24]
 8004662:	2300      	movs	r3, #0
 8004664:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8004666:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800466a:	2b01      	cmp	r3, #1
 800466c:	d905      	bls.n	800467a <drawChar+0x8e>
            xo16 = xo;
 800466e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004672:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8004674:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004678:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 800467a:	2300      	movs	r3, #0
 800467c:	773b      	strb	r3, [r7, #28]
 800467e:	e06a      	b.n	8004756 <drawChar+0x16a>
            for(xx=0; xx<w; xx++) {
 8004680:	2300      	movs	r3, #0
 8004682:	777b      	strb	r3, [r7, #29]
 8004684:	e060      	b.n	8004748 <drawChar+0x15c>
                if(!(bit++ & 7)) {
 8004686:	7ebb      	ldrb	r3, [r7, #26]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	76ba      	strb	r2, [r7, #26]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <drawChar+0xb8>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8004694:	8bfb      	ldrh	r3, [r7, #30]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	83fa      	strh	r2, [r7, #30]
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 80046a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da47      	bge.n	800473c <drawChar+0x150>
                    if(size == 1) {
 80046ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11a      	bne.n	80046ea <drawChar+0xfe>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80046b4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	4413      	add	r3, r2
 80046be:	b29a      	uxth	r2, r3
 80046c0:	7f7b      	ldrb	r3, [r7, #29]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	b218      	sxth	r0, r3
 80046ca:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	88bb      	ldrh	r3, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	7f3b      	ldrb	r3, [r7, #28]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	4413      	add	r3, r2
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b21b      	sxth	r3, r3
 80046e0:	883a      	ldrh	r2, [r7, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	f7ff f913 	bl	800390e <writePixel>
 80046e8:	e028      	b.n	800473c <drawChar+0x150>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 80046ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80046ee:	7f7b      	ldrb	r3, [r7, #29]
 80046f0:	4413      	add	r3, r2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	fb12 f303 	smulbb	r3, r2, r3
 80046fe:	b29a      	uxth	r2, r3
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	4413      	add	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	b218      	sxth	r0, r3
 8004708:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800470c:	7f3b      	ldrb	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	b29a      	uxth	r2, r3
 8004712:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004716:	b29b      	uxth	r3, r3
 8004718:	fb12 f303 	smulbb	r3, r2, r3
 800471c:	b29a      	uxth	r2, r3
 800471e:	88bb      	ldrh	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	b219      	sxth	r1, r3
 8004726:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800472a:	b21a      	sxth	r2, r3
 800472c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004730:	b21c      	sxth	r4, r3
 8004732:	883b      	ldrh	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4623      	mov	r3, r4
 8004738:	f7ff fbec 	bl	8003f14 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 800473c:	7efb      	ldrb	r3, [r7, #27]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8004742:	7f7b      	ldrb	r3, [r7, #29]
 8004744:	3301      	adds	r3, #1
 8004746:	777b      	strb	r3, [r7, #29]
 8004748:	7f7a      	ldrb	r2, [r7, #29]
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	429a      	cmp	r2, r3
 800474e:	d39a      	bcc.n	8004686 <drawChar+0x9a>
        for(yy=0; yy<h; yy++) {
 8004750:	7f3b      	ldrb	r3, [r7, #28]
 8004752:	3301      	adds	r3, #1
 8004754:	773b      	strb	r3, [r7, #28]
 8004756:	7f3a      	ldrb	r2, [r7, #28]
 8004758:	7abb      	ldrb	r3, [r7, #10]
 800475a:	429a      	cmp	r2, r3
 800475c:	d390      	bcc.n	8004680 <drawChar+0x94>
            }
        }

    } // End classic vs custom font
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	3724      	adds	r7, #36	@ 0x24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	20000034 	.word	0x20000034

0800476c <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	2b0a      	cmp	r3, #10
 800477a:	d112      	bne.n	80047a2 <write+0x36>
            cursor_x  = 0;
 800477c:	4b47      	ldr	r3, [pc, #284]	@ (800489c <write+0x130>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004782:	4b47      	ldr	r3, [pc, #284]	@ (80048a0 <write+0x134>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330a      	adds	r3, #10
 8004788:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 800478a:	4b46      	ldr	r3, [pc, #280]	@ (80048a4 <write+0x138>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	fb12 f303 	smulbb	r3, r2, r3
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b44      	ldr	r3, [pc, #272]	@ (80048a8 <write+0x13c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4413      	add	r3, r2
 800479a:	b2da      	uxtb	r2, r3
 800479c:	4b42      	ldr	r3, [pc, #264]	@ (80048a8 <write+0x13c>)
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e077      	b.n	8004892 <write+0x126>
        } else if(c != '\r') {
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b0d      	cmp	r3, #13
 80047a6:	d074      	beq.n	8004892 <write+0x126>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80047a8:	4b3d      	ldr	r3, [pc, #244]	@ (80048a0 <write+0x134>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80047b2:	79fa      	ldrb	r2, [r7, #7]
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d36b      	bcc.n	8004892 <write+0x126>
 80047ba:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <write+0x134>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3309      	adds	r3, #9
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	79fa      	ldrb	r2, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d864      	bhi.n	8004892 <write+0x126>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 80047c8:	79fa      	ldrb	r2, [r7, #7]
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	00db      	lsls	r3, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80047d0:	4a33      	ldr	r2, [pc, #204]	@ (80048a0 <write+0x134>)
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	3204      	adds	r2, #4
 80047d6:	8812      	ldrh	r2, [r2, #0]
                  &gfxFont->glyph))[c - first]);
 80047d8:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80047da:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	3302      	adds	r3, #2
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3303      	adds	r3, #3
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d041      	beq.n	8004876 <write+0x10a>
 80047f2:	7bbb      	ldrb	r3, [r7, #14]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d03e      	beq.n	8004876 <write+0x10a>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3305      	adds	r3, #5
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b25b      	sxtb	r3, r3
 8004800:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004802:	4b2a      	ldr	r3, [pc, #168]	@ (80048ac <write+0x140>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d022      	beq.n	8004850 <write+0xe4>
 800480a:	4b24      	ldr	r3, [pc, #144]	@ (800489c <write+0x130>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	4619      	mov	r1, r3
 8004810:	4b24      	ldr	r3, [pc, #144]	@ (80048a4 <write+0x138>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	4413      	add	r3, r2
 800481e:	fb00 f303 	mul.w	r3, r0, r3
 8004822:	440b      	add	r3, r1
 8004824:	4a22      	ldr	r2, [pc, #136]	@ (80048b0 <write+0x144>)
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	4293      	cmp	r3, r2
 800482a:	dd11      	ble.n	8004850 <write+0xe4>
                        cursor_x  = 0;
 800482c:	4b1b      	ldr	r3, [pc, #108]	@ (800489c <write+0x130>)
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004832:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <write+0x134>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330a      	adds	r3, #10
 8004838:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 800483a:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <write+0x138>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	fb12 f303 	smulbb	r3, r2, r3
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b18      	ldr	r3, [pc, #96]	@ (80048a8 <write+0x13c>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4413      	add	r3, r2
 800484a:	b2da      	uxtb	r2, r3
 800484c:	4b16      	ldr	r3, [pc, #88]	@ (80048a8 <write+0x13c>)
 800484e:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8004850:	4b12      	ldr	r3, [pc, #72]	@ (800489c <write+0x130>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b218      	sxth	r0, r3
 8004856:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <write+0x13c>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b219      	sxth	r1, r3
 800485c:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <write+0x148>)
 800485e:	881d      	ldrh	r5, [r3, #0]
 8004860:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <write+0x14c>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	4a0f      	ldr	r2, [pc, #60]	@ (80048a4 <write+0x138>)
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	79fc      	ldrb	r4, [r7, #7]
 800486a:	9201      	str	r2, [sp, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	462b      	mov	r3, r5
 8004870:	4622      	mov	r2, r4
 8004872:	f7ff febb 	bl	80045ec <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3304      	adds	r3, #4
 800487a:	781a      	ldrb	r2, [r3, #0]
 800487c:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <write+0x138>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	fb12 f303 	smulbb	r3, r2, r3
 8004884:	b2da      	uxtb	r2, r3
 8004886:	4b05      	ldr	r3, [pc, #20]	@ (800489c <write+0x130>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	4413      	add	r3, r2
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4b03      	ldr	r3, [pc, #12]	@ (800489c <write+0x130>)
 8004890:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8004892:	2301      	movs	r3, #1
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bdb0      	pop	{r4, r5, r7, pc}
 800489c:	20000087 	.word	0x20000087
 80048a0:	20000034 	.word	0x20000034
 80048a4:	20000008 	.word	0x20000008
 80048a8:	20000086 	.word	0x20000086
 80048ac:	2000000e 	.word	0x2000000e
 80048b0:	20000004 	.word	0x20000004
 80048b4:	2000000a 	.word	0x2000000a
 80048b8:	2000000c 	.word	0x2000000c

080048bc <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 80048ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <setFont+0x4c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d110      	bne.n	80048f4 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 80048d2:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <setFont+0x50>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	3306      	adds	r3, #6
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <setFont+0x50>)
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e009      	b.n	80048f4 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 80048e0:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <setFont+0x4c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 80048e8:	4b08      	ldr	r3, [pc, #32]	@ (800490c <setFont+0x50>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	3b06      	subs	r3, #6
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <setFont+0x50>)
 80048f2:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 80048f4:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <setFont+0x4c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000034 	.word	0x20000034
 800490c:	20000086 	.word	0x20000086

08004910 <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	461a      	mov	r2, r3
 800491c:	460b      	mov	r3, r1
 800491e:	817b      	strh	r3, [r7, #10]
 8004920:	4613      	mov	r3, r2
 8004922:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ffc9 	bl	80048bc <setFont>
	textcolor = txtcolor;
 800492a:	4a11      	ldr	r2, [pc, #68]	@ (8004970 <printnewtstr+0x60>)
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8004930:	7a7b      	ldrb	r3, [r7, #9]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <printnewtstr+0x2a>
 8004936:	7a7b      	ldrb	r3, [r7, #9]
 8004938:	e000      	b.n	800493c <printnewtstr+0x2c>
 800493a:	2301      	movs	r3, #1
 800493c:	4a0d      	ldr	r2, [pc, #52]	@ (8004974 <printnewtstr+0x64>)
 800493e:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	b21b      	sxth	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	2000      	movs	r0, #0
 8004948:	f000 f816 	bl	8004978 <setCursor>
	while (*str) write (*str++);
 800494c:	e006      	b.n	800495c <printnewtstr+0x4c>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	61ba      	str	r2, [r7, #24]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff08 	bl	800476c <write>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f4      	bne.n	800494e <printnewtstr+0x3e>
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	2000000a 	.word	0x2000000a
 8004974:	20000008 	.word	0x20000008

08004978 <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	460a      	mov	r2, r1
 8004982:	80fb      	strh	r3, [r7, #6]
 8004984:	4613      	mov	r3, r2
 8004986:	80bb      	strh	r3, [r7, #4]
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <setCursor+0x2c>)
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	88bb      	ldrh	r3, [r7, #4]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <setCursor+0x30>)
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	20000087 	.word	0x20000087
 80049a8:	20000086 	.word	0x20000086

080049ac <getRotation>:

uint8_t getRotation (void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
	return rotation;
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <getRotation+0x14>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000088 	.word	0x20000088

080049c4 <scrollup>:

void scrollup (uint16_t speed)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	80fb      	strh	r3, [r7, #6]
     uint16_t maxscroll;
     if (getRotation() & 1) maxscroll = width();
 80049ce:	f7ff ffed 	bl	80049ac <getRotation>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <scrollup+0x22>
 80049dc:	f7fb ffea 	bl	80009b4 <width>
 80049e0:	4603      	mov	r3, r0
 80049e2:	81fb      	strh	r3, [r7, #14]
 80049e4:	e003      	b.n	80049ee <scrollup+0x2a>
     else maxscroll = height();
 80049e6:	f7fb fff1 	bl	80009cc <height>
 80049ea:	4603      	mov	r3, r0
 80049ec:	81fb      	strh	r3, [r7, #14]
     for (uint16_t i = 1; i <= maxscroll; i++)
 80049ee:	2301      	movs	r3, #1
 80049f0:	81bb      	strh	r3, [r7, #12]
 80049f2:	e01b      	b.n	8004a2c <scrollup+0x68>
     {
          vertScroll(0, maxscroll, i);
 80049f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80049fc:	4619      	mov	r1, r3
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7fe fd62 	bl	80034c8 <vertScroll>
         if (speed < 655) delay(speed*100);
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	f240 228e 	movw	r2, #654	@ 0x28e
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d807      	bhi.n	8004a1e <scrollup+0x5a>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2264      	movs	r2, #100	@ 0x64
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb ff66 	bl	80008e8 <delay>
 8004a1c:	e003      	b.n	8004a26 <scrollup+0x62>
         else HAL_Delay(speed);
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f8a9 	bl	8004b78 <HAL_Delay>
     for (uint16_t i = 1; i <= maxscroll; i++)
 8004a26:	89bb      	ldrh	r3, [r7, #12]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	81bb      	strh	r3, [r7, #12]
 8004a2c:	89ba      	ldrh	r2, [r7, #12]
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d9df      	bls.n	80049f4 <scrollup+0x30>
     }

}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a44:	f7fb ff3e 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a48:	480c      	ldr	r0, [pc, #48]	@ (8004a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a4a:	490d      	ldr	r1, [pc, #52]	@ (8004a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a50:	e002      	b.n	8004a58 <LoopCopyDataInit>

08004a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a56:	3304      	adds	r3, #4

08004a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a5c:	d3f9      	bcc.n	8004a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a60:	4c0a      	ldr	r4, [pc, #40]	@ (8004a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a64:	e001      	b.n	8004a6a <LoopFillZerobss>

08004a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a68:	3204      	adds	r2, #4

08004a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a6c:	d3fb      	bcc.n	8004a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a6e:	f001 fa5d 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a72:	f7fb fd29 	bl	80004c8 <main>
  bx  lr    
 8004a76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a80:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8004a84:	08006ef8 	.word	0x08006ef8
  ldr r2, =_sbss
 8004a88:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8004a8c:	200000a8 	.word	0x200000a8

08004a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a90:	e7fe      	b.n	8004a90 <ADC_IRQHandler>
	...

08004a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <HAL_Init+0x40>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <HAL_Init+0x40>)
 8004a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_Init+0x40>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad4 <HAL_Init+0x40>)
 8004aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HAL_Init+0x40>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a07      	ldr	r2, [pc, #28]	@ (8004ad4 <HAL_Init+0x40>)
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004abc:	2003      	movs	r0, #3
 8004abe:	f000 f931 	bl	8004d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ac2:	200f      	movs	r0, #15
 8004ac4:	f000 f808 	bl	8004ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ac8:	f7fb fe82 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00

08004ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ae0:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_InitTick+0x54>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_InitTick+0x58>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f93b 	bl	8004d72 <HAL_SYSTICK_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e00e      	b.n	8004b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b0f      	cmp	r3, #15
 8004b0a:	d80a      	bhi.n	8004b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	f000 f911 	bl	8004d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b18:	4a06      	ldr	r2, [pc, #24]	@ (8004b34 <HAL_InitTick+0x5c>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000000 	.word	0x20000000
 8004b30:	20000014 	.word	0x20000014
 8004b34:	20000010 	.word	0x20000010

08004b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b3c:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <HAL_IncTick+0x20>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_IncTick+0x24>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4413      	add	r3, r2
 8004b48:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <HAL_IncTick+0x24>)
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000014 	.word	0x20000014
 8004b5c:	200000a4 	.word	0x200000a4

08004b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return uwTick;
 8004b64:	4b03      	ldr	r3, [pc, #12]	@ (8004b74 <HAL_GetTick+0x14>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	200000a4 	.word	0x200000a4

08004b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b80:	f7ff ffee 	bl	8004b60 <HAL_GetTick>
 8004b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d005      	beq.n	8004b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b92:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <HAL_Delay+0x44>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b9e:	bf00      	nop
 8004ba0:	f7ff ffde 	bl	8004b60 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d8f7      	bhi.n	8004ba0 <HAL_Delay+0x28>
  {
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000014 	.word	0x20000014

08004bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf2:	4a04      	ldr	r2, [pc, #16]	@ (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	60d3      	str	r3, [r2, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__NVIC_GetPriorityGrouping+0x18>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	f003 0307 	and.w	r3, r3, #7
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db0a      	blt.n	8004c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	490c      	ldr	r1, [pc, #48]	@ (8004c70 <__NVIC_SetPriority+0x4c>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	0112      	lsls	r2, r2, #4
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	440b      	add	r3, r1
 8004c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c4c:	e00a      	b.n	8004c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4908      	ldr	r1, [pc, #32]	@ (8004c74 <__NVIC_SetPriority+0x50>)
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	3b04      	subs	r3, #4
 8004c5c:	0112      	lsls	r2, r2, #4
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	440b      	add	r3, r1
 8004c62:	761a      	strb	r2, [r3, #24]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	e000e100 	.word	0xe000e100
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b089      	sub	sp, #36	@ 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f1c3 0307 	rsb	r3, r3, #7
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	bf28      	it	cs
 8004c96:	2304      	movcs	r3, #4
 8004c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d902      	bls.n	8004ca8 <NVIC_EncodePriority+0x30>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3b03      	subs	r3, #3
 8004ca6:	e000      	b.n	8004caa <NVIC_EncodePriority+0x32>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	401a      	ands	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	43d9      	mvns	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd0:	4313      	orrs	r3, r2
         );
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3724      	adds	r7, #36	@ 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf0:	d301      	bcc.n	8004cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00f      	b.n	8004d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d20 <SysTick_Config+0x40>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cfe:	210f      	movs	r1, #15
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	f7ff ff8e 	bl	8004c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <SysTick_Config+0x40>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <SysTick_Config+0x40>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010

08004d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff47 	bl	8004bc0 <__NVIC_SetPriorityGrouping>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d4c:	f7ff ff5c 	bl	8004c08 <__NVIC_GetPriorityGrouping>
 8004d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	f7ff ff8e 	bl	8004c78 <NVIC_EncodePriority>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff5d 	bl	8004c24 <__NVIC_SetPriority>
}
 8004d6a:	bf00      	nop
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffb0 	bl	8004ce0 <SysTick_Config>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	@ 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e159      	b.n	800505c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f040 8148 	bne.w	8005056 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d005      	beq.n	8004dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d130      	bne.n	8004e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e14:	2201      	movs	r2, #1
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 0201 	and.w	r2, r3, #1
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d017      	beq.n	8004e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d123      	bne.n	8004ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	08da      	lsrs	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3208      	adds	r2, #8
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a2 	beq.w	8005056 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	4b57      	ldr	r3, [pc, #348]	@ (8005074 <HAL_GPIO_Init+0x2e8>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	4a56      	ldr	r2, [pc, #344]	@ (8005074 <HAL_GPIO_Init+0x2e8>)
 8004f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f22:	4b54      	ldr	r3, [pc, #336]	@ (8005074 <HAL_GPIO_Init+0x2e8>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2e:	4a52      	ldr	r2, [pc, #328]	@ (8005078 <HAL_GPIO_Init+0x2ec>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a49      	ldr	r2, [pc, #292]	@ (800507c <HAL_GPIO_Init+0x2f0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d019      	beq.n	8004f8e <HAL_GPIO_Init+0x202>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a48      	ldr	r2, [pc, #288]	@ (8005080 <HAL_GPIO_Init+0x2f4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_GPIO_Init+0x1fe>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a47      	ldr	r2, [pc, #284]	@ (8005084 <HAL_GPIO_Init+0x2f8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00d      	beq.n	8004f86 <HAL_GPIO_Init+0x1fa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a46      	ldr	r2, [pc, #280]	@ (8005088 <HAL_GPIO_Init+0x2fc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <HAL_GPIO_Init+0x1f6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a45      	ldr	r2, [pc, #276]	@ (800508c <HAL_GPIO_Init+0x300>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <HAL_GPIO_Init+0x1f2>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e008      	b.n	8004f90 <HAL_GPIO_Init+0x204>
 8004f7e:	2307      	movs	r3, #7
 8004f80:	e006      	b.n	8004f90 <HAL_GPIO_Init+0x204>
 8004f82:	2303      	movs	r3, #3
 8004f84:	e004      	b.n	8004f90 <HAL_GPIO_Init+0x204>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e002      	b.n	8004f90 <HAL_GPIO_Init+0x204>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_GPIO_Init+0x204>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	f002 0203 	and.w	r2, r2, #3
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	4093      	lsls	r3, r2
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa0:	4935      	ldr	r1, [pc, #212]	@ (8005078 <HAL_GPIO_Init+0x2ec>)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fae:	4b38      	ldr	r3, [pc, #224]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ffc:	4a24      	ldr	r2, [pc, #144]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005002:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	43db      	mvns	r3, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4013      	ands	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005026:	4a1a      	ldr	r2, [pc, #104]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800502c:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <HAL_GPIO_Init+0x304>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005050:	4a0f      	ldr	r2, [pc, #60]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	f67f aea2 	bls.w	8004da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3724      	adds	r7, #36	@ 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	40013800 	.word	0x40013800
 800507c:	40020000 	.word	0x40020000
 8005080:	40020400 	.word	0x40020400
 8005084:	40020800 	.word	0x40020800
 8005088:	40020c00 	.word	0x40020c00
 800508c:	40021000 	.word	0x40021000
 8005090:	40013c00 	.word	0x40013c00

08005094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
 80050a0:	4613      	mov	r3, r2
 80050a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a4:	787b      	ldrb	r3, [r7, #1]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050aa:	887a      	ldrh	r2, [r7, #2]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050b0:	e003      	b.n	80050ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050b2:	887b      	ldrh	r3, [r7, #2]
 80050b4:	041a      	lsls	r2, r3, #16
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	619a      	str	r2, [r3, #24]
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e267      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d075      	beq.n	80051d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e6:	4b88      	ldr	r3, [pc, #544]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d00c      	beq.n	800510c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f2:	4b85      	ldr	r3, [pc, #532]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d112      	bne.n	8005124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fe:	4b82      	ldr	r3, [pc, #520]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510a:	d10b      	bne.n	8005124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	4b7e      	ldr	r3, [pc, #504]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05b      	beq.n	80051d0 <HAL_RCC_OscConfig+0x108>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d157      	bne.n	80051d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e242      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512c:	d106      	bne.n	800513c <HAL_RCC_OscConfig+0x74>
 800512e:	4b76      	ldr	r3, [pc, #472]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e01d      	b.n	8005178 <HAL_RCC_OscConfig+0xb0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005144:	d10c      	bne.n	8005160 <HAL_RCC_OscConfig+0x98>
 8005146:	4b70      	ldr	r3, [pc, #448]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6f      	ldr	r2, [pc, #444]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800514c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4b6d      	ldr	r3, [pc, #436]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a6c      	ldr	r2, [pc, #432]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e00b      	b.n	8005178 <HAL_RCC_OscConfig+0xb0>
 8005160:	4b69      	ldr	r3, [pc, #420]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a68      	ldr	r2, [pc, #416]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4b66      	ldr	r3, [pc, #408]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a65      	ldr	r2, [pc, #404]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7ff fcee 	bl	8004b60 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005188:	f7ff fcea 	bl	8004b60 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	@ 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e207      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b5b      	ldr	r3, [pc, #364]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0xc0>
 80051a6:	e014      	b.n	80051d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7ff fcda 	bl	8004b60 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b0:	f7ff fcd6 	bl	8004b60 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	@ 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e1f3      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c2:	4b51      	ldr	r3, [pc, #324]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0xe8>
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051de:	4b4a      	ldr	r3, [pc, #296]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b47      	ldr	r3, [pc, #284]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d11c      	bne.n	8005230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b44      	ldr	r3, [pc, #272]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	4b41      	ldr	r3, [pc, #260]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCC_OscConfig+0x152>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1c7      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b3b      	ldr	r3, [pc, #236]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4937      	ldr	r1, [pc, #220]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	e03a      	b.n	80052a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005238:	4b34      	ldr	r3, [pc, #208]	@ (800530c <HAL_RCC_OscConfig+0x244>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7ff fc8f 	bl	8004b60 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005246:	f7ff fc8b 	bl	8004b60 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1a8      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	4b2b      	ldr	r3, [pc, #172]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005264:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4925      	ldr	r1, [pc, #148]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]
 8005278:	e015      	b.n	80052a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b24      	ldr	r3, [pc, #144]	@ (800530c <HAL_RCC_OscConfig+0x244>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7ff fc6e 	bl	8004b60 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005288:	f7ff fc6a 	bl	8004b60 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e187      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d036      	beq.n	8005320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <HAL_RCC_OscConfig+0x248>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7ff fc4e 	bl	8004b60 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c8:	f7ff fc4a 	bl	8004b60 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e167      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_OscConfig+0x240>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x200>
 80052e6:	e01b      	b.n	8005320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e8:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <HAL_RCC_OscConfig+0x248>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7ff fc37 	bl	8004b60 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	e00e      	b.n	8005314 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f6:	f7ff fc33 	bl	8004b60 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d907      	bls.n	8005314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e150      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005314:	4b88      	ldr	r3, [pc, #544]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ea      	bne.n	80052f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8097 	beq.w	800545c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005332:	4b81      	ldr	r3, [pc, #516]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	4b7d      	ldr	r3, [pc, #500]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	4a7c      	ldr	r2, [pc, #496]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	@ 0x40
 800534e:	4b7a      	ldr	r3, [pc, #488]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535e:	4b77      	ldr	r3, [pc, #476]	@ (800553c <HAL_RCC_OscConfig+0x474>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536a:	4b74      	ldr	r3, [pc, #464]	@ (800553c <HAL_RCC_OscConfig+0x474>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	@ (800553c <HAL_RCC_OscConfig+0x474>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7ff fbf3 	bl	8004b60 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7ff fbef 	bl	8004b60 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e10c      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCC_OscConfig+0x474>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x2ea>
 80053a4:	4b64      	ldr	r3, [pc, #400]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a8:	4a63      	ldr	r2, [pc, #396]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b0:	e01c      	b.n	80053ec <HAL_RCC_OscConfig+0x324>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x30c>
 80053ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053be:	4a5e      	ldr	r2, [pc, #376]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053c0:	f043 0304 	orr.w	r3, r3, #4
 80053c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0x324>
 80053d4:	4b58      	ldr	r3, [pc, #352]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d8:	4a57      	ldr	r2, [pc, #348]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e0:	4b55      	ldr	r3, [pc, #340]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	4a54      	ldr	r2, [pc, #336]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80053e6:	f023 0304 	bic.w	r3, r3, #4
 80053ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d015      	beq.n	8005420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7ff fbb4 	bl	8004b60 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fc:	f7ff fbb0 	bl	8004b60 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0cb      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	4b49      	ldr	r3, [pc, #292]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ee      	beq.n	80053fc <HAL_RCC_OscConfig+0x334>
 800541e:	e014      	b.n	800544a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005420:	f7ff fb9e 	bl	8004b60 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7ff fb9a 	bl	8004b60 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0b5      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	4b3e      	ldr	r3, [pc, #248]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ee      	bne.n	8005428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b39      	ldr	r3, [pc, #228]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	4a38      	ldr	r2, [pc, #224]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a1 	beq.w	80055a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005466:	4b34      	ldr	r3, [pc, #208]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b08      	cmp	r3, #8
 8005470:	d05c      	beq.n	800552c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d141      	bne.n	80054fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b31      	ldr	r3, [pc, #196]	@ (8005540 <HAL_RCC_OscConfig+0x478>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7ff fb6e 	bl	8004b60 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005488:	f7ff fb6a 	bl	8004b60 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e087      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	491b      	ldr	r1, [pc, #108]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <HAL_RCC_OscConfig+0x478>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d6:	f7ff fb43 	bl	8004b60 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054de:	f7ff fb3f 	bl	8004b60 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e05c      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x416>
 80054fc:	e054      	b.n	80055a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <HAL_RCC_OscConfig+0x478>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7ff fb2c 	bl	8004b60 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800550c:	f7ff fb28 	bl	8004b60 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e045      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCC_OscConfig+0x470>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x444>
 800552a:	e03d      	b.n	80055a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d107      	bne.n	8005544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e038      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
 8005538:	40023800 	.word	0x40023800
 800553c:	40007000 	.word	0x40007000
 8005540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005544:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <HAL_RCC_OscConfig+0x4ec>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d028      	beq.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d121      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d11a      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800557a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800557c:	4293      	cmp	r3, r2
 800557e:	d111      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	3b01      	subs	r3, #1
 800558e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800

080055b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0cc      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055cc:	4b68      	ldr	r3, [pc, #416]	@ (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d90c      	bls.n	80055f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b65      	ldr	r3, [pc, #404]	@ (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	4b63      	ldr	r3, [pc, #396]	@ (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0b8      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800560c:	4b59      	ldr	r3, [pc, #356]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a58      	ldr	r2, [pc, #352]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005624:	4b53      	ldr	r3, [pc, #332]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a52      	ldr	r2, [pc, #328]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800562e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005630:	4b50      	ldr	r3, [pc, #320]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	494d      	ldr	r1, [pc, #308]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d044      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d107      	bne.n	8005666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005656:	4b47      	ldr	r3, [pc, #284]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d119      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d003      	beq.n	8005676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005672:	2b03      	cmp	r3, #3
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005676:	4b3f      	ldr	r3, [pc, #252]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e06f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005686:	4b3b      	ldr	r3, [pc, #236]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e067      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005696:	4b37      	ldr	r3, [pc, #220]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f023 0203 	bic.w	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4934      	ldr	r1, [pc, #208]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a8:	f7ff fa5a 	bl	8004b60 <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b0:	f7ff fa56 	bl	8004b60 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e04f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 020c 	and.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1eb      	bne.n	80056b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d8:	4b25      	ldr	r3, [pc, #148]	@ (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d20c      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e6:	4b22      	ldr	r3, [pc, #136]	@ (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ee:	4b20      	ldr	r3, [pc, #128]	@ (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d001      	beq.n	8005700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e032      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570c:	4b19      	ldr	r3, [pc, #100]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4916      	ldr	r1, [pc, #88]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572a:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	490e      	ldr	r1, [pc, #56]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573e:	f000 f821 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 8005742:	4602      	mov	r2, r0
 8005744:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	490a      	ldr	r1, [pc, #40]	@ (8005778 <HAL_RCC_ClockConfig+0x1c0>)
 8005750:	5ccb      	ldrb	r3, [r1, r3]
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	4a09      	ldr	r2, [pc, #36]	@ (800577c <HAL_RCC_ClockConfig+0x1c4>)
 8005758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <HAL_RCC_ClockConfig+0x1c8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f9ba 	bl	8004ad8 <HAL_InitTick>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40023c00 	.word	0x40023c00
 8005774:	40023800 	.word	0x40023800
 8005778:	08006964 	.word	0x08006964
 800577c:	20000000 	.word	0x20000000
 8005780:	20000010 	.word	0x20000010

08005784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005788:	b090      	sub	sp, #64	@ 0x40
 800578a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005790:	2300      	movs	r3, #0
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005794:	2300      	movs	r3, #0
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800579c:	4b59      	ldr	r3, [pc, #356]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x180>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 030c 	and.w	r3, r3, #12
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d00d      	beq.n	80057c4 <HAL_RCC_GetSysClockFreq+0x40>
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	f200 80a1 	bhi.w	80058f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x34>
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d003      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x3a>
 80057b6:	e09b      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057b8:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCC_GetSysClockFreq+0x184>)
 80057ba:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80057bc:	e09b      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057be:	4b53      	ldr	r3, [pc, #332]	@ (800590c <HAL_RCC_GetSysClockFreq+0x188>)
 80057c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057c2:	e098      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x180>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d028      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057da:	4b4a      	ldr	r3, [pc, #296]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x180>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	2200      	movs	r2, #0
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057ec:	2100      	movs	r1, #0
 80057ee:	4b47      	ldr	r3, [pc, #284]	@ (800590c <HAL_RCC_GetSysClockFreq+0x188>)
 80057f0:	fb03 f201 	mul.w	r2, r3, r1
 80057f4:	2300      	movs	r3, #0
 80057f6:	fb00 f303 	mul.w	r3, r0, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	4a43      	ldr	r2, [pc, #268]	@ (800590c <HAL_RCC_GetSysClockFreq+0x188>)
 80057fe:	fba0 1202 	umull	r1, r2, r0, r2
 8005802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005804:	460a      	mov	r2, r1
 8005806:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800580a:	4413      	add	r3, r2
 800580c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	2200      	movs	r2, #0
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	61fa      	str	r2, [r7, #28]
 8005816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800581a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800581e:	f7fa fcdb 	bl	80001d8 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4613      	mov	r3, r2
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800582a:	e053      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582c:	4b35      	ldr	r3, [pc, #212]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x180>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	099b      	lsrs	r3, r3, #6
 8005832:	2200      	movs	r2, #0
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	617a      	str	r2, [r7, #20]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800583e:	f04f 0b00 	mov.w	fp, #0
 8005842:	4652      	mov	r2, sl
 8005844:	465b      	mov	r3, fp
 8005846:	f04f 0000 	mov.w	r0, #0
 800584a:	f04f 0100 	mov.w	r1, #0
 800584e:	0159      	lsls	r1, r3, #5
 8005850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005854:	0150      	lsls	r0, r2, #5
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	ebb2 080a 	subs.w	r8, r2, sl
 800585e:	eb63 090b 	sbc.w	r9, r3, fp
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800586e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005872:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005876:	ebb2 0408 	subs.w	r4, r2, r8
 800587a:	eb63 0509 	sbc.w	r5, r3, r9
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	00eb      	lsls	r3, r5, #3
 8005888:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588c:	00e2      	lsls	r2, r4, #3
 800588e:	4614      	mov	r4, r2
 8005890:	461d      	mov	r5, r3
 8005892:	eb14 030a 	adds.w	r3, r4, sl
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	eb45 030b 	adc.w	r3, r5, fp
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058aa:	4629      	mov	r1, r5
 80058ac:	028b      	lsls	r3, r1, #10
 80058ae:	4621      	mov	r1, r4
 80058b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058b4:	4621      	mov	r1, r4
 80058b6:	028a      	lsls	r2, r1, #10
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058be:	2200      	movs	r2, #0
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	60fa      	str	r2, [r7, #12]
 80058c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058c8:	f7fa fc86 	bl	80001d8 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4613      	mov	r3, r2
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005904 <HAL_RCC_GetSysClockFreq+0x180>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	3301      	adds	r3, #1
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80058e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058ee:	e002      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058f0:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <HAL_RCC_GetSysClockFreq+0x184>)
 80058f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3740      	adds	r7, #64	@ 0x40
 80058fc:	46bd      	mov	sp, r7
 80058fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005902:	bf00      	nop
 8005904:	40023800 	.word	0x40023800
 8005908:	00f42400 	.word	0x00f42400
 800590c:	017d7840 	.word	0x017d7840

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e041      	b.n	80059a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fa ff72 	bl	8000820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 f950 	bl	8005bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e03c      	b.n	8005a42 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a50 <HAL_TIM_Base_Start+0xa0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <HAL_TIM_Base_Start+0x5c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e2:	d013      	beq.n	8005a0c <HAL_TIM_Base_Start+0x5c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a54 <HAL_TIM_Base_Start+0xa4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <HAL_TIM_Base_Start+0x5c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <HAL_TIM_Base_Start+0xa8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_TIM_Base_Start+0x5c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <HAL_TIM_Base_Start+0xac>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_TIM_Base_Start+0x5c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a16      	ldr	r2, [pc, #88]	@ (8005a60 <HAL_TIM_Base_Start+0xb0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d111      	bne.n	8005a30 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d010      	beq.n	8005a40 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0201 	orr.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	e007      	b.n	8005a40 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40014000 	.word	0x40014000

08005a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_ConfigClockSource+0x1c>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0b4      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x186>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab8:	d03e      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0xd4>
 8005aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005abe:	f200 8087 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac6:	f000 8086 	beq.w	8005bd6 <HAL_TIM_ConfigClockSource+0x172>
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ace:	d87f      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b70      	cmp	r3, #112	@ 0x70
 8005ad2:	d01a      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xa6>
 8005ad4:	2b70      	cmp	r3, #112	@ 0x70
 8005ad6:	d87b      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b60      	cmp	r3, #96	@ 0x60
 8005ada:	d050      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x11a>
 8005adc:	2b60      	cmp	r3, #96	@ 0x60
 8005ade:	d877      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b50      	cmp	r3, #80	@ 0x50
 8005ae2:	d03c      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0xfa>
 8005ae4:	2b50      	cmp	r3, #80	@ 0x50
 8005ae6:	d873      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d058      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x13a>
 8005aec:	2b40      	cmp	r3, #64	@ 0x40
 8005aee:	d86f      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b30      	cmp	r3, #48	@ 0x30
 8005af2:	d064      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	2b30      	cmp	r3, #48	@ 0x30
 8005af6:	d86b      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d060      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d867      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d05c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d05a      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x15a>
 8005b08:	e062      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	f000 f971 	bl	8005e00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	609a      	str	r2, [r3, #8]
      break;
 8005b36:	e04f      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b48:	f000 f95a 	bl	8005e00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b5a:	609a      	str	r2, [r3, #8]
      break;
 8005b5c:	e03c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 f8ce 	bl	8005d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2150      	movs	r1, #80	@ 0x50
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f927 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e02c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 f8ed 	bl	8005d6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2160      	movs	r1, #96	@ 0x60
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f917 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e01c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 f8ae 	bl	8005d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2140      	movs	r1, #64	@ 0x40
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f907 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e00c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f000 f8fe 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 8005bce:	e003      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3a      	ldr	r2, [pc, #232]	@ (8005cf0 <TIM_Base_SetConfig+0xfc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00f      	beq.n	8005c2c <TIM_Base_SetConfig+0x38>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c12:	d00b      	beq.n	8005c2c <TIM_Base_SetConfig+0x38>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a37      	ldr	r2, [pc, #220]	@ (8005cf4 <TIM_Base_SetConfig+0x100>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <TIM_Base_SetConfig+0x38>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a36      	ldr	r2, [pc, #216]	@ (8005cf8 <TIM_Base_SetConfig+0x104>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0x38>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a35      	ldr	r2, [pc, #212]	@ (8005cfc <TIM_Base_SetConfig+0x108>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf0 <TIM_Base_SetConfig+0xfc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01b      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4c:	d017      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a28      	ldr	r2, [pc, #160]	@ (8005cf4 <TIM_Base_SetConfig+0x100>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a27      	ldr	r2, [pc, #156]	@ (8005cf8 <TIM_Base_SetConfig+0x104>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a26      	ldr	r2, [pc, #152]	@ (8005cfc <TIM_Base_SetConfig+0x108>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a25      	ldr	r2, [pc, #148]	@ (8005d00 <TIM_Base_SetConfig+0x10c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a24      	ldr	r2, [pc, #144]	@ (8005d04 <TIM_Base_SetConfig+0x110>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_Base_SetConfig+0x8a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a23      	ldr	r2, [pc, #140]	@ (8005d08 <TIM_Base_SetConfig+0x114>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8005cf0 <TIM_Base_SetConfig+0xfc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	611a      	str	r2, [r3, #16]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 030a 	bic.w	r3, r3, #10
 8005d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b087      	sub	sp, #28
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f023 0210 	bic.w	r2, r3, #16
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	031b      	lsls	r3, r3, #12
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005da6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f043 0307 	orr.w	r3, r3, #7
 8005dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	609a      	str	r2, [r3, #8]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	021a      	lsls	r2, r3, #8
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e050      	b.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea4:	d013      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a18      	ldr	r2, [pc, #96]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a13      	ldr	r2, [pc, #76]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40014000 	.word	0x40014000

08005f1c <memset>:
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f64 <__libc_init_array+0x38>)
 8005f30:	4c0d      	ldr	r4, [pc, #52]	@ (8005f68 <__libc_init_array+0x3c>)
 8005f32:	1b64      	subs	r4, r4, r5
 8005f34:	10a4      	asrs	r4, r4, #2
 8005f36:	2600      	movs	r6, #0
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f6c <__libc_init_array+0x40>)
 8005f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f70 <__libc_init_array+0x44>)
 8005f40:	f000 f818 	bl	8005f74 <_init>
 8005f44:	1b64      	subs	r4, r4, r5
 8005f46:	10a4      	asrs	r4, r4, #2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	08006ef0 	.word	0x08006ef0
 8005f68:	08006ef0 	.word	0x08006ef0
 8005f6c:	08006ef0 	.word	0x08006ef0
 8005f70:	08006ef4 	.word	0x08006ef4

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
