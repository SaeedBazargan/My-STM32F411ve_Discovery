
FreeRTOS_Stm32F411Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800449c  0800449c  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a4  080044a4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080044ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041bc  2000006c  08004518  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004228  08004518  00006228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011794  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0a  00000000  00000000  00017830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c61  00000000  00000000  0001b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018be5  00000000  00000000  0001c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e6b  00000000  00000000  00034eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968fa  00000000  00000000  00046d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd61b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  000dd660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000e1f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800437c 	.word	0x0800437c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800437c 	.word	0x0800437c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000088 	.word	0x20000088
 8000500:	20000128 	.word	0x20000128

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc7 	bl	8000504 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x16>

	}
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b096      	sub	sp, #88	@ 0x58
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb29 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f867 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8cd 	bl	800073c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello FreeRTOS \n");
 80005a2:	4828      	ldr	r0, [pc, #160]	@ (8000644 <main+0xb4>)
 80005a4:	f003 fb00 	bl	8003ba8 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  simpleQueue = xQueueCreate(5, sizeof(int));
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2005      	movs	r0, #5
 80005ae:	f001 fedd 	bl	800236c <xQueueGenericCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a24      	ldr	r2, [pc, #144]	@ (8000648 <main+0xb8>)
 80005b6:	6013      	str	r3, [r2, #0]

  if(simpleQueue == 0)
 80005b8:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <main+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d103      	bne.n	80005c8 <main+0x38>
  {
	  printf("Unable to create Integer Queue \n");
 80005c0:	4822      	ldr	r0, [pc, #136]	@ (800064c <main+0xbc>)
 80005c2:	f003 faf1 	bl	8003ba8 <puts>
 80005c6:	e002      	b.n	80005ce <main+0x3e>
  }
  else
  {
	  printf("Integer Queue Created successfully \n");
 80005c8:	4821      	ldr	r0, [pc, #132]	@ (8000650 <main+0xc0>)
 80005ca:	f003 faed 	bl	8003ba8 <puts>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 128);
 80005ce:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <main+0xc4>)
 80005d0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80005e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fd54 	bl	8002096 <osThreadCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a19      	ldr	r2, [pc, #100]	@ (8000658 <main+0xc8>)
 80005f2:	6013      	str	r3, [r2, #0]

  osThreadDef(transmitTask, TransmitterTask, osPriorityNormal, 0, 128);
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <main+0xcc>)
 80005f6:	f107 0420 	add.w	r4, r7, #32
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTaskHandle = osThreadCreate(osThread(transmitTask), NULL);
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fd41 	bl	8002096 <osThreadCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <main+0xd0>)
 8000618:	6013      	str	r3, [r2, #0]

  osThreadDef(receiveTask, ReceiverTask, osPriorityNormal, 0, 128);
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <main+0xd4>)
 800061c:	1d3c      	adds	r4, r7, #4
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fd30 	bl	8002096 <osThreadCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <main+0xd8>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f001 fd24 	bl	8002088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0xb0>
 8000644:	08004394 	.word	0x08004394
 8000648:	20000334 	.word	0x20000334
 800064c:	080043a4 	.word	0x080043a4
 8000650:	080043c4 	.word	0x080043c4
 8000654:	080043f4 	.word	0x080043f4
 8000658:	20000328 	.word	0x20000328
 800065c:	08004420 	.word	0x08004420
 8000660:	2000032c 	.word	0x2000032c
 8000664:	08004448 	.word	0x08004448
 8000668:	20000330 	.word	0x20000330

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fb74 	bl	8003d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <SystemClock_Config+0xc8>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <SystemClock_Config+0xc8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <SystemClock_Config+0xcc>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemClock_Config+0xcc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006e0:	2364      	movs	r3, #100	@ 0x64
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd87 	bl	8001204 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 f8e2 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2103      	movs	r1, #3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 ffe9 	bl	80016f4 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000728:	f000 f8cc 	bl	80008c4 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a2a      	ldr	r2, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xc8>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xc8>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_GPIO_Init+0xc8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ac:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0xcc>)
 80007ae:	f000 fcdd 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4811      	ldr	r0, [pc, #68]	@ (800080c <MX_GPIO_Init+0xd0>)
 80007c8:	f000 fb34 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d6:	2302      	movs	r3, #2
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <MX_GPIO_Init+0xcc>)
 80007e6:	f000 fb25 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2106      	movs	r1, #6
 80007ee:	2006      	movs	r0, #6
 80007f0:	f000 faf6 	bl	8000de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f4:	2006      	movs	r0, #6
 80007f6:	f000 fb0f 	bl	8000e18 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40020000 	.word	0x40020000

08000810 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN_SET == (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <HAL_GPIO_EXTI_Callback+0x2c>)
 800081e:	f000 fc8d 	bl	800113c <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d105      	bne.n	8000834 <HAL_GPIO_EXTI_Callback+0x24>
	{
		vTaskNotifyGiveFromISR(mainTaskHandle, pdFALSE);
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x30>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fb66 	bl	8002f00 <vTaskNotifyGiveFromISR>
	}
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020000 	.word	0x40020000
 8000840:	20000328 	.word	0x20000328

08000844 <StartMainTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartMainTask(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifyValue;

	for(;;)
	{
		ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	2001      	movs	r0, #1
 8000852:	f002 fb09 	bl	8002e68 <ulTaskNotifyTake>
 8000856:	60f8      	str	r0, [r7, #12]
		if(ulNotifyValue != 0)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f6      	beq.n	800084c <StartMainTask+0x8>
		{
			printf("Hello from Main task \n");
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <StartMainTask+0x2c>)
 8000860:	f003 f9a2 	bl	8003ba8 <puts>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000864:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <StartMainTask+0x30>)
 800086a:	f000 fc98 	bl	800119e <HAL_GPIO_TogglePin>
		ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 800086e:	e7ed      	b.n	800084c <StartMainTask+0x8>
 8000870:	08004464 	.word	0x08004464
 8000874:	40020c00 	.word	0x40020c00

08000878 <TransmitterTask>:
		}
	}
}

void TransmitterTask(void const * argument)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <ReceiverTask>:

void ReceiverTask(void const * argument)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f9bd 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40014800 	.word	0x40014800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa63 	bl	8000de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	@ 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b2e      	ldr	r3, [pc, #184]	@ (80009f8 <HAL_InitTick+0xd0>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000940:	4a2d      	ldr	r2, [pc, #180]	@ (80009f8 <HAL_InitTick+0xd0>)
 8000942:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000946:	6453      	str	r3, [r2, #68]	@ 0x44
 8000948:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <HAL_InitTick+0xd0>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 020c 	add.w	r2, r7, #12
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f8d4 	bl	8001b0c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000964:	f001 f8be 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8000968:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800096c:	4a23      	ldr	r2, [pc, #140]	@ (80009fc <HAL_InitTick+0xd4>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	0c9b      	lsrs	r3, r3, #18
 8000974:	3b01      	subs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000978:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <HAL_InitTick+0xd8>)
 800097a:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <HAL_InitTick+0xdc>)
 800097c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <HAL_InitTick+0xd8>)
 8000980:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000984:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000986:	4a1e      	ldr	r2, [pc, #120]	@ (8000a00 <HAL_InitTick+0xd8>)
 8000988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <HAL_InitTick+0xd8>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <HAL_InitTick+0xd8>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <HAL_InitTick+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <HAL_InitTick+0xd8>)
 80009a0:	f001 f8e6 	bl	8001b70 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d11b      	bne.n	80009ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80009b2:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <HAL_InitTick+0xd8>)
 80009b4:	f001 f936 	bl	8001c24 <HAL_TIM_Base_Start_IT>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d111      	bne.n	80009ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009c6:	201a      	movs	r0, #26
 80009c8:	f000 fa26 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d808      	bhi.n	80009e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80009d2:	2200      	movs	r2, #0
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	201a      	movs	r0, #26
 80009d8:	f000 fa02 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <HAL_InitTick+0xe0>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e002      	b.n	80009ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	20000338 	.word	0x20000338
 8000a04:	40014800 	.word	0x40014800
 8000a08:	20000004 	.word	0x20000004

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <MemManage_Handler+0x4>

08000a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 fbc4 	bl	80011d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a56:	f001 f947 	bl	8001ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000338 	.word	0x20000338

08000a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
  }

  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f003 f9ba 	bl	8003eb0 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000380 	.word	0x20000380
 8000b70:	20004228 	.word	0x20004228

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9c:	f7ff ffea 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	@ (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f003 f979 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fce1 	bl	8000590 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000bdc:	080044ac 	.word	0x080044ac
  ldr r2, =_sbss
 8000be0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000be4:	20004228 	.word	0x20004228

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f7ff fe84 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe56 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000384 	.word	0x20000384

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000384 	.word	0x20000384

08000c70 <__NVIC_SetPriorityGrouping>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e159      	b.n	8001104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8148 	bne.w	80010fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80a2 	beq.w	80010fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a56      	ldr	r2, [pc, #344]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b54      	ldr	r3, [pc, #336]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <HAL_GPIO_Init+0x2ec>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_GPIO_Init+0x2f0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x202>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a48      	ldr	r2, [pc, #288]	@ (8001128 <HAL_GPIO_Init+0x2f4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x1fe>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a47      	ldr	r2, [pc, #284]	@ (800112c <HAL_GPIO_Init+0x2f8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x1fa>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a46      	ldr	r2, [pc, #280]	@ (8001130 <HAL_GPIO_Init+0x2fc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x1f6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a45      	ldr	r2, [pc, #276]	@ (8001134 <HAL_GPIO_Init+0x300>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x1f2>
 8001022:	2304      	movs	r3, #4
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001026:	2307      	movs	r3, #7
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x204>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x204>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	@ (8001120 <HAL_GPIO_Init+0x2ec>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a2f      	ldr	r2, [pc, #188]	@ (8001138 <HAL_GPIO_Init+0x304>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a24      	ldr	r2, [pc, #144]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f aea2 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	400b      	ands	r3, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fb0c 	bl	8000810 <HAL_GPIO_EXTI_Callback>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e267      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d075      	beq.n	800130e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	4b88      	ldr	r3, [pc, #544]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00c      	beq.n	8001248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122e:	4b85      	ldr	r3, [pc, #532]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001246:	d10b      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d05b      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d157      	bne.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e242      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x74>
 800126a:	4b76      	ldr	r3, [pc, #472]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a75      	ldr	r2, [pc, #468]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b70      	ldr	r3, [pc, #448]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6f      	ldr	r2, [pc, #444]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b6d      	ldr	r3, [pc, #436]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6c      	ldr	r2, [pc, #432]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 800129c:	4b69      	ldr	r3, [pc, #420]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a68      	ldr	r2, [pc, #416]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b66      	ldr	r3, [pc, #408]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a65      	ldr	r2, [pc, #404]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fccc 	bl	8000c58 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcc8 	bl	8000c58 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	@ 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e207      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcb8 	bl	8000c58 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcb4 	bl	8000c58 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	@ 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1f3      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1c7      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4937      	ldr	r1, [pc, #220]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_RCC_OscConfig+0x244>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fc6d 	bl	8000c58 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fc69 	bl	8000c58 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1a8      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4925      	ldr	r1, [pc, #148]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <HAL_RCC_OscConfig+0x244>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc4c 	bl	8000c58 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc48 	bl	8000c58 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e187      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d036      	beq.n	800145c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d016      	beq.n	8001424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_RCC_OscConfig+0x248>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff fc2c 	bl	8000c58 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fc28 	bl	8000c58 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e167      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_RCC_OscConfig+0x240>)
 8001418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x200>
 8001422:	e01b      	b.n	800145c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_RCC_OscConfig+0x248>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fc15 	bl	8000c58 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e00e      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fc11 	bl	8000c58 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d907      	bls.n	8001450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e150      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b88      	ldr	r3, [pc, #544]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ea      	bne.n	8001432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8097 	beq.w	8001598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b81      	ldr	r3, [pc, #516]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b7d      	ldr	r3, [pc, #500]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a7c      	ldr	r2, [pc, #496]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b7a      	ldr	r3, [pc, #488]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <HAL_RCC_OscConfig+0x474>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b74      	ldr	r3, [pc, #464]	@ (8001678 <HAL_RCC_OscConfig+0x474>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a73      	ldr	r2, [pc, #460]	@ (8001678 <HAL_RCC_OscConfig+0x474>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbd1 	bl	8000c58 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff fbcd 	bl	8000c58 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e10c      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <HAL_RCC_OscConfig+0x474>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x2ea>
 80014e0:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e4:	4a63      	ldr	r2, [pc, #396]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x324>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x30c>
 80014f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6713      	str	r3, [r2, #112]	@ 0x70
 8001502:	4b5c      	ldr	r3, [pc, #368]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001506:	4a5b      	ldr	r2, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6713      	str	r3, [r2, #112]	@ 0x70
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0x324>
 8001510:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a57      	ldr	r2, [pc, #348]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
 800151c:	4b55      	ldr	r3, [pc, #340]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001520:	4a54      	ldr	r2, [pc, #336]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 0304 	bic.w	r3, r3, #4
 8001526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d015      	beq.n	800155c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fb92 	bl	8000c58 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fb8e 	bl	8000c58 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0cb      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	4b49      	ldr	r3, [pc, #292]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0ee      	beq.n	8001538 <HAL_RCC_OscConfig+0x334>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fb7c 	bl	8000c58 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fb78 	bl	8000c58 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0b5      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157a:	4b3e      	ldr	r3, [pc, #248]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ee      	bne.n	8001564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	4a38      	ldr	r2, [pc, #224]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a1 	beq.w	80016e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d05c      	beq.n	8001668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d141      	bne.n	800163a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	@ (800167c <HAL_RCC_OscConfig+0x478>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb4c 	bl	8000c58 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fb48 	bl	8000c58 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e087      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	019b      	lsls	r3, r3, #6
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	3b01      	subs	r3, #1
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	491b      	ldr	r1, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x478>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fb21 	bl	8000c58 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fb1d 	bl	8000c58 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e05c      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x416>
 8001638:	e054      	b.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb0a 	bl	8000c58 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb06 	bl	8000c58 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e045      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x444>
 8001666:	e03d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e038      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000
 800167c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d028      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d121      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d111      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa38 	bl	8000c58 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fa34 	bl	8000c58 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	@ (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f844 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08004484 	.word	0x08004484
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c4:	b094      	sub	sp, #80	@ 0x50
 80018c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80018cc:	2300      	movs	r3, #0
 80018ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d8:	4b79      	ldr	r3, [pc, #484]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d00d      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	f200 80e1 	bhi.w	8001aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3a>
 80018f2:	e0db      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b73      	ldr	r3, [pc, #460]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80018f8:	e0db      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b73      	ldr	r3, [pc, #460]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018fe:	e0d8      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001900:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001908:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	2200      	movs	r2, #0
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001920:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001928:	633b      	str	r3, [r7, #48]	@ 0x30
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	@ 0x34
 800192e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001932:	4622      	mov	r2, r4
 8001934:	462b      	mov	r3, r5
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4621      	mov	r1, r4
 800194c:	1a51      	subs	r1, r2, r1
 800194e:	6139      	str	r1, [r7, #16]
 8001950:	4629      	mov	r1, r5
 8001952:	eb63 0301 	sbc.w	r3, r3, r1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001964:	4659      	mov	r1, fp
 8001966:	018b      	lsls	r3, r1, #6
 8001968:	4651      	mov	r1, sl
 800196a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196e:	4651      	mov	r1, sl
 8001970:	018a      	lsls	r2, r1, #6
 8001972:	4651      	mov	r1, sl
 8001974:	ebb2 0801 	subs.w	r8, r2, r1
 8001978:	4659      	mov	r1, fp
 800197a:	eb63 0901 	sbc.w	r9, r3, r1
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001992:	4690      	mov	r8, r2
 8001994:	4699      	mov	r9, r3
 8001996:	4623      	mov	r3, r4
 8001998:	eb18 0303 	adds.w	r3, r8, r3
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	462b      	mov	r3, r5
 80019a0:	eb49 0303 	adc.w	r3, r9, r3
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019b2:	4629      	mov	r1, r5
 80019b4:	024b      	lsls	r3, r1, #9
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019bc:	4621      	mov	r1, r4
 80019be:	024a      	lsls	r2, r1, #9
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019d0:	f7fe fc06 	bl	80001e0 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019dc:	e058      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	2200      	movs	r2, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	4611      	mov	r1, r2
 80019ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019f8:	4642      	mov	r2, r8
 80019fa:	464b      	mov	r3, r9
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	0159      	lsls	r1, r3, #5
 8001a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0a:	0150      	lsls	r0, r2, #5
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4641      	mov	r1, r8
 8001a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a16:	4649      	mov	r1, r9
 8001a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a30:	ebb2 040a 	subs.w	r4, r2, sl
 8001a34:	eb63 050b 	sbc.w	r5, r3, fp
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	00eb      	lsls	r3, r5, #3
 8001a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a46:	00e2      	lsls	r2, r4, #3
 8001a48:	4614      	mov	r4, r2
 8001a4a:	461d      	mov	r5, r3
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	18e3      	adds	r3, r4, r3
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	464b      	mov	r3, r9
 8001a54:	eb45 0303 	adc.w	r3, r5, r3
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a66:	4629      	mov	r1, r5
 8001a68:	028b      	lsls	r3, r1, #10
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a70:	4621      	mov	r1, r4
 8001a72:	028a      	lsls	r2, r1, #10
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	61fa      	str	r2, [r7, #28]
 8001a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a84:	f7fe fbac 	bl	80001e0 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001aa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3750      	adds	r7, #80	@ 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	007a1200 	.word	0x007a1200

08001acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0b5b      	lsrs	r3, r3, #13
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	@ (8001b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08004494 	.word	0x08004494

08001b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	220f      	movs	r2, #15
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <HAL_RCC_GetClockConfig+0x60>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0207 	and.w	r2, r3, #7
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e041      	b.n	8001c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f839 	bl	8001c0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 f9b2 	bl	8001f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d001      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e044      	b.n	8001cc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c66:	d013      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xb8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d010      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb2:	e007      	b.n	8001cc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40000c00 	.word	0x40000c00
 8001ce4:	40014000 	.word	0x40014000

08001ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d020      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0202 	mvn.w	r2, #2
 8001d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8d2 	bl	8001edc <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8c4 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8d5 	bl	8001ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0204 	mvn.w	r2, #4
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8ac 	bl	8001edc <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f89e 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8af 	bl	8001ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d020      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0208 	mvn.w	r2, #8
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f886 	bl	8001edc <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f878 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f889 	bl	8001ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0210 	mvn.w	r2, #16
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2208      	movs	r2, #8
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f860 	bl	8001edc <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f852 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f863 	bl	8001ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0201 	mvn.w	r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fd26 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8e6 	bl	8002044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f834 	bl	8001f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0220 	mvn.w	r2, #32
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8b8 	bl	8002030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <TIM_Base_SetConfig+0xfc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a37      	ldr	r2, [pc, #220]	@ (8002018 <TIM_Base_SetConfig+0x100>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a36      	ldr	r2, [pc, #216]	@ (800201c <TIM_Base_SetConfig+0x104>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a35      	ldr	r2, [pc, #212]	@ (8002020 <TIM_Base_SetConfig+0x108>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2b      	ldr	r2, [pc, #172]	@ (8002014 <TIM_Base_SetConfig+0xfc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f70:	d017      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a28      	ldr	r2, [pc, #160]	@ (8002018 <TIM_Base_SetConfig+0x100>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	@ (800201c <TIM_Base_SetConfig+0x104>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00f      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a26      	ldr	r2, [pc, #152]	@ (8002020 <TIM_Base_SetConfig+0x108>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <TIM_Base_SetConfig+0x10c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <TIM_Base_SetConfig+0x110>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	@ (800202c <TIM_Base_SetConfig+0x114>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0e      	ldr	r2, [pc, #56]	@ (8002014 <TIM_Base_SetConfig+0xfc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d103      	bne.n	8001fe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f023 0201 	bic.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
  }
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40014000 	.word	0x40014000
 8002028:	40014400 	.word	0x40014400
 800202c:	40014800 	.word	0x40014800

08002030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206a:	2b84      	cmp	r3, #132	@ 0x84
 800206c:	d005      	beq.n	800207a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800206e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800208c:	f000 fb78 	bl	8002780 <vTaskStartScheduler>
  
  return osOK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}

08002096 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002098:	b089      	sub	sp, #36	@ 0x24
 800209a:	af04      	add	r7, sp, #16
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <osThreadCreate+0x54>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685c      	ldr	r4, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691e      	ldr	r6, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffc8 	bl	8002058 <makeFreeRtosPriority>
 80020c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d2:	9202      	str	r2, [sp, #8]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9100      	str	r1, [sp, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4632      	mov	r2, r6
 80020dc:	4629      	mov	r1, r5
 80020de:	4620      	mov	r0, r4
 80020e0:	f000 f99e 	bl	8002420 <xTaskCreateStatic>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e01c      	b.n	8002124 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685c      	ldr	r4, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffaa 	bl	8002058 <makeFreeRtosPriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	4632      	mov	r2, r6
 8002112:	4629      	mov	r1, r5
 8002114:	4620      	mov	r0, r4
 8002116:	f000 f9e3 	bl	80024e0 <xTaskCreate>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d001      	beq.n	8002124 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002124:	68fb      	ldr	r3, [r7, #12]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f103 0208 	add.w	r2, r3, #8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f04f 32ff 	mov.w	r2, #4294967295
 8002146:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0208 	add.w	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f103 0208 	add.w	r2, r3, #8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d103      	bne.n	80021f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e00c      	b.n	800220a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3308      	adds	r3, #8
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e002      	b.n	80021fe <vListInsert+0x2e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	429a      	cmp	r2, r3
 8002208:	d2f6      	bcs.n	80021f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6892      	ldr	r2, [r2, #8]
 8002258:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6852      	ldr	r2, [r2, #4]
 8002262:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d103      	bne.n	8002276 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022c4:	f001 f848 	bl	8003358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	441a      	add	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	3b01      	subs	r3, #1
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	441a      	add	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	22ff      	movs	r2, #255	@ 0xff
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	22ff      	movs	r2, #255	@ 0xff
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d114      	bne.n	8002344 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3310      	adds	r3, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fc5e 	bl	8002be8 <xTaskRemoveFromEventList>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <xQueueGenericReset+0xd0>)
 8002334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	e009      	b.n	8002358 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3310      	adds	r3, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fef0 	bl	800212e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3324      	adds	r3, #36	@ 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff feeb 	bl	800212e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002358:	f001 f830 	bl	80033bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000ed04 	.word	0xe000ed04

0800236c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	613b      	str	r3, [r7, #16]
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3348      	adds	r3, #72	@ 0x48
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 f8f8 	bl	800359c <pvPortMalloc>
 80023ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d011      	beq.n	80023d8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3348      	adds	r3, #72	@ 0x48
 80023bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f805 	bl	80023e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023d8:	69bb      	ldr	r3, [r7, #24]
	}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e002      	b.n	8002404 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002410:	2101      	movs	r1, #1
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	f7ff ff40 	bl	8002298 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	@ 0x38
 8002424:	af04      	add	r7, sp, #16
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800242e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	623b      	str	r3, [r7, #32]
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61fb      	str	r3, [r7, #28]
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800246a:	23a0      	movs	r3, #160	@ 0xa0
 800246c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2ba0      	cmp	r3, #160	@ 0xa0
 8002472:	d00b      	beq.n	800248c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	61bb      	str	r3, [r7, #24]
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800248c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01e      	beq.n	80024d2 <xTaskCreateStatic+0xb2>
 8002494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01b      	beq.n	80024d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024ac:	2300      	movs	r3, #0
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f851 	bl	800256c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024cc:	f000 f8ee 	bl	80026ac <prvAddNewTaskToReadyList>
 80024d0:	e001      	b.n	80024d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024d6:	697b      	ldr	r3, [r7, #20]
	}
 80024d8:	4618      	mov	r0, r3
 80024da:	3728      	adds	r7, #40	@ 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af04      	add	r7, sp, #16
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f851 	bl	800359c <pvPortMalloc>
 80024fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002502:	20a0      	movs	r0, #160	@ 0xa0
 8002504:	f001 f84a 	bl	800359c <pvPortMalloc>
 8002508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	631a      	str	r2, [r3, #48]	@ 0x30
 8002516:	e005      	b.n	8002524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f001 f90d 	bl	8003738 <vPortFree>
 800251e:	e001      	b.n	8002524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	2300      	movs	r3, #0
 8002536:	9303      	str	r3, [sp, #12]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9302      	str	r3, [sp, #8]
 800253c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f80f 	bl	800256c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800254e:	69f8      	ldr	r0, [r7, #28]
 8002550:	f000 f8ac 	bl	80026ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002554:	2301      	movs	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e002      	b.n	8002560 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002560:	69bb      	ldr	r3, [r7, #24]
	}
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002584:	3b01      	subs	r3, #1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f023 0307 	bic.w	r3, r3, #7
 8002592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	617b      	str	r3, [r7, #20]
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	e7fd      	b.n	80025b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01f      	beq.n	80025fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	e012      	b.n	80025e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	7819      	ldrb	r1, [r3, #0]
 80025ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	3334      	adds	r3, #52	@ 0x34
 80025d2:	460a      	mov	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	d9e9      	bls.n	80025c2 <prvInitialiseNewTask+0x56>
 80025ee:	e000      	b.n	80025f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80025f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025fa:	e003      	b.n	8002604 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	2b06      	cmp	r3, #6
 8002608:	d901      	bls.n	800260e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800260a:	2306      	movs	r3, #6
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002612:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261c:	2200      	movs	r2, #0
 800261e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fda2 	bl	800216e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	3318      	adds	r3, #24
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fd9d 	bl	800216e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002638:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	f1c3 0207 	rsb	r2, r3, #7
 8002640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002642:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002654:	2200      	movs	r2, #0
 8002656:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	334c      	adds	r3, #76	@ 0x4c
 800265e:	224c      	movs	r2, #76	@ 0x4c
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f001 fb80 	bl	8003d68 <memset>
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <prvInitialiseNewTask+0x134>)
 800266c:	651a      	str	r2, [r3, #80]	@ 0x50
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	4a0c      	ldr	r2, [pc, #48]	@ (80026a4 <prvInitialiseNewTask+0x138>)
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
 8002674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <prvInitialiseNewTask+0x13c>)
 8002678:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	69b8      	ldr	r0, [r7, #24]
 8002680:	f000 fd3a 	bl	80030f8 <pxPortInitialiseStack>
 8002684:	4602      	mov	r2, r0
 8002686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800268a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002696:	bf00      	nop
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200040dc 	.word	0x200040dc
 80026a4:	20004144 	.word	0x20004144
 80026a8:	200041ac 	.word	0x200041ac

080026ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026b4:	f000 fe50 	bl	8003358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <prvAddNewTaskToReadyList+0xb8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	4a29      	ldr	r2, [pc, #164]	@ (8002764 <prvAddNewTaskToReadyList+0xb8>)
 80026c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026c2:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <prvAddNewTaskToReadyList+0xbc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026ca:	4a27      	ldr	r2, [pc, #156]	@ (8002768 <prvAddNewTaskToReadyList+0xbc>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026d0:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <prvAddNewTaskToReadyList+0xb8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d110      	bne.n	80026fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026d8:	f000 fb02 	bl	8002ce0 <prvInitialiseTaskLists>
 80026dc:	e00d      	b.n	80026fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026de:	4b23      	ldr	r3, [pc, #140]	@ (800276c <prvAddNewTaskToReadyList+0xc0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <prvAddNewTaskToReadyList+0xbc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d802      	bhi.n	80026fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <prvAddNewTaskToReadyList+0xbc>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <prvAddNewTaskToReadyList+0xc4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <prvAddNewTaskToReadyList+0xc4>)
 8002702:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	2201      	movs	r2, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <prvAddNewTaskToReadyList+0xc8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <prvAddNewTaskToReadyList+0xc8>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4a15      	ldr	r2, [pc, #84]	@ (8002778 <prvAddNewTaskToReadyList+0xcc>)
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7ff fd2b 	bl	8002188 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002732:	f000 fe43 	bl	80033bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <prvAddNewTaskToReadyList+0xc0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00e      	beq.n	800275c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <prvAddNewTaskToReadyList+0xbc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	429a      	cmp	r2, r3
 800274a:	d207      	bcs.n	800275c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <prvAddNewTaskToReadyList+0xd0>)
 800274e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000488 	.word	0x20000488
 8002768:	20000388 	.word	0x20000388
 800276c:	20000494 	.word	0x20000494
 8002770:	200004a4 	.word	0x200004a4
 8002774:	20000490 	.word	0x20000490
 8002778:	2000038c 	.word	0x2000038c
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800278e:	463a      	mov	r2, r7
 8002790:	1d39      	adds	r1, r7, #4
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fe9a 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	9202      	str	r2, [sp, #8]
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2300      	movs	r3, #0
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	460a      	mov	r2, r1
 80027ae:	4921      	ldr	r1, [pc, #132]	@ (8002834 <vTaskStartScheduler+0xb4>)
 80027b0:	4821      	ldr	r0, [pc, #132]	@ (8002838 <vTaskStartScheduler+0xb8>)
 80027b2:	f7ff fe35 	bl	8002420 <xTaskCreateStatic>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a20      	ldr	r2, [pc, #128]	@ (800283c <vTaskStartScheduler+0xbc>)
 80027ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027bc:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <vTaskStartScheduler+0xbc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027c4:	2301      	movs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e001      	b.n	80027ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d11b      	bne.n	800280c <vTaskStartScheduler+0x8c>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	613b      	str	r3, [r7, #16]
}
 80027e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80027e8:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <vTaskStartScheduler+0xc0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	334c      	adds	r3, #76	@ 0x4c
 80027ee:	4a15      	ldr	r2, [pc, #84]	@ (8002844 <vTaskStartScheduler+0xc4>)
 80027f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <vTaskStartScheduler+0xc8>)
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <vTaskStartScheduler+0xcc>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <vTaskStartScheduler+0xd0>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002806:	f000 fd03 	bl	8003210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800280a:	e00f      	b.n	800282c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d10b      	bne.n	800282c <vTaskStartScheduler+0xac>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	60fb      	str	r3, [r7, #12]
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <vTaskStartScheduler+0xa8>
}
 800282c:	bf00      	nop
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	0800447c 	.word	0x0800447c
 8002838:	08002cb1 	.word	0x08002cb1
 800283c:	200004ac 	.word	0x200004ac
 8002840:	20000388 	.word	0x20000388
 8002844:	2000001c 	.word	0x2000001c
 8002848:	200004a8 	.word	0x200004a8
 800284c:	20000494 	.word	0x20000494
 8002850:	2000048c 	.word	0x2000048c

08002854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <vTaskSuspendAll+0x18>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	4a03      	ldr	r2, [pc, #12]	@ (800286c <vTaskSuspendAll+0x18>)
 8002860:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	200004b0 	.word	0x200004b0

08002870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800287e:	4b42      	ldr	r3, [pc, #264]	@ (8002988 <xTaskResumeAll+0x118>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <xTaskResumeAll+0x2e>
	__asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	603b      	str	r3, [r7, #0]
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	e7fd      	b.n	800289a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800289e:	f000 fd5b 	bl	8003358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028a2:	4b39      	ldr	r3, [pc, #228]	@ (8002988 <xTaskResumeAll+0x118>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	4a37      	ldr	r2, [pc, #220]	@ (8002988 <xTaskResumeAll+0x118>)
 80028aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ac:	4b36      	ldr	r3, [pc, #216]	@ (8002988 <xTaskResumeAll+0x118>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d161      	bne.n	8002978 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028b4:	4b35      	ldr	r3, [pc, #212]	@ (800298c <xTaskResumeAll+0x11c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05d      	beq.n	8002978 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028bc:	e02e      	b.n	800291c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028be:	4b34      	ldr	r3, [pc, #208]	@ (8002990 <xTaskResumeAll+0x120>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3318      	adds	r3, #24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fcb9 	bl	8002242 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fcb4 	bl	8002242 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <xTaskResumeAll+0x124>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002994 <xTaskResumeAll+0x124>)
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <xTaskResumeAll+0x128>)
 80028fa:	441a      	add	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f7ff fc40 	bl	8002188 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800290c:	4b23      	ldr	r3, [pc, #140]	@ (800299c <xTaskResumeAll+0x12c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <xTaskResumeAll+0x130>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800291c:	4b1c      	ldr	r3, [pc, #112]	@ (8002990 <xTaskResumeAll+0x120>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1cc      	bne.n	80028be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800292a:	f000 fa7d 	bl	8002e28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800292e:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <xTaskResumeAll+0x134>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800293a:	f000 f837 	bl	80029ac <xTaskIncrementTick>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <xTaskResumeAll+0x130>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3b01      	subs	r3, #1
 800294e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f1      	bne.n	800293a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002956:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <xTaskResumeAll+0x134>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <xTaskResumeAll+0x130>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <xTaskResumeAll+0x138>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002978:	f000 fd20 	bl	80033bc <vPortExitCritical>

	return xAlreadyYielded;
 800297c:	68bb      	ldr	r3, [r7, #8]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200004b0 	.word	0x200004b0
 800298c:	20000488 	.word	0x20000488
 8002990:	20000448 	.word	0x20000448
 8002994:	20000490 	.word	0x20000490
 8002998:	2000038c 	.word	0x2000038c
 800299c:	20000388 	.word	0x20000388
 80029a0:	2000049c 	.word	0x2000049c
 80029a4:	20000498 	.word	0x20000498
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b6:	4b4f      	ldr	r3, [pc, #316]	@ (8002af4 <xTaskIncrementTick+0x148>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 808f 	bne.w	8002ade <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029c0:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <xTaskIncrementTick+0x14c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029c8:	4a4b      	ldr	r2, [pc, #300]	@ (8002af8 <xTaskIncrementTick+0x14c>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d121      	bne.n	8002a18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80029d4:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <xTaskIncrementTick+0x150>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	603b      	str	r3, [r7, #0]
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	e7fd      	b.n	80029f2 <xTaskIncrementTick+0x46>
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <xTaskIncrementTick+0x150>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <xTaskIncrementTick+0x154>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a3e      	ldr	r2, [pc, #248]	@ (8002afc <xTaskIncrementTick+0x150>)
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4a3e      	ldr	r2, [pc, #248]	@ (8002b00 <xTaskIncrementTick+0x154>)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <xTaskIncrementTick+0x158>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	4a3c      	ldr	r2, [pc, #240]	@ (8002b04 <xTaskIncrementTick+0x158>)
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	f000 fa08 	bl	8002e28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a18:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <xTaskIncrementTick+0x15c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d348      	bcc.n	8002ab4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a22:	4b36      	ldr	r3, [pc, #216]	@ (8002afc <xTaskIncrementTick+0x150>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a2c:	4b36      	ldr	r3, [pc, #216]	@ (8002b08 <xTaskIncrementTick+0x15c>)
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a32:	601a      	str	r2, [r3, #0]
					break;
 8002a34:	e03e      	b.n	8002ab4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a36:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <xTaskIncrementTick+0x150>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d203      	bcs.n	8002a56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b08 <xTaskIncrementTick+0x15c>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a54:	e02e      	b.n	8002ab4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fbf1 	bl	8002242 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fbe8 	bl	8002242 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	2201      	movs	r2, #1
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <xTaskIncrementTick+0x160>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	4a22      	ldr	r2, [pc, #136]	@ (8002b0c <xTaskIncrementTick+0x160>)
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <xTaskIncrementTick+0x164>)
 8002a92:	441a      	add	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f7ff fb74 	bl	8002188 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <xTaskIncrementTick+0x168>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d3b9      	bcc.n	8002a22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ab2:	e7b6      	b.n	8002a22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <xTaskIncrementTick+0x168>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aba:	4915      	ldr	r1, [pc, #84]	@ (8002b10 <xTaskIncrementTick+0x164>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d901      	bls.n	8002ad0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <xTaskIncrementTick+0x16c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e004      	b.n	8002ae8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002ade:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <xTaskIncrementTick+0x170>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <xTaskIncrementTick+0x170>)
 8002ae6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002ae8:	697b      	ldr	r3, [r7, #20]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200004b0 	.word	0x200004b0
 8002af8:	2000048c 	.word	0x2000048c
 8002afc:	20000440 	.word	0x20000440
 8002b00:	20000444 	.word	0x20000444
 8002b04:	200004a0 	.word	0x200004a0
 8002b08:	200004a8 	.word	0x200004a8
 8002b0c:	20000490 	.word	0x20000490
 8002b10:	2000038c 	.word	0x2000038c
 8002b14:	20000388 	.word	0x20000388
 8002b18:	2000049c 	.word	0x2000049c
 8002b1c:	20000498 	.word	0x20000498

08002b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b26:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <vTaskSwitchContext+0xb0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b2e:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <vTaskSwitchContext+0xb4>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b34:	e045      	b.n	8002bc2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002b36:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <vTaskSwitchContext+0xb4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3c:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <vTaskSwitchContext+0xb8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f1c3 031f 	rsb	r3, r3, #31
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	4922      	ldr	r1, [pc, #136]	@ (8002bdc <vTaskSwitchContext+0xbc>)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	607b      	str	r3, [r7, #4]
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <vTaskSwitchContext+0x5a>
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <vTaskSwitchContext+0xbc>)
 8002b8a:	4413      	add	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d104      	bne.n	8002bae <vTaskSwitchContext+0x8e>
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <vTaskSwitchContext+0xc0>)
 8002bb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <vTaskSwitchContext+0xc0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	334c      	adds	r3, #76	@ 0x4c
 8002bbe:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <vTaskSwitchContext+0xc4>)
 8002bc0:	6013      	str	r3, [r2, #0]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	200004b0 	.word	0x200004b0
 8002bd4:	2000049c 	.word	0x2000049c
 8002bd8:	20000490 	.word	0x20000490
 8002bdc:	2000038c 	.word	0x2000038c
 8002be0:	20000388 	.word	0x20000388
 8002be4:	2000001c 	.word	0x2000001c

08002be8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	60fb      	str	r3, [r7, #12]
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	e7fd      	b.n	8002c12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	3318      	adds	r3, #24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fb11 	bl	8002242 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c20:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <xTaskRemoveFromEventList+0xb0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11c      	bne.n	8002c62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb08 	bl	8002242 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <xTaskRemoveFromEventList+0xb4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <xTaskRemoveFromEventList+0xb4>)
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4a13      	ldr	r2, [pc, #76]	@ (8002ca0 <xTaskRemoveFromEventList+0xb8>)
 8002c52:	441a      	add	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f7ff fa94 	bl	8002188 <vListInsertEnd>
 8002c60:	e005      	b.n	8002c6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	3318      	adds	r3, #24
 8002c66:	4619      	mov	r1, r3
 8002c68:	480e      	ldr	r0, [pc, #56]	@ (8002ca4 <xTaskRemoveFromEventList+0xbc>)
 8002c6a:	f7ff fa8d 	bl	8002188 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <xTaskRemoveFromEventList+0xc0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d905      	bls.n	8002c88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <xTaskRemoveFromEventList+0xc4>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e001      	b.n	8002c8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002c8c:	697b      	ldr	r3, [r7, #20]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200004b0 	.word	0x200004b0
 8002c9c:	20000490 	.word	0x20000490
 8002ca0:	2000038c 	.word	0x2000038c
 8002ca4:	20000448 	.word	0x20000448
 8002ca8:	20000388 	.word	0x20000388
 8002cac:	2000049c 	.word	0x2000049c

08002cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cb8:	f000 f852 	bl	8002d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <prvIdleTask+0x28>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d9f9      	bls.n	8002cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <prvIdleTask+0x2c>)
 8002cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002cd4:	e7f0      	b.n	8002cb8 <prvIdleTask+0x8>
 8002cd6:	bf00      	nop
 8002cd8:	2000038c 	.word	0x2000038c
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	e00c      	b.n	8002d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <prvInitialiseTaskLists+0x60>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fa17 	bl	800212e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	d9ef      	bls.n	8002cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d0c:	480d      	ldr	r0, [pc, #52]	@ (8002d44 <prvInitialiseTaskLists+0x64>)
 8002d0e:	f7ff fa0e 	bl	800212e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d12:	480d      	ldr	r0, [pc, #52]	@ (8002d48 <prvInitialiseTaskLists+0x68>)
 8002d14:	f7ff fa0b 	bl	800212e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d18:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <prvInitialiseTaskLists+0x6c>)
 8002d1a:	f7ff fa08 	bl	800212e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d1e:	480c      	ldr	r0, [pc, #48]	@ (8002d50 <prvInitialiseTaskLists+0x70>)
 8002d20:	f7ff fa05 	bl	800212e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d24:	480b      	ldr	r0, [pc, #44]	@ (8002d54 <prvInitialiseTaskLists+0x74>)
 8002d26:	f7ff fa02 	bl	800212e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <prvInitialiseTaskLists+0x78>)
 8002d2c:	4a05      	ldr	r2, [pc, #20]	@ (8002d44 <prvInitialiseTaskLists+0x64>)
 8002d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <prvInitialiseTaskLists+0x7c>)
 8002d32:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <prvInitialiseTaskLists+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000038c 	.word	0x2000038c
 8002d44:	20000418 	.word	0x20000418
 8002d48:	2000042c 	.word	0x2000042c
 8002d4c:	20000448 	.word	0x20000448
 8002d50:	2000045c 	.word	0x2000045c
 8002d54:	20000474 	.word	0x20000474
 8002d58:	20000440 	.word	0x20000440
 8002d5c:	20000444 	.word	0x20000444

08002d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d66:	e019      	b.n	8002d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d68:	f000 faf6 	bl	8003358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <prvCheckTasksWaitingTermination+0x50>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fa62 	bl	8002242 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <prvCheckTasksWaitingTermination+0x54>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	4a0b      	ldr	r2, [pc, #44]	@ (8002db4 <prvCheckTasksWaitingTermination+0x54>)
 8002d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <prvCheckTasksWaitingTermination+0x58>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <prvCheckTasksWaitingTermination+0x58>)
 8002d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d92:	f000 fb13 	bl	80033bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f810 	bl	8002dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <prvCheckTasksWaitingTermination+0x58>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e1      	bne.n	8002d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000045c 	.word	0x2000045c
 8002db4:	20000488 	.word	0x20000488
 8002db8:	20000470 	.word	0x20000470

08002dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	334c      	adds	r3, #76	@ 0x4c
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 ffe5 	bl	8003d98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d108      	bne.n	8002dea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fcab 	bl	8003738 <vPortFree>
				vPortFree( pxTCB );
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fca8 	bl	8003738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002de8:	e019      	b.n	8002e1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d103      	bne.n	8002dfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fc9f 	bl	8003738 <vPortFree>
	}
 8002dfa:	e010      	b.n	8002e1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d00b      	beq.n	8002e1e <prvDeleteTCB+0x62>
	__asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	60fb      	str	r3, [r7, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <prvDeleteTCB+0x5e>
	}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <prvResetNextTaskUnblockTime+0x38>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <prvResetNextTaskUnblockTime+0x3c>)
 8002e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e40:	e008      	b.n	8002e54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e42:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <prvResetNextTaskUnblockTime+0x38>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <prvResetNextTaskUnblockTime+0x3c>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	20000440 	.word	0x20000440
 8002e64:	200004a8 	.word	0x200004a8

08002e68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8002e72:	f000 fa71 	bl	8003358 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <ulTaskNotifyTake+0x90>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <ulTaskNotifyTake+0x90>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e92:	2101      	movs	r1, #1
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f000 f8c9 	bl	800302c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <ulTaskNotifyTake+0x94>)
 8002e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002eaa:	f000 fa87 	bl	80033bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8002eae:	f000 fa53 	bl	8003358 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <ulTaskNotifyTake+0x90>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <ulTaskNotifyTake+0x90>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002ed2:	e005      	b.n	8002ee0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <ulTaskNotifyTake+0x90>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	3a01      	subs	r2, #1
 8002edc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <ulTaskNotifyTake+0x90>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8002eea:	f000 fa67 	bl	80033bc <vPortExitCritical>

		return ulReturn;
 8002eee:	68fb      	ldr	r3, [r7, #12]
	}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000388 	.word	0x20000388
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	61bb      	str	r3, [r7, #24]
}
 8002f22:	bf00      	nop
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f28:	f000 faf6 	bl	8003518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f30:	f3ef 8211 	mrs	r2, BASEPRI
 8002f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	617a      	str	r2, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f48:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f4a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8002f52:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d146      	bne.n	8002ffe <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f90:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <vTaskNotifyGiveFromISR+0x114>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11c      	bne.n	8002fd2 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f950 	bl	8002242 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <vTaskNotifyGiveFromISR+0x118>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <vTaskNotifyGiveFromISR+0x118>)
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a16      	ldr	r2, [pc, #88]	@ (800301c <vTaskNotifyGiveFromISR+0x11c>)
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7ff f8dc 	bl	8002188 <vListInsertEnd>
 8002fd0:	e005      	b.n	8002fde <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4811      	ldr	r0, [pc, #68]	@ (8003020 <vTaskNotifyGiveFromISR+0x120>)
 8002fda:	f7ff f8d5 	bl	8002188 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <vTaskNotifyGiveFromISR+0x124>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d908      	bls.n	8002ffe <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <vTaskNotifyGiveFromISR+0x128>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003008:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800300a:	bf00      	nop
 800300c:	3728      	adds	r7, #40	@ 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200004b0 	.word	0x200004b0
 8003018:	20000490 	.word	0x20000490
 800301c:	2000038c 	.word	0x2000038c
 8003020:	20000448 	.word	0x20000448
 8003024:	20000388 	.word	0x20000388
 8003028:	2000049c 	.word	0x2000049c

0800302c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003036:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800303c:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3304      	adds	r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff f8fd 	bl	8002242 <uxListRemove>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	2201      	movs	r2, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4013      	ands	r3, r2
 8003062:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003064:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d10a      	bne.n	8003084 <prvAddCurrentTaskToDelayedList+0x58>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003074:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3304      	adds	r3, #4
 800307a:	4619      	mov	r1, r3
 800307c:	481a      	ldr	r0, [pc, #104]	@ (80030e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800307e:	f7ff f883 	bl	8002188 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003082:	e026      	b.n	80030d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800308c:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d209      	bcs.n	80030b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3304      	adds	r3, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7ff f891 	bl	80021d0 <vListInsert>
}
 80030ae:	e010      	b.n	80030d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3304      	adds	r3, #4
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f7ff f887 	bl	80021d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d202      	bcs.n	80030d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80030cc:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6013      	str	r3, [r2, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000048c 	.word	0x2000048c
 80030e0:	20000388 	.word	0x20000388
 80030e4:	20000490 	.word	0x20000490
 80030e8:	20000474 	.word	0x20000474
 80030ec:	20000444 	.word	0x20000444
 80030f0:	20000440 	.word	0x20000440
 80030f4:	200004a8 	.word	0x200004a8

080030f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b04      	subs	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3b04      	subs	r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3b04      	subs	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003128:	4a0c      	ldr	r2, [pc, #48]	@ (800315c <pxPortInitialiseStack+0x64>)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3b14      	subs	r3, #20
 8003132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b04      	subs	r3, #4
 800313e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f06f 0202 	mvn.w	r2, #2
 8003146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3b20      	subs	r3, #32
 800314c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800314e:	68fb      	ldr	r3, [r7, #12]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	08003161 	.word	0x08003161

08003160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <prvTaskExitError+0x58>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d00b      	beq.n	800318c <prvTaskExitError+0x2c>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	60fb      	str	r3, [r7, #12]
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <prvTaskExitError+0x28>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	60bb      	str	r3, [r7, #8]
}
 800319e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80031a0:	bf00      	nop
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0fc      	beq.n	80031a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	2000000c 	.word	0x2000000c
 80031bc:	00000000 	.word	0x00000000

080031c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80031c0:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <pxCurrentTCBConst2>)
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	6808      	ldr	r0, [r1, #0]
 80031c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ca:	f380 8809 	msr	PSP, r0
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f380 8811 	msr	BASEPRI, r0
 80031da:	4770      	bx	lr
 80031dc:	f3af 8000 	nop.w

080031e0 <pxCurrentTCBConst2>:
 80031e0:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop

080031e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80031e8:	4808      	ldr	r0, [pc, #32]	@ (800320c <prvPortStartFirstTask+0x24>)
 80031ea:	6800      	ldr	r0, [r0, #0]
 80031ec:	6800      	ldr	r0, [r0, #0]
 80031ee:	f380 8808 	msr	MSP, r0
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f380 8814 	msr	CONTROL, r0
 80031fa:	b662      	cpsie	i
 80031fc:	b661      	cpsie	f
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	df00      	svc	0
 8003208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800320a:	bf00      	nop
 800320c:	e000ed08 	.word	0xe000ed08

08003210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003216:	4b47      	ldr	r3, [pc, #284]	@ (8003334 <xPortStartScheduler+0x124>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a47      	ldr	r2, [pc, #284]	@ (8003338 <xPortStartScheduler+0x128>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10b      	bne.n	8003238 <xPortStartScheduler+0x28>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	613b      	str	r3, [r7, #16]
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003238:	4b3e      	ldr	r3, [pc, #248]	@ (8003334 <xPortStartScheduler+0x124>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3f      	ldr	r2, [pc, #252]	@ (800333c <xPortStartScheduler+0x12c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10b      	bne.n	800325a <xPortStartScheduler+0x4a>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	60fb      	str	r3, [r7, #12]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800325a:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <xPortStartScheduler+0x130>)
 800325c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	22ff      	movs	r2, #255	@ 0xff
 800326a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b31      	ldr	r3, [pc, #196]	@ (8003344 <xPortStartScheduler+0x134>)
 8003280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003282:	4b31      	ldr	r3, [pc, #196]	@ (8003348 <xPortStartScheduler+0x138>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003288:	e009      	b.n	800329e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800328a:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <xPortStartScheduler+0x138>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3b01      	subs	r3, #1
 8003290:	4a2d      	ldr	r2, [pc, #180]	@ (8003348 <xPortStartScheduler+0x138>)
 8003292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a6:	2b80      	cmp	r3, #128	@ 0x80
 80032a8:	d0ef      	beq.n	800328a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032aa:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <xPortStartScheduler+0x138>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d00b      	beq.n	80032ce <xPortStartScheduler+0xbe>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60bb      	str	r3, [r7, #8]
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	e7fd      	b.n	80032ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <xPortStartScheduler+0x138>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <xPortStartScheduler+0x138>)
 80032d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <xPortStartScheduler+0x138>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032e0:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <xPortStartScheduler+0x138>)
 80032e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <xPortStartScheduler+0x13c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a16      	ldr	r2, [pc, #88]	@ (800334c <xPortStartScheduler+0x13c>)
 80032f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032f8:	4b14      	ldr	r3, [pc, #80]	@ (800334c <xPortStartScheduler+0x13c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a13      	ldr	r2, [pc, #76]	@ (800334c <xPortStartScheduler+0x13c>)
 80032fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003304:	f000 f8da 	bl	80034bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003308:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <xPortStartScheduler+0x140>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800330e:	f000 f8f9 	bl	8003504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <xPortStartScheduler+0x144>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a0f      	ldr	r2, [pc, #60]	@ (8003354 <xPortStartScheduler+0x144>)
 8003318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800331c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800331e:	f7ff ff63 	bl	80031e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003322:	f7ff fbfd 	bl	8002b20 <vTaskSwitchContext>
	prvTaskExitError();
 8003326:	f7ff ff1b 	bl	8003160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	e000ed00 	.word	0xe000ed00
 8003338:	410fc271 	.word	0x410fc271
 800333c:	410fc270 	.word	0x410fc270
 8003340:	e000e400 	.word	0xe000e400
 8003344:	200004b4 	.word	0x200004b4
 8003348:	200004b8 	.word	0x200004b8
 800334c:	e000ed20 	.word	0xe000ed20
 8003350:	2000000c 	.word	0x2000000c
 8003354:	e000ef34 	.word	0xe000ef34

08003358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
}
 8003370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <vPortEnterCritical+0x5c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a0e      	ldr	r2, [pc, #56]	@ (80033b4 <vPortEnterCritical+0x5c>)
 800337a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800337c:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <vPortEnterCritical+0x5c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d110      	bne.n	80033a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <vPortEnterCritical+0x60>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	603b      	str	r3, [r7, #0]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <vPortEnterCritical+0x4a>
	}
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000000c 	.word	0x2000000c
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <vPortExitCritical+0x50>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <vPortExitCritical+0x26>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	607b      	str	r3, [r7, #4]
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	e7fd      	b.n	80033de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <vPortExitCritical+0x50>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	4a08      	ldr	r2, [pc, #32]	@ (800340c <vPortExitCritical+0x50>)
 80033ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <vPortExitCritical+0x50>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <vPortExitCritical+0x44>
 80033f4:	2300      	movs	r3, #0
 80033f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f383 8811 	msr	BASEPRI, r3
}
 80033fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	2000000c 	.word	0x2000000c

08003410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003410:	f3ef 8009 	mrs	r0, PSP
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <pxCurrentTCBConst>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f01e 0f10 	tst.w	lr, #16
 8003420:	bf08      	it	eq
 8003422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342a:	6010      	str	r0, [r2, #0]
 800342c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003434:	f380 8811 	msr	BASEPRI, r0
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f7ff fb6e 	bl	8002b20 <vTaskSwitchContext>
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f380 8811 	msr	BASEPRI, r0
 800344c:	bc09      	pop	{r0, r3}
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	6808      	ldr	r0, [r1, #0]
 8003452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003456:	f01e 0f10 	tst.w	lr, #16
 800345a:	bf08      	it	eq
 800345c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003460:	f380 8809 	msr	PSP, r0
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w

08003470 <pxCurrentTCBConst>:
 8003470:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
}
 8003490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003492:	f7ff fa8b 	bl	80029ac <xTaskIncrementTick>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <SysTick_Handler+0x40>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f383 8811 	msr	BASEPRI, r3
}
 80034ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <vPortSetupTimerInterrupt+0x34>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <vPortSetupTimerInterrupt+0x38>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <vPortSetupTimerInterrupt+0x3c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <vPortSetupTimerInterrupt+0x40>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	099b      	lsrs	r3, r3, #6
 80034d8:	4a09      	ldr	r2, [pc, #36]	@ (8003500 <vPortSetupTimerInterrupt+0x44>)
 80034da:	3b01      	subs	r3, #1
 80034dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034de:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <vPortSetupTimerInterrupt+0x34>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010
 80034f4:	e000e018 	.word	0xe000e018
 80034f8:	20000000 	.word	0x20000000
 80034fc:	10624dd3 	.word	0x10624dd3
 8003500:	e000e014 	.word	0xe000e014

08003504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003514 <vPortEnableVFP+0x10>
 8003508:	6801      	ldr	r1, [r0, #0]
 800350a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800350e:	6001      	str	r1, [r0, #0]
 8003510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003512:	bf00      	nop
 8003514:	e000ed88 	.word	0xe000ed88

08003518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800351e:	f3ef 8305 	mrs	r3, IPSR
 8003522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	d915      	bls.n	8003556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800352a:	4a18      	ldr	r2, [pc, #96]	@ (800358c <vPortValidateInterruptPriority+0x74>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003534:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <vPortValidateInterruptPriority+0x78>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	7afa      	ldrb	r2, [r7, #11]
 800353a:	429a      	cmp	r2, r3
 800353c:	d20b      	bcs.n	8003556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	607b      	str	r3, [r7, #4]
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003556:	4b0f      	ldr	r3, [pc, #60]	@ (8003594 <vPortValidateInterruptPriority+0x7c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800355e:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <vPortValidateInterruptPriority+0x80>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d90b      	bls.n	800357e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	603b      	str	r3, [r7, #0]
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <vPortValidateInterruptPriority+0x62>
	}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e3f0 	.word	0xe000e3f0
 8003590:	200004b4 	.word	0x200004b4
 8003594:	e000ed0c 	.word	0xe000ed0c
 8003598:	200004b8 	.word	0x200004b8

0800359c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	@ 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035a8:	f7ff f954 	bl	8002854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003720 <pvPortMalloc+0x184>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80035b4:	f000 f924 	bl	8003800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003724 <pvPortMalloc+0x188>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 8095 	bne.w	80036f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01e      	beq.n	800360a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80035cc:	2208      	movs	r2, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d015      	beq.n	800360a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f023 0307 	bic.w	r3, r3, #7
 80035e4:	3308      	adds	r3, #8
 80035e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <pvPortMalloc+0x6e>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	617b      	str	r3, [r7, #20]
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d06f      	beq.n	80036f0 <pvPortMalloc+0x154>
 8003610:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <pvPortMalloc+0x18c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d86a      	bhi.n	80036f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800361a:	4b44      	ldr	r3, [pc, #272]	@ (800372c <pvPortMalloc+0x190>)
 800361c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800361e:	4b43      	ldr	r3, [pc, #268]	@ (800372c <pvPortMalloc+0x190>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003624:	e004      	b.n	8003630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d903      	bls.n	8003642 <pvPortMalloc+0xa6>
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f1      	bne.n	8003626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003642:	4b37      	ldr	r3, [pc, #220]	@ (8003720 <pvPortMalloc+0x184>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	429a      	cmp	r2, r3
 800364a:	d051      	beq.n	80036f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2208      	movs	r2, #8
 8003652:	4413      	add	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	2308      	movs	r3, #8
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	429a      	cmp	r2, r3
 800366c:	d920      	bls.n	80036b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <pvPortMalloc+0xfc>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	613b      	str	r3, [r7, #16]
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	1ad2      	subs	r2, r2, r3
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036aa:	69b8      	ldr	r0, [r7, #24]
 80036ac:	f000 f90a 	bl	80038c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <pvPortMalloc+0x18c>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <pvPortMalloc+0x18c>)
 80036bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036be:	4b1a      	ldr	r3, [pc, #104]	@ (8003728 <pvPortMalloc+0x18c>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <pvPortMalloc+0x194>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d203      	bcs.n	80036d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036ca:	4b17      	ldr	r3, [pc, #92]	@ (8003728 <pvPortMalloc+0x18c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a18      	ldr	r2, [pc, #96]	@ (8003730 <pvPortMalloc+0x194>)
 80036d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <pvPortMalloc+0x188>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	431a      	orrs	r2, r3
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80036e6:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <pvPortMalloc+0x198>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a11      	ldr	r2, [pc, #68]	@ (8003734 <pvPortMalloc+0x198>)
 80036ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80036f0:	f7ff f8be 	bl	8002870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <pvPortMalloc+0x17a>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60fb      	str	r3, [r7, #12]
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	e7fd      	b.n	8003712 <pvPortMalloc+0x176>
	return pvReturn;
 8003716:	69fb      	ldr	r3, [r7, #28]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	@ 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200040c4 	.word	0x200040c4
 8003724:	200040d8 	.word	0x200040d8
 8003728:	200040c8 	.word	0x200040c8
 800372c:	200040bc 	.word	0x200040bc
 8003730:	200040cc 	.word	0x200040cc
 8003734:	200040d0 	.word	0x200040d0

08003738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d04f      	beq.n	80037ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800374a:	2308      	movs	r3, #8
 800374c:	425b      	negs	r3, r3
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4413      	add	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <vPortFree+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <vPortFree+0x46>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60fb      	str	r3, [r7, #12]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <vPortFree+0x66>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	60bb      	str	r3, [r7, #8]
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	e7fd      	b.n	800379a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <vPortFree+0xbc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01e      	beq.n	80037ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11a      	bne.n	80037ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <vPortFree+0xbc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80037c4:	f7ff f846 	bl	8002854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <vPortFree+0xc0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a09      	ldr	r2, [pc, #36]	@ (80037f8 <vPortFree+0xc0>)
 80037d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037d6:	6938      	ldr	r0, [r7, #16]
 80037d8:	f000 f874 	bl	80038c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80037dc:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <vPortFree+0xc4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <vPortFree+0xc4>)
 80037e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80037e6:	f7ff f843 	bl	8002870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200040d8 	.word	0x200040d8
 80037f8:	200040c8 	.word	0x200040c8
 80037fc:	200040d4 	.word	0x200040d4

08003800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003806:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800380a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800380c:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <prvHeapInit+0xac>)
 800380e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3307      	adds	r3, #7
 800381e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	4a1f      	ldr	r2, [pc, #124]	@ (80038ac <prvHeapInit+0xac>)
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003838:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <prvHeapInit+0xb0>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800383e:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <prvHeapInit+0xb0>)
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800384c:	2208      	movs	r2, #8
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <prvHeapInit+0xb4>)
 8003860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003862:	4b14      	ldr	r3, [pc, #80]	@ (80038b4 <prvHeapInit+0xb4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800386a:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <prvHeapInit+0xb4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003880:	4b0c      	ldr	r3, [pc, #48]	@ (80038b4 <prvHeapInit+0xb4>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <prvHeapInit+0xb8>)
 800388e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a09      	ldr	r2, [pc, #36]	@ (80038bc <prvHeapInit+0xbc>)
 8003896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003898:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <prvHeapInit+0xc0>)
 800389a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	200004bc 	.word	0x200004bc
 80038b0:	200040bc 	.word	0x200040bc
 80038b4:	200040c4 	.word	0x200040c4
 80038b8:	200040cc 	.word	0x200040cc
 80038bc:	200040c8 	.word	0x200040c8
 80038c0:	200040d8 	.word	0x200040d8

080038c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038cc:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <prvInsertBlockIntoFreeList+0xac>)
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e002      	b.n	80038d8 <prvInsertBlockIntoFreeList+0x14>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d8f7      	bhi.n	80038d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d108      	bne.n	8003906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	441a      	add	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	441a      	add	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d118      	bne.n	800394c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <prvInsertBlockIntoFreeList+0xb0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d00d      	beq.n	8003942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e008      	b.n	8003954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <prvInsertBlockIntoFreeList+0xb0>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e003      	b.n	8003954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d002      	beq.n	8003962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200040bc 	.word	0x200040bc
 8003974:	200040c4 	.word	0x200040c4

08003978 <std>:
 8003978:	2300      	movs	r3, #0
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	e9c0 3300 	strd	r3, r3, [r0]
 8003982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003986:	6083      	str	r3, [r0, #8]
 8003988:	8181      	strh	r1, [r0, #12]
 800398a:	6643      	str	r3, [r0, #100]	@ 0x64
 800398c:	81c2      	strh	r2, [r0, #14]
 800398e:	6183      	str	r3, [r0, #24]
 8003990:	4619      	mov	r1, r3
 8003992:	2208      	movs	r2, #8
 8003994:	305c      	adds	r0, #92	@ 0x5c
 8003996:	f000 f9e7 	bl	8003d68 <memset>
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <std+0x58>)
 800399c:	6263      	str	r3, [r4, #36]	@ 0x24
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <std+0x5c>)
 80039a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <std+0x60>)
 80039a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <std+0x64>)
 80039a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80039aa:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <std+0x68>)
 80039ac:	6224      	str	r4, [r4, #32]
 80039ae:	429c      	cmp	r4, r3
 80039b0:	d006      	beq.n	80039c0 <std+0x48>
 80039b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039b6:	4294      	cmp	r4, r2
 80039b8:	d002      	beq.n	80039c0 <std+0x48>
 80039ba:	33d0      	adds	r3, #208	@ 0xd0
 80039bc:	429c      	cmp	r4, r3
 80039be:	d105      	bne.n	80039cc <std+0x54>
 80039c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c8:	f000 ba9c 	b.w	8003f04 <__retarget_lock_init_recursive>
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	bf00      	nop
 80039d0:	08003bb9 	.word	0x08003bb9
 80039d4:	08003bdb 	.word	0x08003bdb
 80039d8:	08003c13 	.word	0x08003c13
 80039dc:	08003c37 	.word	0x08003c37
 80039e0:	200040dc 	.word	0x200040dc

080039e4 <stdio_exit_handler>:
 80039e4:	4a02      	ldr	r2, [pc, #8]	@ (80039f0 <stdio_exit_handler+0xc>)
 80039e6:	4903      	ldr	r1, [pc, #12]	@ (80039f4 <stdio_exit_handler+0x10>)
 80039e8:	4803      	ldr	r0, [pc, #12]	@ (80039f8 <stdio_exit_handler+0x14>)
 80039ea:	f000 b869 	b.w	8003ac0 <_fwalk_sglue>
 80039ee:	bf00      	nop
 80039f0:	20000010 	.word	0x20000010
 80039f4:	08004205 	.word	0x08004205
 80039f8:	20000020 	.word	0x20000020

080039fc <cleanup_stdio>:
 80039fc:	6841      	ldr	r1, [r0, #4]
 80039fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003a30 <cleanup_stdio+0x34>)
 8003a00:	4299      	cmp	r1, r3
 8003a02:	b510      	push	{r4, lr}
 8003a04:	4604      	mov	r4, r0
 8003a06:	d001      	beq.n	8003a0c <cleanup_stdio+0x10>
 8003a08:	f000 fbfc 	bl	8004204 <_fflush_r>
 8003a0c:	68a1      	ldr	r1, [r4, #8]
 8003a0e:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <cleanup_stdio+0x38>)
 8003a10:	4299      	cmp	r1, r3
 8003a12:	d002      	beq.n	8003a1a <cleanup_stdio+0x1e>
 8003a14:	4620      	mov	r0, r4
 8003a16:	f000 fbf5 	bl	8004204 <_fflush_r>
 8003a1a:	68e1      	ldr	r1, [r4, #12]
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <cleanup_stdio+0x3c>)
 8003a1e:	4299      	cmp	r1, r3
 8003a20:	d004      	beq.n	8003a2c <cleanup_stdio+0x30>
 8003a22:	4620      	mov	r0, r4
 8003a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a28:	f000 bbec 	b.w	8004204 <_fflush_r>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	200040dc 	.word	0x200040dc
 8003a34:	20004144 	.word	0x20004144
 8003a38:	200041ac 	.word	0x200041ac

08003a3c <global_stdio_init.part.0>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <global_stdio_init.part.0+0x30>)
 8003a40:	4c0b      	ldr	r4, [pc, #44]	@ (8003a70 <global_stdio_init.part.0+0x34>)
 8003a42:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <global_stdio_init.part.0+0x38>)
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	4620      	mov	r0, r4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2104      	movs	r1, #4
 8003a4c:	f7ff ff94 	bl	8003978 <std>
 8003a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a54:	2201      	movs	r2, #1
 8003a56:	2109      	movs	r1, #9
 8003a58:	f7ff ff8e 	bl	8003978 <std>
 8003a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a60:	2202      	movs	r2, #2
 8003a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a66:	2112      	movs	r1, #18
 8003a68:	f7ff bf86 	b.w	8003978 <std>
 8003a6c:	20004214 	.word	0x20004214
 8003a70:	200040dc 	.word	0x200040dc
 8003a74:	080039e5 	.word	0x080039e5

08003a78 <__sfp_lock_acquire>:
 8003a78:	4801      	ldr	r0, [pc, #4]	@ (8003a80 <__sfp_lock_acquire+0x8>)
 8003a7a:	f000 ba44 	b.w	8003f06 <__retarget_lock_acquire_recursive>
 8003a7e:	bf00      	nop
 8003a80:	2000421d 	.word	0x2000421d

08003a84 <__sfp_lock_release>:
 8003a84:	4801      	ldr	r0, [pc, #4]	@ (8003a8c <__sfp_lock_release+0x8>)
 8003a86:	f000 ba3f 	b.w	8003f08 <__retarget_lock_release_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	2000421d 	.word	0x2000421d

08003a90 <__sinit>:
 8003a90:	b510      	push	{r4, lr}
 8003a92:	4604      	mov	r4, r0
 8003a94:	f7ff fff0 	bl	8003a78 <__sfp_lock_acquire>
 8003a98:	6a23      	ldr	r3, [r4, #32]
 8003a9a:	b11b      	cbz	r3, 8003aa4 <__sinit+0x14>
 8003a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa0:	f7ff bff0 	b.w	8003a84 <__sfp_lock_release>
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <__sinit+0x28>)
 8003aa6:	6223      	str	r3, [r4, #32]
 8003aa8:	4b04      	ldr	r3, [pc, #16]	@ (8003abc <__sinit+0x2c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f5      	bne.n	8003a9c <__sinit+0xc>
 8003ab0:	f7ff ffc4 	bl	8003a3c <global_stdio_init.part.0>
 8003ab4:	e7f2      	b.n	8003a9c <__sinit+0xc>
 8003ab6:	bf00      	nop
 8003ab8:	080039fd 	.word	0x080039fd
 8003abc:	20004214 	.word	0x20004214

08003ac0 <_fwalk_sglue>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	4688      	mov	r8, r1
 8003ac8:	4614      	mov	r4, r2
 8003aca:	2600      	movs	r6, #0
 8003acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ad4:	d505      	bpl.n	8003ae2 <_fwalk_sglue+0x22>
 8003ad6:	6824      	ldr	r4, [r4, #0]
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	d1f7      	bne.n	8003acc <_fwalk_sglue+0xc>
 8003adc:	4630      	mov	r0, r6
 8003ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae2:	89ab      	ldrh	r3, [r5, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d907      	bls.n	8003af8 <_fwalk_sglue+0x38>
 8003ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aec:	3301      	adds	r3, #1
 8003aee:	d003      	beq.n	8003af8 <_fwalk_sglue+0x38>
 8003af0:	4629      	mov	r1, r5
 8003af2:	4638      	mov	r0, r7
 8003af4:	47c0      	blx	r8
 8003af6:	4306      	orrs	r6, r0
 8003af8:	3568      	adds	r5, #104	@ 0x68
 8003afa:	e7e9      	b.n	8003ad0 <_fwalk_sglue+0x10>

08003afc <_puts_r>:
 8003afc:	6a03      	ldr	r3, [r0, #32]
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	6884      	ldr	r4, [r0, #8]
 8003b02:	4605      	mov	r5, r0
 8003b04:	460e      	mov	r6, r1
 8003b06:	b90b      	cbnz	r3, 8003b0c <_puts_r+0x10>
 8003b08:	f7ff ffc2 	bl	8003a90 <__sinit>
 8003b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b0e:	07db      	lsls	r3, r3, #31
 8003b10:	d405      	bmi.n	8003b1e <_puts_r+0x22>
 8003b12:	89a3      	ldrh	r3, [r4, #12]
 8003b14:	0598      	lsls	r0, r3, #22
 8003b16:	d402      	bmi.n	8003b1e <_puts_r+0x22>
 8003b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1a:	f000 f9f4 	bl	8003f06 <__retarget_lock_acquire_recursive>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	0719      	lsls	r1, r3, #28
 8003b22:	d502      	bpl.n	8003b2a <_puts_r+0x2e>
 8003b24:	6923      	ldr	r3, [r4, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d135      	bne.n	8003b96 <_puts_r+0x9a>
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	f000 f8c5 	bl	8003cbc <__swsetup_r>
 8003b32:	b380      	cbz	r0, 8003b96 <_puts_r+0x9a>
 8003b34:	f04f 35ff 	mov.w	r5, #4294967295
 8003b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b3a:	07da      	lsls	r2, r3, #31
 8003b3c:	d405      	bmi.n	8003b4a <_puts_r+0x4e>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	059b      	lsls	r3, r3, #22
 8003b42:	d402      	bmi.n	8003b4a <_puts_r+0x4e>
 8003b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b46:	f000 f9df 	bl	8003f08 <__retarget_lock_release_recursive>
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da04      	bge.n	8003b5c <_puts_r+0x60>
 8003b52:	69a2      	ldr	r2, [r4, #24]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	dc17      	bgt.n	8003b88 <_puts_r+0x8c>
 8003b58:	290a      	cmp	r1, #10
 8003b5a:	d015      	beq.n	8003b88 <_puts_r+0x8c>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	7019      	strb	r1, [r3, #0]
 8003b64:	68a3      	ldr	r3, [r4, #8]
 8003b66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	2900      	cmp	r1, #0
 8003b70:	d1ed      	bne.n	8003b4e <_puts_r+0x52>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da11      	bge.n	8003b9a <_puts_r+0x9e>
 8003b76:	4622      	mov	r2, r4
 8003b78:	210a      	movs	r1, #10
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f85f 	bl	8003c3e <__swbuf_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d0d7      	beq.n	8003b34 <_puts_r+0x38>
 8003b84:	250a      	movs	r5, #10
 8003b86:	e7d7      	b.n	8003b38 <_puts_r+0x3c>
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f000 f857 	bl	8003c3e <__swbuf_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d1e7      	bne.n	8003b64 <_puts_r+0x68>
 8003b94:	e7ce      	b.n	8003b34 <_puts_r+0x38>
 8003b96:	3e01      	subs	r6, #1
 8003b98:	e7e4      	b.n	8003b64 <_puts_r+0x68>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	6022      	str	r2, [r4, #0]
 8003ba0:	220a      	movs	r2, #10
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e7ee      	b.n	8003b84 <_puts_r+0x88>
	...

08003ba8 <puts>:
 8003ba8:	4b02      	ldr	r3, [pc, #8]	@ (8003bb4 <puts+0xc>)
 8003baa:	4601      	mov	r1, r0
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	f7ff bfa5 	b.w	8003afc <_puts_r>
 8003bb2:	bf00      	nop
 8003bb4:	2000001c 	.word	0x2000001c

08003bb8 <__sread>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	460c      	mov	r4, r1
 8003bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc0:	f000 f952 	bl	8003e68 <_read_r>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	bfab      	itete	ge
 8003bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003bca:	89a3      	ldrhlt	r3, [r4, #12]
 8003bcc:	181b      	addge	r3, r3, r0
 8003bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003bd2:	bfac      	ite	ge
 8003bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bd6:	81a3      	strhlt	r3, [r4, #12]
 8003bd8:	bd10      	pop	{r4, pc}

08003bda <__swrite>:
 8003bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bde:	461f      	mov	r7, r3
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	05db      	lsls	r3, r3, #23
 8003be4:	4605      	mov	r5, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4616      	mov	r6, r2
 8003bea:	d505      	bpl.n	8003bf8 <__swrite+0x1e>
 8003bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f000 f926 	bl	8003e44 <_lseek_r>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	4632      	mov	r2, r6
 8003c06:	463b      	mov	r3, r7
 8003c08:	4628      	mov	r0, r5
 8003c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0e:	f000 b93d 	b.w	8003e8c <_write_r>

08003c12 <__sseek>:
 8003c12:	b510      	push	{r4, lr}
 8003c14:	460c      	mov	r4, r1
 8003c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1a:	f000 f913 	bl	8003e44 <_lseek_r>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	bf15      	itete	ne
 8003c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c2e:	81a3      	strheq	r3, [r4, #12]
 8003c30:	bf18      	it	ne
 8003c32:	81a3      	strhne	r3, [r4, #12]
 8003c34:	bd10      	pop	{r4, pc}

08003c36 <__sclose>:
 8003c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3a:	f000 b89d 	b.w	8003d78 <_close_r>

08003c3e <__swbuf_r>:
 8003c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c40:	460e      	mov	r6, r1
 8003c42:	4614      	mov	r4, r2
 8003c44:	4605      	mov	r5, r0
 8003c46:	b118      	cbz	r0, 8003c50 <__swbuf_r+0x12>
 8003c48:	6a03      	ldr	r3, [r0, #32]
 8003c4a:	b90b      	cbnz	r3, 8003c50 <__swbuf_r+0x12>
 8003c4c:	f7ff ff20 	bl	8003a90 <__sinit>
 8003c50:	69a3      	ldr	r3, [r4, #24]
 8003c52:	60a3      	str	r3, [r4, #8]
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	071a      	lsls	r2, r3, #28
 8003c58:	d501      	bpl.n	8003c5e <__swbuf_r+0x20>
 8003c5a:	6923      	ldr	r3, [r4, #16]
 8003c5c:	b943      	cbnz	r3, 8003c70 <__swbuf_r+0x32>
 8003c5e:	4621      	mov	r1, r4
 8003c60:	4628      	mov	r0, r5
 8003c62:	f000 f82b 	bl	8003cbc <__swsetup_r>
 8003c66:	b118      	cbz	r0, 8003c70 <__swbuf_r+0x32>
 8003c68:	f04f 37ff 	mov.w	r7, #4294967295
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	6922      	ldr	r2, [r4, #16]
 8003c74:	1a98      	subs	r0, r3, r2
 8003c76:	6963      	ldr	r3, [r4, #20]
 8003c78:	b2f6      	uxtb	r6, r6
 8003c7a:	4283      	cmp	r3, r0
 8003c7c:	4637      	mov	r7, r6
 8003c7e:	dc05      	bgt.n	8003c8c <__swbuf_r+0x4e>
 8003c80:	4621      	mov	r1, r4
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 fabe 	bl	8004204 <_fflush_r>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d1ed      	bne.n	8003c68 <__swbuf_r+0x2a>
 8003c8c:	68a3      	ldr	r3, [r4, #8]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	60a3      	str	r3, [r4, #8]
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	701e      	strb	r6, [r3, #0]
 8003c9a:	6962      	ldr	r2, [r4, #20]
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d004      	beq.n	8003cac <__swbuf_r+0x6e>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	07db      	lsls	r3, r3, #31
 8003ca6:	d5e1      	bpl.n	8003c6c <__swbuf_r+0x2e>
 8003ca8:	2e0a      	cmp	r6, #10
 8003caa:	d1df      	bne.n	8003c6c <__swbuf_r+0x2e>
 8003cac:	4621      	mov	r1, r4
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f000 faa8 	bl	8004204 <_fflush_r>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d0d9      	beq.n	8003c6c <__swbuf_r+0x2e>
 8003cb8:	e7d6      	b.n	8003c68 <__swbuf_r+0x2a>
	...

08003cbc <__swsetup_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4b29      	ldr	r3, [pc, #164]	@ (8003d64 <__swsetup_r+0xa8>)
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	b118      	cbz	r0, 8003cd0 <__swsetup_r+0x14>
 8003cc8:	6a03      	ldr	r3, [r0, #32]
 8003cca:	b90b      	cbnz	r3, 8003cd0 <__swsetup_r+0x14>
 8003ccc:	f7ff fee0 	bl	8003a90 <__sinit>
 8003cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd4:	0719      	lsls	r1, r3, #28
 8003cd6:	d422      	bmi.n	8003d1e <__swsetup_r+0x62>
 8003cd8:	06da      	lsls	r2, r3, #27
 8003cda:	d407      	bmi.n	8003cec <__swsetup_r+0x30>
 8003cdc:	2209      	movs	r2, #9
 8003cde:	602a      	str	r2, [r5, #0]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	e033      	b.n	8003d54 <__swsetup_r+0x98>
 8003cec:	0758      	lsls	r0, r3, #29
 8003cee:	d512      	bpl.n	8003d16 <__swsetup_r+0x5a>
 8003cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cf2:	b141      	cbz	r1, 8003d06 <__swsetup_r+0x4a>
 8003cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d002      	beq.n	8003d02 <__swsetup_r+0x46>
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 f905 	bl	8003f0c <_free_r>
 8003d02:	2300      	movs	r3, #0
 8003d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6063      	str	r3, [r4, #4]
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f043 0308 	orr.w	r3, r3, #8
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	b94b      	cbnz	r3, 8003d36 <__swsetup_r+0x7a>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d2c:	d003      	beq.n	8003d36 <__swsetup_r+0x7a>
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 fab5 	bl	80042a0 <__smakebuf_r>
 8003d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d3a:	f013 0201 	ands.w	r2, r3, #1
 8003d3e:	d00a      	beq.n	8003d56 <__swsetup_r+0x9a>
 8003d40:	2200      	movs	r2, #0
 8003d42:	60a2      	str	r2, [r4, #8]
 8003d44:	6962      	ldr	r2, [r4, #20]
 8003d46:	4252      	negs	r2, r2
 8003d48:	61a2      	str	r2, [r4, #24]
 8003d4a:	6922      	ldr	r2, [r4, #16]
 8003d4c:	b942      	cbnz	r2, 8003d60 <__swsetup_r+0xa4>
 8003d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d52:	d1c5      	bne.n	8003ce0 <__swsetup_r+0x24>
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
 8003d56:	0799      	lsls	r1, r3, #30
 8003d58:	bf58      	it	pl
 8003d5a:	6962      	ldrpl	r2, [r4, #20]
 8003d5c:	60a2      	str	r2, [r4, #8]
 8003d5e:	e7f4      	b.n	8003d4a <__swsetup_r+0x8e>
 8003d60:	2000      	movs	r0, #0
 8003d62:	e7f7      	b.n	8003d54 <__swsetup_r+0x98>
 8003d64:	2000001c 	.word	0x2000001c

08003d68 <memset>:
 8003d68:	4402      	add	r2, r0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <_close_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d06      	ldr	r5, [pc, #24]	@ (8003d94 <_close_r+0x1c>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	f7fc fe8b 	bl	8000a9e <_close>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_close_r+0x1a>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_close_r+0x1a>
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	20004218 	.word	0x20004218

08003d98 <_reclaim_reent>:
 8003d98:	4b29      	ldr	r3, [pc, #164]	@ (8003e40 <_reclaim_reent+0xa8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4283      	cmp	r3, r0
 8003d9e:	b570      	push	{r4, r5, r6, lr}
 8003da0:	4604      	mov	r4, r0
 8003da2:	d04b      	beq.n	8003e3c <_reclaim_reent+0xa4>
 8003da4:	69c3      	ldr	r3, [r0, #28]
 8003da6:	b1ab      	cbz	r3, 8003dd4 <_reclaim_reent+0x3c>
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	b16b      	cbz	r3, 8003dc8 <_reclaim_reent+0x30>
 8003dac:	2500      	movs	r5, #0
 8003dae:	69e3      	ldr	r3, [r4, #28]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	5959      	ldr	r1, [r3, r5]
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d13b      	bne.n	8003e30 <_reclaim_reent+0x98>
 8003db8:	3504      	adds	r5, #4
 8003dba:	2d80      	cmp	r5, #128	@ 0x80
 8003dbc:	d1f7      	bne.n	8003dae <_reclaim_reent+0x16>
 8003dbe:	69e3      	ldr	r3, [r4, #28]
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	68d9      	ldr	r1, [r3, #12]
 8003dc4:	f000 f8a2 	bl	8003f0c <_free_r>
 8003dc8:	69e3      	ldr	r3, [r4, #28]
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	b111      	cbz	r1, 8003dd4 <_reclaim_reent+0x3c>
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f000 f89c 	bl	8003f0c <_free_r>
 8003dd4:	6961      	ldr	r1, [r4, #20]
 8003dd6:	b111      	cbz	r1, 8003dde <_reclaim_reent+0x46>
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f000 f897 	bl	8003f0c <_free_r>
 8003dde:	69e1      	ldr	r1, [r4, #28]
 8003de0:	b111      	cbz	r1, 8003de8 <_reclaim_reent+0x50>
 8003de2:	4620      	mov	r0, r4
 8003de4:	f000 f892 	bl	8003f0c <_free_r>
 8003de8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003dea:	b111      	cbz	r1, 8003df2 <_reclaim_reent+0x5a>
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 f88d 	bl	8003f0c <_free_r>
 8003df2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003df4:	b111      	cbz	r1, 8003dfc <_reclaim_reent+0x64>
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 f888 	bl	8003f0c <_free_r>
 8003dfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003dfe:	b111      	cbz	r1, 8003e06 <_reclaim_reent+0x6e>
 8003e00:	4620      	mov	r0, r4
 8003e02:	f000 f883 	bl	8003f0c <_free_r>
 8003e06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003e08:	b111      	cbz	r1, 8003e10 <_reclaim_reent+0x78>
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 f87e 	bl	8003f0c <_free_r>
 8003e10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003e12:	b111      	cbz	r1, 8003e1a <_reclaim_reent+0x82>
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 f879 	bl	8003f0c <_free_r>
 8003e1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003e1c:	b111      	cbz	r1, 8003e24 <_reclaim_reent+0x8c>
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f000 f874 	bl	8003f0c <_free_r>
 8003e24:	6a23      	ldr	r3, [r4, #32]
 8003e26:	b14b      	cbz	r3, 8003e3c <_reclaim_reent+0xa4>
 8003e28:	4620      	mov	r0, r4
 8003e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e2e:	4718      	bx	r3
 8003e30:	680e      	ldr	r6, [r1, #0]
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 f86a 	bl	8003f0c <_free_r>
 8003e38:	4631      	mov	r1, r6
 8003e3a:	e7bb      	b.n	8003db4 <_reclaim_reent+0x1c>
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000001c 	.word	0x2000001c

08003e44 <_lseek_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4d07      	ldr	r5, [pc, #28]	@ (8003e64 <_lseek_r+0x20>)
 8003e48:	4604      	mov	r4, r0
 8003e4a:	4608      	mov	r0, r1
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	602a      	str	r2, [r5, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f7fc fe4a 	bl	8000aec <_lseek>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_lseek_r+0x1e>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_lseek_r+0x1e>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	20004218 	.word	0x20004218

08003e68 <_read_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4d07      	ldr	r5, [pc, #28]	@ (8003e88 <_read_r+0x20>)
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	4608      	mov	r0, r1
 8003e70:	4611      	mov	r1, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	602a      	str	r2, [r5, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f7fc fdf4 	bl	8000a64 <_read>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_read_r+0x1e>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_read_r+0x1e>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	20004218 	.word	0x20004218

08003e8c <_write_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4d07      	ldr	r5, [pc, #28]	@ (8003eac <_write_r+0x20>)
 8003e90:	4604      	mov	r4, r0
 8003e92:	4608      	mov	r0, r1
 8003e94:	4611      	mov	r1, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f7fc fb59 	bl	8000552 <_write>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_write_r+0x1e>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_write_r+0x1e>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	20004218 	.word	0x20004218

08003eb0 <__errno>:
 8003eb0:	4b01      	ldr	r3, [pc, #4]	@ (8003eb8 <__errno+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	2000001c 	.word	0x2000001c

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef8 <__libc_init_array+0x3c>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8003efc <__libc_init_array+0x40>)
 8003ece:	4c0c      	ldr	r4, [pc, #48]	@ (8003f00 <__libc_init_array+0x44>)
 8003ed0:	f000 fa54 	bl	800437c <_init>
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	2600      	movs	r6, #0
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	080044a4 	.word	0x080044a4
 8003ef8:	080044a4 	.word	0x080044a4
 8003efc:	080044a4 	.word	0x080044a4
 8003f00:	080044a8 	.word	0x080044a8

08003f04 <__retarget_lock_init_recursive>:
 8003f04:	4770      	bx	lr

08003f06 <__retarget_lock_acquire_recursive>:
 8003f06:	4770      	bx	lr

08003f08 <__retarget_lock_release_recursive>:
 8003f08:	4770      	bx	lr
	...

08003f0c <_free_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4605      	mov	r5, r0
 8003f10:	2900      	cmp	r1, #0
 8003f12:	d041      	beq.n	8003f98 <_free_r+0x8c>
 8003f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f18:	1f0c      	subs	r4, r1, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bfb8      	it	lt
 8003f1e:	18e4      	addlt	r4, r4, r3
 8003f20:	f000 f8e0 	bl	80040e4 <__malloc_lock>
 8003f24:	4a1d      	ldr	r2, [pc, #116]	@ (8003f9c <_free_r+0x90>)
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	b933      	cbnz	r3, 8003f38 <_free_r+0x2c>
 8003f2a:	6063      	str	r3, [r4, #4]
 8003f2c:	6014      	str	r4, [r2, #0]
 8003f2e:	4628      	mov	r0, r5
 8003f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f34:	f000 b8dc 	b.w	80040f0 <__malloc_unlock>
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	d908      	bls.n	8003f4e <_free_r+0x42>
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	1821      	adds	r1, r4, r0
 8003f40:	428b      	cmp	r3, r1
 8003f42:	bf01      	itttt	eq
 8003f44:	6819      	ldreq	r1, [r3, #0]
 8003f46:	685b      	ldreq	r3, [r3, #4]
 8003f48:	1809      	addeq	r1, r1, r0
 8003f4a:	6021      	streq	r1, [r4, #0]
 8003f4c:	e7ed      	b.n	8003f2a <_free_r+0x1e>
 8003f4e:	461a      	mov	r2, r3
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	b10b      	cbz	r3, 8003f58 <_free_r+0x4c>
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d9fa      	bls.n	8003f4e <_free_r+0x42>
 8003f58:	6811      	ldr	r1, [r2, #0]
 8003f5a:	1850      	adds	r0, r2, r1
 8003f5c:	42a0      	cmp	r0, r4
 8003f5e:	d10b      	bne.n	8003f78 <_free_r+0x6c>
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	4401      	add	r1, r0
 8003f64:	1850      	adds	r0, r2, r1
 8003f66:	4283      	cmp	r3, r0
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	d1e0      	bne.n	8003f2e <_free_r+0x22>
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	6053      	str	r3, [r2, #4]
 8003f72:	4408      	add	r0, r1
 8003f74:	6010      	str	r0, [r2, #0]
 8003f76:	e7da      	b.n	8003f2e <_free_r+0x22>
 8003f78:	d902      	bls.n	8003f80 <_free_r+0x74>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	e7d6      	b.n	8003f2e <_free_r+0x22>
 8003f80:	6820      	ldr	r0, [r4, #0]
 8003f82:	1821      	adds	r1, r4, r0
 8003f84:	428b      	cmp	r3, r1
 8003f86:	bf04      	itt	eq
 8003f88:	6819      	ldreq	r1, [r3, #0]
 8003f8a:	685b      	ldreq	r3, [r3, #4]
 8003f8c:	6063      	str	r3, [r4, #4]
 8003f8e:	bf04      	itt	eq
 8003f90:	1809      	addeq	r1, r1, r0
 8003f92:	6021      	streq	r1, [r4, #0]
 8003f94:	6054      	str	r4, [r2, #4]
 8003f96:	e7ca      	b.n	8003f2e <_free_r+0x22>
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20004224 	.word	0x20004224

08003fa0 <sbrk_aligned>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8003fe0 <sbrk_aligned+0x40>)
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	6831      	ldr	r1, [r6, #0]
 8003fa8:	4605      	mov	r5, r0
 8003faa:	b911      	cbnz	r1, 8003fb2 <sbrk_aligned+0x12>
 8003fac:	f000 f9d6 	bl	800435c <_sbrk_r>
 8003fb0:	6030      	str	r0, [r6, #0]
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f000 f9d1 	bl	800435c <_sbrk_r>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	d103      	bne.n	8003fc6 <sbrk_aligned+0x26>
 8003fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
 8003fc6:	1cc4      	adds	r4, r0, #3
 8003fc8:	f024 0403 	bic.w	r4, r4, #3
 8003fcc:	42a0      	cmp	r0, r4
 8003fce:	d0f8      	beq.n	8003fc2 <sbrk_aligned+0x22>
 8003fd0:	1a21      	subs	r1, r4, r0
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 f9c2 	bl	800435c <_sbrk_r>
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d1f2      	bne.n	8003fc2 <sbrk_aligned+0x22>
 8003fdc:	e7ef      	b.n	8003fbe <sbrk_aligned+0x1e>
 8003fde:	bf00      	nop
 8003fe0:	20004220 	.word	0x20004220

08003fe4 <_malloc_r>:
 8003fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	1ccd      	adds	r5, r1, #3
 8003fea:	f025 0503 	bic.w	r5, r5, #3
 8003fee:	3508      	adds	r5, #8
 8003ff0:	2d0c      	cmp	r5, #12
 8003ff2:	bf38      	it	cc
 8003ff4:	250c      	movcc	r5, #12
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	db01      	blt.n	8004000 <_malloc_r+0x1c>
 8003ffc:	42a9      	cmp	r1, r5
 8003ffe:	d904      	bls.n	800400a <_malloc_r+0x26>
 8004000:	230c      	movs	r3, #12
 8004002:	6033      	str	r3, [r6, #0]
 8004004:	2000      	movs	r0, #0
 8004006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040e0 <_malloc_r+0xfc>
 800400e:	f000 f869 	bl	80040e4 <__malloc_lock>
 8004012:	f8d8 3000 	ldr.w	r3, [r8]
 8004016:	461c      	mov	r4, r3
 8004018:	bb44      	cbnz	r4, 800406c <_malloc_r+0x88>
 800401a:	4629      	mov	r1, r5
 800401c:	4630      	mov	r0, r6
 800401e:	f7ff ffbf 	bl	8003fa0 <sbrk_aligned>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	4604      	mov	r4, r0
 8004026:	d158      	bne.n	80040da <_malloc_r+0xf6>
 8004028:	f8d8 4000 	ldr.w	r4, [r8]
 800402c:	4627      	mov	r7, r4
 800402e:	2f00      	cmp	r7, #0
 8004030:	d143      	bne.n	80040ba <_malloc_r+0xd6>
 8004032:	2c00      	cmp	r4, #0
 8004034:	d04b      	beq.n	80040ce <_malloc_r+0xea>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	4639      	mov	r1, r7
 800403a:	4630      	mov	r0, r6
 800403c:	eb04 0903 	add.w	r9, r4, r3
 8004040:	f000 f98c 	bl	800435c <_sbrk_r>
 8004044:	4581      	cmp	r9, r0
 8004046:	d142      	bne.n	80040ce <_malloc_r+0xea>
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	1a6d      	subs	r5, r5, r1
 800404c:	4629      	mov	r1, r5
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff ffa6 	bl	8003fa0 <sbrk_aligned>
 8004054:	3001      	adds	r0, #1
 8004056:	d03a      	beq.n	80040ce <_malloc_r+0xea>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	442b      	add	r3, r5
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	f8d8 3000 	ldr.w	r3, [r8]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	bb62      	cbnz	r2, 80040c0 <_malloc_r+0xdc>
 8004066:	f8c8 7000 	str.w	r7, [r8]
 800406a:	e00f      	b.n	800408c <_malloc_r+0xa8>
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	1b52      	subs	r2, r2, r5
 8004070:	d420      	bmi.n	80040b4 <_malloc_r+0xd0>
 8004072:	2a0b      	cmp	r2, #11
 8004074:	d917      	bls.n	80040a6 <_malloc_r+0xc2>
 8004076:	1961      	adds	r1, r4, r5
 8004078:	42a3      	cmp	r3, r4
 800407a:	6025      	str	r5, [r4, #0]
 800407c:	bf18      	it	ne
 800407e:	6059      	strne	r1, [r3, #4]
 8004080:	6863      	ldr	r3, [r4, #4]
 8004082:	bf08      	it	eq
 8004084:	f8c8 1000 	streq.w	r1, [r8]
 8004088:	5162      	str	r2, [r4, r5]
 800408a:	604b      	str	r3, [r1, #4]
 800408c:	4630      	mov	r0, r6
 800408e:	f000 f82f 	bl	80040f0 <__malloc_unlock>
 8004092:	f104 000b 	add.w	r0, r4, #11
 8004096:	1d23      	adds	r3, r4, #4
 8004098:	f020 0007 	bic.w	r0, r0, #7
 800409c:	1ac2      	subs	r2, r0, r3
 800409e:	bf1c      	itt	ne
 80040a0:	1a1b      	subne	r3, r3, r0
 80040a2:	50a3      	strne	r3, [r4, r2]
 80040a4:	e7af      	b.n	8004006 <_malloc_r+0x22>
 80040a6:	6862      	ldr	r2, [r4, #4]
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	bf0c      	ite	eq
 80040ac:	f8c8 2000 	streq.w	r2, [r8]
 80040b0:	605a      	strne	r2, [r3, #4]
 80040b2:	e7eb      	b.n	800408c <_malloc_r+0xa8>
 80040b4:	4623      	mov	r3, r4
 80040b6:	6864      	ldr	r4, [r4, #4]
 80040b8:	e7ae      	b.n	8004018 <_malloc_r+0x34>
 80040ba:	463c      	mov	r4, r7
 80040bc:	687f      	ldr	r7, [r7, #4]
 80040be:	e7b6      	b.n	800402e <_malloc_r+0x4a>
 80040c0:	461a      	mov	r2, r3
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d1fb      	bne.n	80040c0 <_malloc_r+0xdc>
 80040c8:	2300      	movs	r3, #0
 80040ca:	6053      	str	r3, [r2, #4]
 80040cc:	e7de      	b.n	800408c <_malloc_r+0xa8>
 80040ce:	230c      	movs	r3, #12
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	4630      	mov	r0, r6
 80040d4:	f000 f80c 	bl	80040f0 <__malloc_unlock>
 80040d8:	e794      	b.n	8004004 <_malloc_r+0x20>
 80040da:	6005      	str	r5, [r0, #0]
 80040dc:	e7d6      	b.n	800408c <_malloc_r+0xa8>
 80040de:	bf00      	nop
 80040e0:	20004224 	.word	0x20004224

080040e4 <__malloc_lock>:
 80040e4:	4801      	ldr	r0, [pc, #4]	@ (80040ec <__malloc_lock+0x8>)
 80040e6:	f7ff bf0e 	b.w	8003f06 <__retarget_lock_acquire_recursive>
 80040ea:	bf00      	nop
 80040ec:	2000421c 	.word	0x2000421c

080040f0 <__malloc_unlock>:
 80040f0:	4801      	ldr	r0, [pc, #4]	@ (80040f8 <__malloc_unlock+0x8>)
 80040f2:	f7ff bf09 	b.w	8003f08 <__retarget_lock_release_recursive>
 80040f6:	bf00      	nop
 80040f8:	2000421c 	.word	0x2000421c

080040fc <__sflush_r>:
 80040fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004104:	0716      	lsls	r6, r2, #28
 8004106:	4605      	mov	r5, r0
 8004108:	460c      	mov	r4, r1
 800410a:	d454      	bmi.n	80041b6 <__sflush_r+0xba>
 800410c:	684b      	ldr	r3, [r1, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	dc02      	bgt.n	8004118 <__sflush_r+0x1c>
 8004112:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	dd48      	ble.n	80041aa <__sflush_r+0xae>
 8004118:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800411a:	2e00      	cmp	r6, #0
 800411c:	d045      	beq.n	80041aa <__sflush_r+0xae>
 800411e:	2300      	movs	r3, #0
 8004120:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004124:	682f      	ldr	r7, [r5, #0]
 8004126:	6a21      	ldr	r1, [r4, #32]
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	d030      	beq.n	800418e <__sflush_r+0x92>
 800412c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	0759      	lsls	r1, r3, #29
 8004132:	d505      	bpl.n	8004140 <__sflush_r+0x44>
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800413a:	b10b      	cbz	r3, 8004140 <__sflush_r+0x44>
 800413c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	2300      	movs	r3, #0
 8004142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004144:	6a21      	ldr	r1, [r4, #32]
 8004146:	4628      	mov	r0, r5
 8004148:	47b0      	blx	r6
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	d106      	bne.n	800415e <__sflush_r+0x62>
 8004150:	6829      	ldr	r1, [r5, #0]
 8004152:	291d      	cmp	r1, #29
 8004154:	d82b      	bhi.n	80041ae <__sflush_r+0xb2>
 8004156:	4a2a      	ldr	r2, [pc, #168]	@ (8004200 <__sflush_r+0x104>)
 8004158:	410a      	asrs	r2, r1
 800415a:	07d6      	lsls	r6, r2, #31
 800415c:	d427      	bmi.n	80041ae <__sflush_r+0xb2>
 800415e:	2200      	movs	r2, #0
 8004160:	6062      	str	r2, [r4, #4]
 8004162:	04d9      	lsls	r1, r3, #19
 8004164:	6922      	ldr	r2, [r4, #16]
 8004166:	6022      	str	r2, [r4, #0]
 8004168:	d504      	bpl.n	8004174 <__sflush_r+0x78>
 800416a:	1c42      	adds	r2, r0, #1
 800416c:	d101      	bne.n	8004172 <__sflush_r+0x76>
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	b903      	cbnz	r3, 8004174 <__sflush_r+0x78>
 8004172:	6560      	str	r0, [r4, #84]	@ 0x54
 8004174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004176:	602f      	str	r7, [r5, #0]
 8004178:	b1b9      	cbz	r1, 80041aa <__sflush_r+0xae>
 800417a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800417e:	4299      	cmp	r1, r3
 8004180:	d002      	beq.n	8004188 <__sflush_r+0x8c>
 8004182:	4628      	mov	r0, r5
 8004184:	f7ff fec2 	bl	8003f0c <_free_r>
 8004188:	2300      	movs	r3, #0
 800418a:	6363      	str	r3, [r4, #52]	@ 0x34
 800418c:	e00d      	b.n	80041aa <__sflush_r+0xae>
 800418e:	2301      	movs	r3, #1
 8004190:	4628      	mov	r0, r5
 8004192:	47b0      	blx	r6
 8004194:	4602      	mov	r2, r0
 8004196:	1c50      	adds	r0, r2, #1
 8004198:	d1c9      	bne.n	800412e <__sflush_r+0x32>
 800419a:	682b      	ldr	r3, [r5, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0c6      	beq.n	800412e <__sflush_r+0x32>
 80041a0:	2b1d      	cmp	r3, #29
 80041a2:	d001      	beq.n	80041a8 <__sflush_r+0xac>
 80041a4:	2b16      	cmp	r3, #22
 80041a6:	d11e      	bne.n	80041e6 <__sflush_r+0xea>
 80041a8:	602f      	str	r7, [r5, #0]
 80041aa:	2000      	movs	r0, #0
 80041ac:	e022      	b.n	80041f4 <__sflush_r+0xf8>
 80041ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041b2:	b21b      	sxth	r3, r3
 80041b4:	e01b      	b.n	80041ee <__sflush_r+0xf2>
 80041b6:	690f      	ldr	r7, [r1, #16]
 80041b8:	2f00      	cmp	r7, #0
 80041ba:	d0f6      	beq.n	80041aa <__sflush_r+0xae>
 80041bc:	0793      	lsls	r3, r2, #30
 80041be:	680e      	ldr	r6, [r1, #0]
 80041c0:	bf08      	it	eq
 80041c2:	694b      	ldreq	r3, [r1, #20]
 80041c4:	600f      	str	r7, [r1, #0]
 80041c6:	bf18      	it	ne
 80041c8:	2300      	movne	r3, #0
 80041ca:	eba6 0807 	sub.w	r8, r6, r7
 80041ce:	608b      	str	r3, [r1, #8]
 80041d0:	f1b8 0f00 	cmp.w	r8, #0
 80041d4:	dde9      	ble.n	80041aa <__sflush_r+0xae>
 80041d6:	6a21      	ldr	r1, [r4, #32]
 80041d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041da:	4643      	mov	r3, r8
 80041dc:	463a      	mov	r2, r7
 80041de:	4628      	mov	r0, r5
 80041e0:	47b0      	blx	r6
 80041e2:	2800      	cmp	r0, #0
 80041e4:	dc08      	bgt.n	80041f8 <__sflush_r+0xfc>
 80041e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ee:	81a3      	strh	r3, [r4, #12]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f8:	4407      	add	r7, r0
 80041fa:	eba8 0800 	sub.w	r8, r8, r0
 80041fe:	e7e7      	b.n	80041d0 <__sflush_r+0xd4>
 8004200:	dfbffffe 	.word	0xdfbffffe

08004204 <_fflush_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	4605      	mov	r5, r0
 800420a:	460c      	mov	r4, r1
 800420c:	b913      	cbnz	r3, 8004214 <_fflush_r+0x10>
 800420e:	2500      	movs	r5, #0
 8004210:	4628      	mov	r0, r5
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	b118      	cbz	r0, 800421e <_fflush_r+0x1a>
 8004216:	6a03      	ldr	r3, [r0, #32]
 8004218:	b90b      	cbnz	r3, 800421e <_fflush_r+0x1a>
 800421a:	f7ff fc39 	bl	8003a90 <__sinit>
 800421e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f3      	beq.n	800420e <_fflush_r+0xa>
 8004226:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004228:	07d0      	lsls	r0, r2, #31
 800422a:	d404      	bmi.n	8004236 <_fflush_r+0x32>
 800422c:	0599      	lsls	r1, r3, #22
 800422e:	d402      	bmi.n	8004236 <_fflush_r+0x32>
 8004230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004232:	f7ff fe68 	bl	8003f06 <__retarget_lock_acquire_recursive>
 8004236:	4628      	mov	r0, r5
 8004238:	4621      	mov	r1, r4
 800423a:	f7ff ff5f 	bl	80040fc <__sflush_r>
 800423e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004240:	07da      	lsls	r2, r3, #31
 8004242:	4605      	mov	r5, r0
 8004244:	d4e4      	bmi.n	8004210 <_fflush_r+0xc>
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	059b      	lsls	r3, r3, #22
 800424a:	d4e1      	bmi.n	8004210 <_fflush_r+0xc>
 800424c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800424e:	f7ff fe5b 	bl	8003f08 <__retarget_lock_release_recursive>
 8004252:	e7dd      	b.n	8004210 <_fflush_r+0xc>

08004254 <__swhatbuf_r>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	460c      	mov	r4, r1
 8004258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425c:	2900      	cmp	r1, #0
 800425e:	b096      	sub	sp, #88	@ 0x58
 8004260:	4615      	mov	r5, r2
 8004262:	461e      	mov	r6, r3
 8004264:	da0d      	bge.n	8004282 <__swhatbuf_r+0x2e>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	bf14      	ite	ne
 8004272:	2340      	movne	r3, #64	@ 0x40
 8004274:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004278:	2000      	movs	r0, #0
 800427a:	6031      	str	r1, [r6, #0]
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	b016      	add	sp, #88	@ 0x58
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	466a      	mov	r2, sp
 8004284:	f000 f848 	bl	8004318 <_fstat_r>
 8004288:	2800      	cmp	r0, #0
 800428a:	dbec      	blt.n	8004266 <__swhatbuf_r+0x12>
 800428c:	9901      	ldr	r1, [sp, #4]
 800428e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004292:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004296:	4259      	negs	r1, r3
 8004298:	4159      	adcs	r1, r3
 800429a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800429e:	e7eb      	b.n	8004278 <__swhatbuf_r+0x24>

080042a0 <__smakebuf_r>:
 80042a0:	898b      	ldrh	r3, [r1, #12]
 80042a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042a4:	079d      	lsls	r5, r3, #30
 80042a6:	4606      	mov	r6, r0
 80042a8:	460c      	mov	r4, r1
 80042aa:	d507      	bpl.n	80042bc <__smakebuf_r+0x1c>
 80042ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	2301      	movs	r3, #1
 80042b6:	6163      	str	r3, [r4, #20]
 80042b8:	b003      	add	sp, #12
 80042ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042bc:	ab01      	add	r3, sp, #4
 80042be:	466a      	mov	r2, sp
 80042c0:	f7ff ffc8 	bl	8004254 <__swhatbuf_r>
 80042c4:	9f00      	ldr	r7, [sp, #0]
 80042c6:	4605      	mov	r5, r0
 80042c8:	4639      	mov	r1, r7
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7ff fe8a 	bl	8003fe4 <_malloc_r>
 80042d0:	b948      	cbnz	r0, 80042e6 <__smakebuf_r+0x46>
 80042d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d6:	059a      	lsls	r2, r3, #22
 80042d8:	d4ee      	bmi.n	80042b8 <__smakebuf_r+0x18>
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	f043 0302 	orr.w	r3, r3, #2
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	e7e2      	b.n	80042ac <__smakebuf_r+0xc>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	6020      	str	r0, [r4, #0]
 80042ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	9b01      	ldr	r3, [sp, #4]
 80042f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042f6:	b15b      	cbz	r3, 8004310 <__smakebuf_r+0x70>
 80042f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f81d 	bl	800433c <_isatty_r>
 8004302:	b128      	cbz	r0, 8004310 <__smakebuf_r+0x70>
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	431d      	orrs	r5, r3
 8004314:	81a5      	strh	r5, [r4, #12]
 8004316:	e7cf      	b.n	80042b8 <__smakebuf_r+0x18>

08004318 <_fstat_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d07      	ldr	r5, [pc, #28]	@ (8004338 <_fstat_r+0x20>)
 800431c:	2300      	movs	r3, #0
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	f7fc fbc6 	bl	8000ab6 <_fstat>
 800432a:	1c43      	adds	r3, r0, #1
 800432c:	d102      	bne.n	8004334 <_fstat_r+0x1c>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	b103      	cbz	r3, 8004334 <_fstat_r+0x1c>
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	bd38      	pop	{r3, r4, r5, pc}
 8004336:	bf00      	nop
 8004338:	20004218 	.word	0x20004218

0800433c <_isatty_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d06      	ldr	r5, [pc, #24]	@ (8004358 <_isatty_r+0x1c>)
 8004340:	2300      	movs	r3, #0
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	f7fc fbc5 	bl	8000ad6 <_isatty>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_isatty_r+0x1a>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_isatty_r+0x1a>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	20004218 	.word	0x20004218

0800435c <_sbrk_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d06      	ldr	r5, [pc, #24]	@ (8004378 <_sbrk_r+0x1c>)
 8004360:	2300      	movs	r3, #0
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc fbce 	bl	8000b08 <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_sbrk_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_sbrk_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20004218 	.word	0x20004218

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
