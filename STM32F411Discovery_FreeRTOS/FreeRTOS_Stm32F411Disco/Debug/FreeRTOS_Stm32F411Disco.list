
FreeRTOS_Stm32F411Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004094  08004094  00005094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800410c  0800410c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004110  08004110  00005110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004114  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b0  2000006c  08004180  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000421c  08004180  0000621c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fee0  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a47  00000000  00000000  00015f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000189c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b87  00000000  00000000  000198e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018920  00000000  00000000  0001a467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108fc  00000000  00000000  00032d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009626d  00000000  00000000  00043683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d98f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e8  00000000  00000000  000d9934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000ddd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800407c 	.word	0x0800407c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800407c 	.word	0x0800407c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000088 	.word	0x20000088
 8000500:	20000128 	.word	0x20000128

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc7 	bl	8000504 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x16>

	}
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 facf 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f821 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f887 	bl	80006b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello FreeRTOS \n");
 80005a2:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <main+0x44>)
 80005a4:	f003 f980 	bl	80038a8 <puts>
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 128);
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <main+0x48>)
 80005aa:	1d3c      	adds	r4, r7, #4
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fd0f 	bl	8001fe2 <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <main+0x4c>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ca:	f001 fd03 	bl	8001fd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0x3e>
 80005d2:	bf00      	nop
 80005d4:	08004094 	.word	0x08004094
 80005d8:	080040b0 	.word	0x080040b0
 80005dc:	20000328 	.word	0x20000328

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fa3a 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a26      	ldr	r2, [pc, #152]	@ (80006a8 <SystemClock_Config+0xc8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a20      	ldr	r2, [pc, #128]	@ (80006ac <SystemClock_Config+0xcc>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fd73 	bl	8001150 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 f8ce 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2103      	movs	r1, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 ffd5 	bl	8001640 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800069c:	f000 f8b8 	bl	8000810 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	@ 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <MX_GPIO_Init+0xc8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000778 <MX_GPIO_Init+0xc8>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <MX_GPIO_Init+0xc8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <MX_GPIO_Init+0xc8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <MX_GPIO_Init+0xc8>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_GPIO_Init+0xc8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_GPIO_Init+0xc8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <MX_GPIO_Init+0xc8>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_GPIO_Init+0xc8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000720:	4816      	ldr	r0, [pc, #88]	@ (800077c <MX_GPIO_Init+0xcc>)
 8000722:	f000 fcc9 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000726:	2301      	movs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <MX_GPIO_Init+0xd0>)
 800073c:	f000 fb20 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000740:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074a:	2302      	movs	r3, #2
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4808      	ldr	r0, [pc, #32]	@ (800077c <MX_GPIO_Init+0xcc>)
 800075a:	f000 fb11 	bl	8000d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2106      	movs	r1, #6
 8000762:	2006      	movs	r0, #6
 8000764:	f000 fae2 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000768:	2006      	movs	r0, #6
 800076a:	f000 fafb 	bl	8000d64 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40020c00 	.word	0x40020c00
 8000780:	40020000 	.word	0x40020000

08000784 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN_SET == (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)))
 800078e:	2101      	movs	r1, #1
 8000790:	4807      	ldr	r0, [pc, #28]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000792:	f000 fc79 	bl	8001088 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d105      	bne.n	80007a8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		vTaskNotifyGiveFromISR(mainTaskHandle, pdFALSE);
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0x30>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fa28 	bl	8002bf8 <vTaskNotifyGiveFromISR>
	}
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020000 	.word	0x40020000
 80007b4:	20000328 	.word	0x20000328

080007b8 <StartMainTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartMainTask(void const * argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifyValue;

	for(;;)
	{
		ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	2001      	movs	r0, #1
 80007c6:	f002 f9cb 	bl	8002b60 <ulTaskNotifyTake>
 80007ca:	60f8      	str	r0, [r7, #12]
		if(ulNotifyValue != 0)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f6      	beq.n	80007c0 <StartMainTask+0x8>
		{
			printf("Hello from Main task \n");
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <StartMainTask+0x2c>)
 80007d4:	f003 f868 	bl	80038a8 <puts>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007dc:	4802      	ldr	r0, [pc, #8]	@ (80007e8 <StartMainTask+0x30>)
 80007de:	f000 fc84 	bl	80010ea <HAL_GPIO_TogglePin>
		ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 80007e2:	e7ed      	b.n	80007c0 <StartMainTask+0x8>
 80007e4:	080040cc 	.word	0x080040cc
 80007e8:	40020c00 	.word	0x40020c00

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f000 f9bd 	bl	8000b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40014800 	.word	0x40014800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <HAL_MspInit+0x54>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000830:	6453      	str	r3, [r2, #68]	@ 0x44
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <HAL_MspInit+0x54>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fa63 	bl	8000d2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	@ 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <HAL_InitTick+0xd0>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088c:	4a2d      	ldr	r2, [pc, #180]	@ (8000944 <HAL_InitTick+0xd0>)
 800088e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000892:	6453      	str	r3, [r2, #68]	@ 0x44
 8000894:	4b2b      	ldr	r3, [pc, #172]	@ (8000944 <HAL_InitTick+0xd0>)
 8000896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f8d4 	bl	8001a58 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008b0:	f001 f8be 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80008b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b8:	4a23      	ldr	r2, [pc, #140]	@ (8000948 <HAL_InitTick+0xd4>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0c9b      	lsrs	r3, r3, #18
 80008c0:	3b01      	subs	r3, #1
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80008c4:	4b21      	ldr	r3, [pc, #132]	@ (800094c <HAL_InitTick+0xd8>)
 80008c6:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <HAL_InitTick+0xdc>)
 80008c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80008ca:	4b20      	ldr	r3, [pc, #128]	@ (800094c <HAL_InitTick+0xd8>)
 80008cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80008d2:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <HAL_InitTick+0xd8>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_InitTick+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <HAL_InitTick+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_InitTick+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80008ea:	4818      	ldr	r0, [pc, #96]	@ (800094c <HAL_InitTick+0xd8>)
 80008ec:	f001 f8e6 	bl	8001abc <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d11b      	bne.n	8000936 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80008fe:	4813      	ldr	r0, [pc, #76]	@ (800094c <HAL_InitTick+0xd8>)
 8000900:	f001 f936 	bl	8001b70 <HAL_TIM_Base_Start_IT>
 8000904:	4603      	mov	r3, r0
 8000906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800090a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090e:	2b00      	cmp	r3, #0
 8000910:	d111      	bne.n	8000936 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000912:	201a      	movs	r0, #26
 8000914:	f000 fa26 	bl	8000d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b0f      	cmp	r3, #15
 800091c:	d808      	bhi.n	8000930 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800091e:	2200      	movs	r2, #0
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	201a      	movs	r0, #26
 8000924:	f000 fa02 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <HAL_InitTick+0xe0>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	e002      	b.n	8000936 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800093a:	4618      	mov	r0, r3
 800093c:	3730      	adds	r7, #48	@ 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	431bde83 	.word	0x431bde83
 800094c:	2000032c 	.word	0x2000032c
 8000950:	40014800 	.word	0x40014800
 8000954:	20000004 	.word	0x20000004

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fbc4 	bl	8001120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009a2:	f001 f947 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000032c 	.word	0x2000032c

080009b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009c2:	f3af 8000 	nop.w
 80009c6:	4601      	mov	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
  }

  return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
  return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f003 f894 	bl	8003bb0 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20020000 	.word	0x20020000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000374 	.word	0x20000374
 8000abc:	20004220 	.word	0x20004220

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 f853 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd3b 	bl	8000590 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b28:	08004114 	.word	0x08004114
  ldr r2, =_sbss
 8000b2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b30:	2000421c 	.word	0x2000421c

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f8d8 	bl	8000d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2005      	movs	r0, #5
 8000b68:	f7ff fe84 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe56 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000378 	.word	0x20000378

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000378 	.word	0x20000378

08000bbc <__NVIC_SetPriorityGrouping>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	@ (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff4c 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3e:	f7ff ff61 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	6978      	ldr	r0, [r7, #20]
 8000d4a:	f7ff ffb1 	bl	8000cb0 <NVIC_EncodePriority>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff80 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff54 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e159      	b.n	8001050 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8148 	bne.w	800104a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d005      	beq.n	8000dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a2 	beq.w	800104a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b57      	ldr	r3, [pc, #348]	@ (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a56      	ldr	r2, [pc, #344]	@ (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b54      	ldr	r3, [pc, #336]	@ (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a52      	ldr	r2, [pc, #328]	@ (800106c <HAL_GPIO_Init+0x2ec>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a49      	ldr	r2, [pc, #292]	@ (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d019      	beq.n	8000f82 <HAL_GPIO_Init+0x202>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a48      	ldr	r2, [pc, #288]	@ (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0x1fe>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a47      	ldr	r2, [pc, #284]	@ (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00d      	beq.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a46      	ldr	r2, [pc, #280]	@ (800107c <HAL_GPIO_Init+0x2fc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a45      	ldr	r2, [pc, #276]	@ (8001080 <HAL_GPIO_Init+0x300>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_GPIO_Init+0x1f2>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f72:	2307      	movs	r3, #7
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4935      	ldr	r1, [pc, #212]	@ (800106c <HAL_GPIO_Init+0x2ec>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa2:	4b38      	ldr	r3, [pc, #224]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff0:	4a24      	ldr	r2, [pc, #144]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101a:	4a1a      	ldr	r2, [pc, #104]	@ (8001084 <HAL_GPIO_Init+0x304>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001044:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <HAL_GPIO_Init+0x304>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f aea2 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40013800 	.word	0x40013800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	40020800 	.word	0x40020800
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40021000 	.word	0x40021000
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e001      	b.n	80010aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fc:	887a      	ldrh	r2, [r7, #2]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43d9      	mvns	r1, r3
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	400b      	ands	r3, r1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fb20 	bl	8000784 <HAL_GPIO_EXTI_Callback>
  }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e267      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d075      	beq.n	800125a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116e:	4b88      	ldr	r3, [pc, #544]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d00c      	beq.n	8001194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b85      	ldr	r3, [pc, #532]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001182:	2b08      	cmp	r3, #8
 8001184:	d112      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001186:	4b82      	ldr	r3, [pc, #520]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800118e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001192:	d10b      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4b7e      	ldr	r3, [pc, #504]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d05b      	beq.n	8001258 <HAL_RCC_OscConfig+0x108>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d157      	bne.n	8001258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e242      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x74>
 80011b6:	4b76      	ldr	r3, [pc, #472]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a75      	ldr	r2, [pc, #468]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x98>
 80011ce:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6d      	ldr	r3, [pc, #436]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6c      	ldr	r2, [pc, #432]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011e8:	4b69      	ldr	r3, [pc, #420]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a68      	ldr	r2, [pc, #416]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b66      	ldr	r3, [pc, #408]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a65      	ldr	r2, [pc, #404]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fccc 	bl	8000ba4 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fcc8 	bl	8000ba4 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e207      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xc0>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcb8 	bl	8000ba4 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcb4 	bl	8000ba4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	@ 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1f3      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b51      	ldr	r3, [pc, #324]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0xe8>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001266:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127e:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c7      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4937      	ldr	r1, [pc, #220]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <HAL_RCC_OscConfig+0x244>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff fc6d 	bl	8000ba4 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc69 	bl	8000ba4 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a8      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4925      	ldr	r1, [pc, #148]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <HAL_RCC_OscConfig+0x244>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc4c 	bl	8000ba4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fc48 	bl	8000ba4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e187      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d036      	beq.n	80013a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d016      	beq.n	8001370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_RCC_OscConfig+0x248>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fc2c 	bl	8000ba4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fc28 	bl	8000ba4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e167      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_OscConfig+0x248>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff fc15 	bl	8000ba4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	e00e      	b.n	800139c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fc11 	bl	8000ba4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d907      	bls.n	800139c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e150      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 8001390:	40023800 	.word	0x40023800
 8001394:	42470000 	.word	0x42470000
 8001398:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b88      	ldr	r3, [pc, #544]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ea      	bne.n	800137e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8097 	beq.w	80014e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b7d      	ldr	r3, [pc, #500]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a7c      	ldr	r2, [pc, #496]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b7a      	ldr	r3, [pc, #488]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b77      	ldr	r3, [pc, #476]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b74      	ldr	r3, [pc, #464]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a73      	ldr	r2, [pc, #460]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fbd1 	bl	8000ba4 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fbcd 	bl	8000ba4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e10c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b6a      	ldr	r3, [pc, #424]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x2ea>
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001430:	4a63      	ldr	r2, [pc, #396]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x30c>
 8001442:	4b5f      	ldr	r3, [pc, #380]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001446:	4a5e      	ldr	r2, [pc, #376]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	@ 0x70
 800144e:	4b5c      	ldr	r3, [pc, #368]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001452:	4a5b      	ldr	r2, [pc, #364]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6713      	str	r3, [r2, #112]	@ 0x70
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800145c:	4b58      	ldr	r3, [pc, #352]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	@ 0x70
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146c:	4a54      	ldr	r2, [pc, #336]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d015      	beq.n	80014a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fb92 	bl	8000ba4 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fb8e 	bl	8000ba4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0cb      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b49      	ldr	r3, [pc, #292]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ee      	beq.n	8001484 <HAL_RCC_OscConfig+0x334>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fb7c 	bl	8000ba4 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb78 	bl	8000ba4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0b5      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	4b3e      	ldr	r3, [pc, #248]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ee      	bne.n	80014b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a38      	ldr	r2, [pc, #224]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a1 	beq.w	8001630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ee:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d05c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d141      	bne.n	8001586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb4c 	bl	8000ba4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb48 	bl	8000ba4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e087      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	491b      	ldr	r1, [pc, #108]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_RCC_OscConfig+0x478>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb21 	bl	8000ba4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb1d 	bl	8000ba4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e05c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x416>
 8001584:	e054      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb0a 	bl	8000ba4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb06 	bl	8000ba4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e045      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x444>
 80015b2:	e03d      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e038      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x4ec>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d028      	beq.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d121      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d111      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b68      	ldr	r3, [pc, #416]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d90c      	bls.n	800167c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d044      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e067      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4934      	ldr	r1, [pc, #208]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff fa38 	bl	8000ba4 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff fa34 	bl	8000ba4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f844 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	080040ec 	.word	0x080040ec
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001810:	b094      	sub	sp, #80	@ 0x50
 8001812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
 8001818:	2300      	movs	r3, #0
 800181a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800181c:	2300      	movs	r3, #0
 800181e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001824:	4b79      	ldr	r3, [pc, #484]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d00d      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001830:	2b08      	cmp	r3, #8
 8001832:	f200 80e1 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x3a>
 800183e:	e0db      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b73      	ldr	r3, [pc, #460]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001844:	e0db      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800184a:	e0d8      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001854:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001856:	4b6d      	ldr	r3, [pc, #436]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001862:	4b6a      	ldr	r3, [pc, #424]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	2200      	movs	r2, #0
 800186a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800186c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001874:	633b      	str	r3, [r7, #48]	@ 0x30
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	@ 0x34
 800187a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800187e:	4622      	mov	r2, r4
 8001880:	462b      	mov	r3, r5
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4621      	mov	r1, r4
 8001898:	1a51      	subs	r1, r2, r1
 800189a:	6139      	str	r1, [r7, #16]
 800189c:	4629      	mov	r1, r5
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b0:	4659      	mov	r1, fp
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4651      	mov	r1, sl
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4651      	mov	r1, sl
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4651      	mov	r1, sl
 80018c0:	ebb2 0801 	subs.w	r8, r2, r1
 80018c4:	4659      	mov	r1, fp
 80018c6:	eb63 0901 	sbc.w	r9, r3, r1
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018de:	4690      	mov	r8, r2
 80018e0:	4699      	mov	r9, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	eb18 0303 	adds.w	r3, r8, r3
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	462b      	mov	r3, r5
 80018ec:	eb49 0303 	adc.w	r3, r9, r3
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018fe:	4629      	mov	r1, r5
 8001900:	024b      	lsls	r3, r1, #9
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001908:	4621      	mov	r1, r4
 800190a:	024a      	lsls	r2, r1, #9
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800191c:	f7fe fc60 	bl	80001e0 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001928:	e058      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	2200      	movs	r2, #0
 8001932:	4618      	mov	r0, r3
 8001934:	4611      	mov	r1, r2
 8001936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001944:	4642      	mov	r2, r8
 8001946:	464b      	mov	r3, r9
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0159      	lsls	r1, r3, #5
 8001952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001956:	0150      	lsls	r0, r2, #5
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4641      	mov	r1, r8
 800195e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001962:	4649      	mov	r1, r9
 8001964:	eb63 0b01 	sbc.w	fp, r3, r1
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800197c:	ebb2 040a 	subs.w	r4, r2, sl
 8001980:	eb63 050b 	sbc.w	r5, r3, fp
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	00eb      	lsls	r3, r5, #3
 800198e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001992:	00e2      	lsls	r2, r4, #3
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	4643      	mov	r3, r8
 800199a:	18e3      	adds	r3, r4, r3
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	464b      	mov	r3, r9
 80019a0:	eb45 0303 	adc.w	r3, r5, r3
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	61fa      	str	r2, [r7, #28]
 80019cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d0:	f7fe fc06 	bl	80001e0 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80019ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3750      	adds	r7, #80	@ 0x50
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0b5b      	lsrs	r3, r3, #13
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	080040fc 	.word	0x080040fc

08001a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	220f      	movs	r2, #15
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <HAL_RCC_GetClockConfig+0x60>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0207 	and.w	r2, r3, #7
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40023c00 	.word	0x40023c00

08001abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f839 	bl	8001b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 f9b2 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d001      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e044      	b.n	8001c12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb2:	d013      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	@ (8001c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	@ (8001c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d010      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfe:	e007      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40014000 	.word	0x40014000

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8d2 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8c4 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8d5 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8ac 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f89e 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8af 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f886 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f878 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f889 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f860 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f852 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f863 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0201 	mvn.w	r2, #1
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd26 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8e6 	bl	8001f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f834 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b8 	bl	8001f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3a      	ldr	r2, [pc, #232]	@ (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00f      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e82:	d00b      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <TIM_Base_SetConfig+0x100>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a36      	ldr	r2, [pc, #216]	@ (8001f68 <TIM_Base_SetConfig+0x104>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a35      	ldr	r2, [pc, #212]	@ (8001f6c <TIM_Base_SetConfig+0x108>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebc:	d017      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a28      	ldr	r2, [pc, #160]	@ (8001f64 <TIM_Base_SetConfig+0x100>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <TIM_Base_SetConfig+0x104>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <TIM_Base_SetConfig+0x108>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	@ (8001f70 <TIM_Base_SetConfig+0x10c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <TIM_Base_SetConfig+0x110>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a23      	ldr	r2, [pc, #140]	@ (8001f78 <TIM_Base_SetConfig+0x114>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	@ (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d103      	bne.n	8001f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f023 0201 	bic.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	40014000 	.word	0x40014000
 8001f74:	40014400 	.word	0x40014400
 8001f78:	40014800 	.word	0x40014800

08001f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	2b84      	cmp	r3, #132	@ 0x84
 8001fb8:	d005      	beq.n	8001fc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001fd8:	f000 fab2 	bl	8002540 <vTaskStartScheduler>
  
  return osOK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe4:	b089      	sub	sp, #36	@ 0x24
 8001fe6:	af04      	add	r7, sp, #16
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <osThreadCreate+0x54>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685c      	ldr	r4, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691e      	ldr	r6, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ffc8 	bl	8001fa4 <makeFreeRtosPriority>
 8002014:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800201e:	9202      	str	r2, [sp, #8]
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9100      	str	r1, [sp, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4632      	mov	r2, r6
 8002028:	4629      	mov	r1, r5
 800202a:	4620      	mov	r0, r4
 800202c:	f000 f8d9 	bl	80021e2 <xTaskCreateStatic>
 8002030:	4603      	mov	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e01c      	b.n	8002070 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685c      	ldr	r4, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002042:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ffaa 	bl	8001fa4 <makeFreeRtosPriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	9200      	str	r2, [sp, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4632      	mov	r2, r6
 800205e:	4629      	mov	r1, r5
 8002060:	4620      	mov	r0, r4
 8002062:	f000 f91e 	bl	80022a2 <xTaskCreate>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	d001      	beq.n	8002070 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002070:	68fb      	ldr	r3, [r7, #12]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800207a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 0208 	add.w	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0208 	add.w	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d103      	bne.n	800213c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e00c      	b.n	8002156 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3308      	adds	r3, #8
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e002      	b.n	800214a <vListInsert+0x2e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	429a      	cmp	r2, r3
 8002154:	d2f6      	bcs.n	8002144 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6852      	ldr	r2, [r2, #4]
 80021ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d103      	bne.n	80021c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08e      	sub	sp, #56	@ 0x38
 80021e6:	af04      	add	r7, sp, #16
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	e7fd      	b.n	800220a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	61fb      	str	r3, [r7, #28]
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800222c:	23a0      	movs	r3, #160	@ 0xa0
 800222e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2ba0      	cmp	r3, #160	@ 0xa0
 8002234:	d00b      	beq.n	800224e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	61bb      	str	r3, [r7, #24]
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	e7fd      	b.n	800224a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800224e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01e      	beq.n	8002294 <xTaskCreateStatic+0xb2>
 8002256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	2202      	movs	r2, #2
 800226a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800226e:	2300      	movs	r3, #0
 8002270:	9303      	str	r3, [sp, #12]
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f850 	bl	800232c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800228c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800228e:	f000 f8ed 	bl	800246c <prvAddNewTaskToReadyList>
 8002292:	e001      	b.n	8002298 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002298:	697b      	ldr	r3, [r7, #20]
	}
 800229a:	4618      	mov	r0, r3
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08c      	sub	sp, #48	@ 0x30
 80022a6:	af04      	add	r7, sp, #16
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fff0 	bl	800329c <pvPortMalloc>
 80022bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022c4:	20a0      	movs	r0, #160	@ 0xa0
 80022c6:	f000 ffe9 	bl	800329c <pvPortMalloc>
 80022ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d8:	e005      	b.n	80022e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f001 f8ac 	bl	8003438 <vPortFree>
 80022e0:	e001      	b.n	80022e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9303      	str	r3, [sp, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f80e 	bl	800232c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002310:	69f8      	ldr	r0, [r7, #28]
 8002312:	f000 f8ab 	bl	800246c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002316:	2301      	movs	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e002      	b.n	8002322 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002322:	69bb      	ldr	r3, [r7, #24]
	}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002344:	3b01      	subs	r3, #1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f023 0307 	bic.w	r3, r3, #7
 8002352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800235e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	617b      	str	r3, [r7, #20]
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	e7fd      	b.n	8002372 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01f      	beq.n	80023bc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	e012      	b.n	80023a8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	7819      	ldrb	r1, [r3, #0]
 800238a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	3334      	adds	r3, #52	@ 0x34
 8002392:	460a      	mov	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	d9e9      	bls.n	8002382 <prvInitialiseNewTask+0x56>
 80023ae:	e000      	b.n	80023b2 <prvInitialiseNewTask+0x86>
			{
				break;
 80023b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023ba:	e003      	b.n	80023c4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d901      	bls.n	80023ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023ca:	2306      	movs	r3, #6
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	2200      	movs	r2, #0
 80023de:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e2:	3304      	adds	r3, #4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe68 	bl	80020ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	3318      	adds	r3, #24
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe63 	bl	80020ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	f1c3 0207 	rsb	r2, r3, #7
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	2200      	movs	r2, #0
 800240e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	2200      	movs	r2, #0
 8002416:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	334c      	adds	r3, #76	@ 0x4c
 800241e:	224c      	movs	r2, #76	@ 0x4c
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fb20 	bl	8003a68 <memset>
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	4a0d      	ldr	r2, [pc, #52]	@ (8002460 <prvInitialiseNewTask+0x134>)
 800242c:	651a      	str	r2, [r3, #80]	@ 0x50
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	4a0c      	ldr	r2, [pc, #48]	@ (8002464 <prvInitialiseNewTask+0x138>)
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <prvInitialiseNewTask+0x13c>)
 8002438:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	69b8      	ldr	r0, [r7, #24]
 8002440:	f000 fcd6 	bl	8002df0 <pxPortInitialiseStack>
 8002444:	4602      	mov	r2, r0
 8002446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200040d0 	.word	0x200040d0
 8002464:	20004138 	.word	0x20004138
 8002468:	200041a0 	.word	0x200041a0

0800246c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002474:	f000 fdf0 	bl	8003058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002478:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <prvAddNewTaskToReadyList+0xb8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a29      	ldr	r2, [pc, #164]	@ (8002524 <prvAddNewTaskToReadyList+0xb8>)
 8002480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002482:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <prvAddNewTaskToReadyList+0xb8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d110      	bne.n	80024ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002498:	f000 fa9e 	bl	80029d8 <prvInitialiseTaskLists>
 800249c:	e00d      	b.n	80024ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <prvAddNewTaskToReadyList+0xc0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d802      	bhi.n	80024ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80024b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <prvAddNewTaskToReadyList+0xc4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002530 <prvAddNewTaskToReadyList+0xc4>)
 80024c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <prvAddNewTaskToReadyList+0xc8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <prvAddNewTaskToReadyList+0xc8>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <prvAddNewTaskToReadyList+0xcc>)
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4610      	mov	r0, r2
 80024ee:	f7ff fdf1 	bl	80020d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024f2:	f000 fde3 	bl	80030bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <prvAddNewTaskToReadyList+0xc0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <prvAddNewTaskToReadyList+0xbc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	429a      	cmp	r2, r3
 800250a:	d207      	bcs.n	800251c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <prvAddNewTaskToReadyList+0xd0>)
 800250e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000047c 	.word	0x2000047c
 8002528:	2000037c 	.word	0x2000037c
 800252c:	20000488 	.word	0x20000488
 8002530:	20000498 	.word	0x20000498
 8002534:	20000484 	.word	0x20000484
 8002538:	20000380 	.word	0x20000380
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	@ 0x28
 8002544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800254e:	463a      	mov	r2, r7
 8002550:	1d39      	adds	r1, r7, #4
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd ffba 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	9202      	str	r2, [sp, #8]
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2300      	movs	r3, #0
 800256c:	460a      	mov	r2, r1
 800256e:	4921      	ldr	r1, [pc, #132]	@ (80025f4 <vTaskStartScheduler+0xb4>)
 8002570:	4821      	ldr	r0, [pc, #132]	@ (80025f8 <vTaskStartScheduler+0xb8>)
 8002572:	f7ff fe36 	bl	80021e2 <xTaskCreateStatic>
 8002576:	4603      	mov	r3, r0
 8002578:	4a20      	ldr	r2, [pc, #128]	@ (80025fc <vTaskStartScheduler+0xbc>)
 800257a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800257c:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <vTaskStartScheduler+0xbc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002584:	2301      	movs	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e001      	b.n	800258e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d11b      	bne.n	80025cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	613b      	str	r3, [r7, #16]
}
 80025a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80025a8:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <vTaskStartScheduler+0xc0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	334c      	adds	r3, #76	@ 0x4c
 80025ae:	4a15      	ldr	r2, [pc, #84]	@ (8002604 <vTaskStartScheduler+0xc4>)
 80025b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <vTaskStartScheduler+0xc8>)
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025ba:	4b14      	ldr	r3, [pc, #80]	@ (800260c <vTaskStartScheduler+0xcc>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <vTaskStartScheduler+0xd0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025c6:	f000 fca3 	bl	8002f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025ca:	e00f      	b.n	80025ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d10b      	bne.n	80025ec <vTaskStartScheduler+0xac>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	60fb      	str	r3, [r7, #12]
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <vTaskStartScheduler+0xa8>
}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	080040e4 	.word	0x080040e4
 80025f8:	080029a9 	.word	0x080029a9
 80025fc:	200004a0 	.word	0x200004a0
 8002600:	2000037c 	.word	0x2000037c
 8002604:	2000001c 	.word	0x2000001c
 8002608:	2000049c 	.word	0x2000049c
 800260c:	20000488 	.word	0x20000488
 8002610:	20000480 	.word	0x20000480

08002614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <vTaskSuspendAll+0x18>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a03      	ldr	r2, [pc, #12]	@ (800262c <vTaskSuspendAll+0x18>)
 8002620:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	200004a4 	.word	0x200004a4

08002630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800263e:	4b42      	ldr	r3, [pc, #264]	@ (8002748 <xTaskResumeAll+0x118>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <xTaskResumeAll+0x2e>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	603b      	str	r3, [r7, #0]
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800265e:	f000 fcfb 	bl	8003058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <xTaskResumeAll+0x118>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	4a37      	ldr	r2, [pc, #220]	@ (8002748 <xTaskResumeAll+0x118>)
 800266a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800266c:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <xTaskResumeAll+0x118>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d161      	bne.n	8002738 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002674:	4b35      	ldr	r3, [pc, #212]	@ (800274c <xTaskResumeAll+0x11c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05d      	beq.n	8002738 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800267c:	e02e      	b.n	80026dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800267e:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <xTaskResumeAll+0x120>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3318      	adds	r3, #24
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fd7f 	bl	800218e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3304      	adds	r3, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fd7a 	bl	800218e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002754 <xTaskResumeAll+0x124>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <xTaskResumeAll+0x124>)
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4a27      	ldr	r2, [pc, #156]	@ (8002758 <xTaskResumeAll+0x128>)
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3304      	adds	r3, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7ff fd06 	bl	80020d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026cc:	4b23      	ldr	r3, [pc, #140]	@ (800275c <xTaskResumeAll+0x12c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <xTaskResumeAll+0x130>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <xTaskResumeAll+0x120>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1cc      	bne.n	800267e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026ea:	f000 fa19 	bl	8002b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <xTaskResumeAll+0x134>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026fa:	f000 f837 	bl	800276c <xTaskIncrementTick>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002704:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <xTaskResumeAll+0x130>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3b01      	subs	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f1      	bne.n	80026fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002716:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <xTaskResumeAll+0x134>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800271c:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <xTaskResumeAll+0x130>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002724:	2301      	movs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <xTaskResumeAll+0x138>)
 800272a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002738:	f000 fcc0 	bl	80030bc <vPortExitCritical>

	return xAlreadyYielded;
 800273c:	68bb      	ldr	r3, [r7, #8]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200004a4 	.word	0x200004a4
 800274c:	2000047c 	.word	0x2000047c
 8002750:	2000043c 	.word	0x2000043c
 8002754:	20000484 	.word	0x20000484
 8002758:	20000380 	.word	0x20000380
 800275c:	2000037c 	.word	0x2000037c
 8002760:	20000490 	.word	0x20000490
 8002764:	2000048c 	.word	0x2000048c
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002776:	4b4f      	ldr	r3, [pc, #316]	@ (80028b4 <xTaskIncrementTick+0x148>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 808f 	bne.w	800289e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002780:	4b4d      	ldr	r3, [pc, #308]	@ (80028b8 <xTaskIncrementTick+0x14c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002788:	4a4b      	ldr	r2, [pc, #300]	@ (80028b8 <xTaskIncrementTick+0x14c>)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d121      	bne.n	80027d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002794:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <xTaskIncrementTick+0x150>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	603b      	str	r3, [r7, #0]
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <xTaskIncrementTick+0x46>
 80027b6:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <xTaskIncrementTick+0x150>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <xTaskIncrementTick+0x154>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3e      	ldr	r2, [pc, #248]	@ (80028bc <xTaskIncrementTick+0x150>)
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4a3e      	ldr	r2, [pc, #248]	@ (80028c0 <xTaskIncrementTick+0x154>)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <xTaskIncrementTick+0x158>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	4a3c      	ldr	r2, [pc, #240]	@ (80028c4 <xTaskIncrementTick+0x158>)
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	f000 f9a4 	bl	8002b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027d8:	4b3b      	ldr	r3, [pc, #236]	@ (80028c8 <xTaskIncrementTick+0x15c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d348      	bcc.n	8002874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e2:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <xTaskIncrementTick+0x150>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ec:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <xTaskIncrementTick+0x15c>)
 80027ee:	f04f 32ff 	mov.w	r2, #4294967295
 80027f2:	601a      	str	r2, [r3, #0]
					break;
 80027f4:	e03e      	b.n	8002874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027f6:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <xTaskIncrementTick+0x150>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d203      	bcs.n	8002816 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800280e:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <xTaskIncrementTick+0x15c>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002814:	e02e      	b.n	8002874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3304      	adds	r3, #4
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fcb7 	bl	800218e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3318      	adds	r3, #24
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fcae 	bl	800218e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002836:	2201      	movs	r2, #1
 8002838:	409a      	lsls	r2, r3
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <xTaskIncrementTick+0x160>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	4a22      	ldr	r2, [pc, #136]	@ (80028cc <xTaskIncrementTick+0x160>)
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4a1f      	ldr	r2, [pc, #124]	@ (80028d0 <xTaskIncrementTick+0x164>)
 8002852:	441a      	add	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7ff fc3a 	bl	80020d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <xTaskIncrementTick+0x168>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	429a      	cmp	r2, r3
 800286c:	d3b9      	bcc.n	80027e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800286e:	2301      	movs	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002872:	e7b6      	b.n	80027e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002874:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <xTaskIncrementTick+0x168>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287a:	4915      	ldr	r1, [pc, #84]	@ (80028d0 <xTaskIncrementTick+0x164>)
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d901      	bls.n	8002890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <xTaskIncrementTick+0x16c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002898:	2301      	movs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e004      	b.n	80028a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800289e:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <xTaskIncrementTick+0x170>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a0d      	ldr	r2, [pc, #52]	@ (80028dc <xTaskIncrementTick+0x170>)
 80028a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028a8:	697b      	ldr	r3, [r7, #20]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200004a4 	.word	0x200004a4
 80028b8:	20000480 	.word	0x20000480
 80028bc:	20000434 	.word	0x20000434
 80028c0:	20000438 	.word	0x20000438
 80028c4:	20000494 	.word	0x20000494
 80028c8:	2000049c 	.word	0x2000049c
 80028cc:	20000484 	.word	0x20000484
 80028d0:	20000380 	.word	0x20000380
 80028d4:	2000037c 	.word	0x2000037c
 80028d8:	20000490 	.word	0x20000490
 80028dc:	2000048c 	.word	0x2000048c

080028e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <vTaskSwitchContext+0xb0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028ee:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <vTaskSwitchContext+0xb4>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028f4:	e045      	b.n	8002982 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80028f6:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <vTaskSwitchContext+0xb4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028fc:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <vTaskSwitchContext+0xb8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800290a:	7afb      	ldrb	r3, [r7, #11]
 800290c:	f1c3 031f 	rsb	r3, r3, #31
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	4922      	ldr	r1, [pc, #136]	@ (800299c <vTaskSwitchContext+0xbc>)
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	607b      	str	r3, [r7, #4]
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	e7fd      	b.n	800293a <vTaskSwitchContext+0x5a>
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <vTaskSwitchContext+0xbc>)
 800294a:	4413      	add	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3308      	adds	r3, #8
 8002960:	429a      	cmp	r2, r3
 8002962:	d104      	bne.n	800296e <vTaskSwitchContext+0x8e>
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <vTaskSwitchContext+0xc0>)
 8002976:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <vTaskSwitchContext+0xc0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	334c      	adds	r3, #76	@ 0x4c
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <vTaskSwitchContext+0xc4>)
 8002980:	6013      	str	r3, [r2, #0]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200004a4 	.word	0x200004a4
 8002994:	20000490 	.word	0x20000490
 8002998:	20000484 	.word	0x20000484
 800299c:	20000380 	.word	0x20000380
 80029a0:	2000037c 	.word	0x2000037c
 80029a4:	2000001c 	.word	0x2000001c

080029a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029b0:	f000 f852 	bl	8002a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <prvIdleTask+0x28>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d9f9      	bls.n	80029b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <prvIdleTask+0x2c>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80029cc:	e7f0      	b.n	80029b0 <prvIdleTask+0x8>
 80029ce:	bf00      	nop
 80029d0:	20000380 	.word	0x20000380
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	e00c      	b.n	80029fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4a12      	ldr	r2, [pc, #72]	@ (8002a38 <prvInitialiseTaskLists+0x60>)
 80029f0:	4413      	add	r3, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fb41 	bl	800207a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d9ef      	bls.n	80029e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a04:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <prvInitialiseTaskLists+0x64>)
 8002a06:	f7ff fb38 	bl	800207a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a0a:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <prvInitialiseTaskLists+0x68>)
 8002a0c:	f7ff fb35 	bl	800207a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a10:	480c      	ldr	r0, [pc, #48]	@ (8002a44 <prvInitialiseTaskLists+0x6c>)
 8002a12:	f7ff fb32 	bl	800207a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a16:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <prvInitialiseTaskLists+0x70>)
 8002a18:	f7ff fb2f 	bl	800207a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a1c:	480b      	ldr	r0, [pc, #44]	@ (8002a4c <prvInitialiseTaskLists+0x74>)
 8002a1e:	f7ff fb2c 	bl	800207a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <prvInitialiseTaskLists+0x78>)
 8002a24:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <prvInitialiseTaskLists+0x64>)
 8002a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <prvInitialiseTaskLists+0x7c>)
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <prvInitialiseTaskLists+0x68>)
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000380 	.word	0x20000380
 8002a3c:	2000040c 	.word	0x2000040c
 8002a40:	20000420 	.word	0x20000420
 8002a44:	2000043c 	.word	0x2000043c
 8002a48:	20000450 	.word	0x20000450
 8002a4c:	20000468 	.word	0x20000468
 8002a50:	20000434 	.word	0x20000434
 8002a54:	20000438 	.word	0x20000438

08002a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a5e:	e019      	b.n	8002a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a60:	f000 fafa 	bl	8003058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <prvCheckTasksWaitingTermination+0x50>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fb8c 	bl	800218e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <prvCheckTasksWaitingTermination+0x54>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <prvCheckTasksWaitingTermination+0x54>)
 8002a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <prvCheckTasksWaitingTermination+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <prvCheckTasksWaitingTermination+0x58>)
 8002a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a8a:	f000 fb17 	bl	80030bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f810 	bl	8002ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <prvCheckTasksWaitingTermination+0x58>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e1      	bne.n	8002a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000450 	.word	0x20000450
 8002aac:	2000047c 	.word	0x2000047c
 8002ab0:	20000464 	.word	0x20000464

08002ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	334c      	adds	r3, #76	@ 0x4c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 ffe9 	bl	8003a98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fcaf 	bl	8003438 <vPortFree>
				vPortFree( pxTCB );
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fcac 	bl	8003438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002ae0:	e019      	b.n	8002b16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d103      	bne.n	8002af4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fca3 	bl	8003438 <vPortFree>
	}
 8002af2:	e010      	b.n	8002b16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d00b      	beq.n	8002b16 <prvDeleteTCB+0x62>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	60fb      	str	r3, [r7, #12]
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <prvDeleteTCB+0x5e>
	}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <prvResetNextTaskUnblockTime+0x38>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <prvResetNextTaskUnblockTime+0x3c>)
 8002b32:	f04f 32ff 	mov.w	r2, #4294967295
 8002b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b38:	e008      	b.n	8002b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3a:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <prvResetNextTaskUnblockTime+0x38>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <prvResetNextTaskUnblockTime+0x3c>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	20000434 	.word	0x20000434
 8002b5c:	2000049c 	.word	0x2000049c

08002b60 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8002b6a:	f000 fa75 	bl	8003058 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <ulTaskNotifyTake+0x90>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d113      	bne.n	8002ba2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <ulTaskNotifyTake+0x90>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f000 f8c9 	bl	8002d24 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <ulTaskNotifyTake+0x94>)
 8002b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002ba2:	f000 fa8b 	bl	80030bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8002ba6:	f000 fa57 	bl	8003058 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <ulTaskNotifyTake+0x90>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bb2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <ulTaskNotifyTake+0x90>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002bca:	e005      	b.n	8002bd8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8002bcc:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <ulTaskNotifyTake+0x90>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <ulTaskNotifyTake+0x90>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8002be2:	f000 fa6b 	bl	80030bc <vPortExitCritical>

		return ulReturn;
 8002be6:	68fb      	ldr	r3, [r7, #12]
	}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	2000037c 	.word	0x2000037c
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	61bb      	str	r3, [r7, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c20:	f000 fafa 	bl	8003218 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c28:	f3ef 8211 	mrs	r2, BASEPRI
 8002c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	617a      	str	r2, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c40:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c42:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8002c4a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002c62:	7ffb      	ldrb	r3, [r7, #31]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d146      	bne.n	8002cf6 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	60fb      	str	r3, [r7, #12]
}
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <vTaskNotifyGiveFromISR+0x114>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11c      	bne.n	8002cca <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	3304      	adds	r3, #4
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fa7a 	bl	800218e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <vTaskNotifyGiveFromISR+0x118>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <vTaskNotifyGiveFromISR+0x118>)
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4a16      	ldr	r2, [pc, #88]	@ (8002d14 <vTaskNotifyGiveFromISR+0x11c>)
 8002cba:	441a      	add	r2, r3
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f7ff fa06 	bl	80020d4 <vListInsertEnd>
 8002cc8:	e005      	b.n	8002cd6 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	3318      	adds	r3, #24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4811      	ldr	r0, [pc, #68]	@ (8002d18 <vTaskNotifyGiveFromISR+0x120>)
 8002cd2:	f7ff f9ff 	bl	80020d4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cda:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <vTaskNotifyGiveFromISR+0x124>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d908      	bls.n	8002cf6 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <vTaskNotifyGiveFromISR+0x128>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d00:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8002d02:	bf00      	nop
 8002d04:	3728      	adds	r7, #40	@ 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200004a4 	.word	0x200004a4
 8002d10:	20000484 	.word	0x20000484
 8002d14:	20000380 	.word	0x20000380
 8002d18:	2000043c 	.word	0x2000043c
 8002d1c:	2000037c 	.word	0x2000037c
 8002d20:	20000490 	.word	0x20000490

08002d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d2e:	4b29      	ldr	r3, [pc, #164]	@ (8002dd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d34:	4b28      	ldr	r3, [pc, #160]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fa27 	bl	800218e <uxListRemove>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d10a      	bne.n	8002d7c <prvAddCurrentTaskToDelayedList+0x58>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3304      	adds	r3, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	481a      	ldr	r0, [pc, #104]	@ (8002de0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d76:	f7ff f9ad 	bl	80020d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d7a:	e026      	b.n	8002dca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d84:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d209      	bcs.n	8002da8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7ff f9bb 	bl	800211c <vListInsert>
}
 8002da6:	e010      	b.n	8002dca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7ff f9b1 	bl	800211c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d202      	bcs.n	8002dca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002dc4:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6013      	str	r3, [r2, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000480 	.word	0x20000480
 8002dd8:	2000037c 	.word	0x2000037c
 8002ddc:	20000484 	.word	0x20000484
 8002de0:	20000468 	.word	0x20000468
 8002de4:	20000438 	.word	0x20000438
 8002de8:	20000434 	.word	0x20000434
 8002dec:	2000049c 	.word	0x2000049c

08002df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b04      	subs	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b04      	subs	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e20:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <pxPortInitialiseStack+0x64>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b14      	subs	r3, #20
 8002e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b04      	subs	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f06f 0202 	mvn.w	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b20      	subs	r3, #32
 8002e44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	08002e59 	.word	0x08002e59

08002e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e62:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <prvTaskExitError+0x58>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d00b      	beq.n	8002e84 <prvTaskExitError+0x2c>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	60fb      	str	r3, [r7, #12]
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <prvTaskExitError+0x28>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	60bb      	str	r3, [r7, #8]
}
 8002e96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e98:	bf00      	nop
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0fc      	beq.n	8002e9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	2000000c 	.word	0x2000000c
	...

08002ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ec0:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <pxCurrentTCBConst2>)
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6808      	ldr	r0, [r1, #0]
 8002ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	f380 8809 	msr	PSP, r0
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f380 8811 	msr	BASEPRI, r0
 8002eda:	4770      	bx	lr
 8002edc:	f3af 8000 	nop.w

08002ee0 <pxCurrentTCBConst2>:
 8002ee0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop

08002ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ee8:	4808      	ldr	r0, [pc, #32]	@ (8002f0c <prvPortStartFirstTask+0x24>)
 8002eea:	6800      	ldr	r0, [r0, #0]
 8002eec:	6800      	ldr	r0, [r0, #0]
 8002eee:	f380 8808 	msr	MSP, r0
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f380 8814 	msr	CONTROL, r0
 8002efa:	b662      	cpsie	i
 8002efc:	b661      	cpsie	f
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	df00      	svc	0
 8002f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f0a:	bf00      	nop
 8002f0c:	e000ed08 	.word	0xe000ed08

08002f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f16:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <xPortStartScheduler+0x124>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a47      	ldr	r2, [pc, #284]	@ (8003038 <xPortStartScheduler+0x128>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10b      	bne.n	8002f38 <xPortStartScheduler+0x28>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f38:	4b3e      	ldr	r3, [pc, #248]	@ (8003034 <xPortStartScheduler+0x124>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800303c <xPortStartScheduler+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10b      	bne.n	8002f5a <xPortStartScheduler+0x4a>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60fb      	str	r3, [r7, #12]
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f5a:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <xPortStartScheduler+0x130>)
 8002f5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	22ff      	movs	r2, #255	@ 0xff
 8002f6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <xPortStartScheduler+0x134>)
 8002f80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <xPortStartScheduler+0x138>)
 8002f84:	2207      	movs	r2, #7
 8002f86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f88:	e009      	b.n	8002f9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003048 <xPortStartScheduler+0x138>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	4a2d      	ldr	r2, [pc, #180]	@ (8003048 <xPortStartScheduler+0x138>)
 8002f92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa6:	2b80      	cmp	r3, #128	@ 0x80
 8002fa8:	d0ef      	beq.n	8002f8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002faa:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00b      	beq.n	8002fce <xPortStartScheduler+0xbe>
	__asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60bb      	str	r3, [r7, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	e7fd      	b.n	8002fca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fe0:	4a19      	ldr	r2, [pc, #100]	@ (8003048 <xPortStartScheduler+0x138>)
 8002fe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002fec:	4b17      	ldr	r3, [pc, #92]	@ (800304c <xPortStartScheduler+0x13c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a16      	ldr	r2, [pc, #88]	@ (800304c <xPortStartScheduler+0x13c>)
 8002ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <xPortStartScheduler+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	@ (800304c <xPortStartScheduler+0x13c>)
 8002ffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003004:	f000 f8da 	bl	80031bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <xPortStartScheduler+0x140>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800300e:	f000 f8f9 	bl	8003204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <xPortStartScheduler+0x144>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <xPortStartScheduler+0x144>)
 8003018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800301c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800301e:	f7ff ff63 	bl	8002ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003022:	f7ff fc5d 	bl	80028e0 <vTaskSwitchContext>
	prvTaskExitError();
 8003026:	f7ff ff17 	bl	8002e58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed00 	.word	0xe000ed00
 8003038:	410fc271 	.word	0x410fc271
 800303c:	410fc270 	.word	0x410fc270
 8003040:	e000e400 	.word	0xe000e400
 8003044:	200004a8 	.word	0x200004a8
 8003048:	200004ac 	.word	0x200004ac
 800304c:	e000ed20 	.word	0xe000ed20
 8003050:	2000000c 	.word	0x2000000c
 8003054:	e000ef34 	.word	0xe000ef34

08003058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	607b      	str	r3, [r7, #4]
}
 8003070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <vPortEnterCritical+0x5c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a0e      	ldr	r2, [pc, #56]	@ (80030b4 <vPortEnterCritical+0x5c>)
 800307a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800307c:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <vPortEnterCritical+0x5c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d110      	bne.n	80030a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <vPortEnterCritical+0x60>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	603b      	str	r3, [r7, #0]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <vPortEnterCritical+0x4a>
	}
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <vPortExitCritical+0x50>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <vPortExitCritical+0x26>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	607b      	str	r3, [r7, #4]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <vPortExitCritical+0x50>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <vPortExitCritical+0x50>)
 80030ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <vPortExitCritical+0x50>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <vPortExitCritical+0x44>
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f383 8811 	msr	BASEPRI, r3
}
 80030fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	2000000c 	.word	0x2000000c

08003110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003110:	f3ef 8009 	mrs	r0, PSP
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <pxCurrentTCBConst>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f01e 0f10 	tst.w	lr, #16
 8003120:	bf08      	it	eq
 8003122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003134:	f380 8811 	msr	BASEPRI, r0
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f7ff fbce 	bl	80028e0 <vTaskSwitchContext>
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f380 8811 	msr	BASEPRI, r0
 800314c:	bc09      	pop	{r0, r3}
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	6808      	ldr	r0, [r1, #0]
 8003152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003156:	f01e 0f10 	tst.w	lr, #16
 800315a:	bf08      	it	eq
 800315c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003160:	f380 8809 	msr	PSP, r0
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w

08003170 <pxCurrentTCBConst>:
 8003170:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
}
 8003190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003192:	f7ff faeb 	bl	800276c <xTaskIncrementTick>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800319c:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <SysTick_Handler+0x40>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f383 8811 	msr	BASEPRI, r3
}
 80031ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <vPortSetupTimerInterrupt+0x38>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <vPortSetupTimerInterrupt+0x3c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <vPortSetupTimerInterrupt+0x40>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <vPortSetupTimerInterrupt+0x44>)
 80031da:	3b01      	subs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031de:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010
 80031f4:	e000e018 	.word	0xe000e018
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3
 8003200:	e000e014 	.word	0xe000e014

08003204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003214 <vPortEnableVFP+0x10>
 8003208:	6801      	ldr	r1, [r0, #0]
 800320a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800320e:	6001      	str	r1, [r0, #0]
 8003210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003212:	bf00      	nop
 8003214:	e000ed88 	.word	0xe000ed88

08003218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800321e:	f3ef 8305 	mrs	r3, IPSR
 8003222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	d915      	bls.n	8003256 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800322a:	4a18      	ldr	r2, [pc, #96]	@ (800328c <vPortValidateInterruptPriority+0x74>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003234:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <vPortValidateInterruptPriority+0x78>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	7afa      	ldrb	r2, [r7, #11]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20b      	bcs.n	8003256 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003256:	4b0f      	ldr	r3, [pc, #60]	@ (8003294 <vPortValidateInterruptPriority+0x7c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <vPortValidateInterruptPriority+0x80>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d90b      	bls.n	800327e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	603b      	str	r3, [r7, #0]
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	e7fd      	b.n	800327a <vPortValidateInterruptPriority+0x62>
	}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e3f0 	.word	0xe000e3f0
 8003290:	200004a8 	.word	0x200004a8
 8003294:	e000ed0c 	.word	0xe000ed0c
 8003298:	200004ac 	.word	0x200004ac

0800329c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	@ 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032a8:	f7ff f9b4 	bl	8002614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003420 <pvPortMalloc+0x184>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032b4:	f000 f924 	bl	8003500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003424 <pvPortMalloc+0x188>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 8095 	bne.w	80033f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01e      	beq.n	800330a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80032cc:	2208      	movs	r2, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f023 0307 	bic.w	r3, r3, #7
 80032e4:	3308      	adds	r3, #8
 80032e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <pvPortMalloc+0x6e>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	617b      	str	r3, [r7, #20]
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	e7fd      	b.n	8003306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d06f      	beq.n	80033f0 <pvPortMalloc+0x154>
 8003310:	4b45      	ldr	r3, [pc, #276]	@ (8003428 <pvPortMalloc+0x18c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d86a      	bhi.n	80033f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800331a:	4b44      	ldr	r3, [pc, #272]	@ (800342c <pvPortMalloc+0x190>)
 800331c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800331e:	4b43      	ldr	r3, [pc, #268]	@ (800342c <pvPortMalloc+0x190>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003324:	e004      	b.n	8003330 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d903      	bls.n	8003342 <pvPortMalloc+0xa6>
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f1      	bne.n	8003326 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003342:	4b37      	ldr	r3, [pc, #220]	@ (8003420 <pvPortMalloc+0x184>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003348:	429a      	cmp	r2, r3
 800334a:	d051      	beq.n	80033f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2208      	movs	r2, #8
 8003352:	4413      	add	r3, r2
 8003354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	2308      	movs	r3, #8
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	429a      	cmp	r2, r3
 800336c:	d920      	bls.n	80033b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800336e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <pvPortMalloc+0xfc>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	613b      	str	r3, [r7, #16]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033aa:	69b8      	ldr	r0, [r7, #24]
 80033ac:	f000 f90a 	bl	80035c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <pvPortMalloc+0x18c>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <pvPortMalloc+0x18c>)
 80033bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033be:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <pvPortMalloc+0x18c>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <pvPortMalloc+0x194>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d203      	bcs.n	80033d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033ca:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <pvPortMalloc+0x18c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <pvPortMalloc+0x194>)
 80033d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <pvPortMalloc+0x188>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	431a      	orrs	r2, r3
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80033e6:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <pvPortMalloc+0x198>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a11      	ldr	r2, [pc, #68]	@ (8003434 <pvPortMalloc+0x198>)
 80033ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80033f0:	f7ff f91e 	bl	8002630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <pvPortMalloc+0x17a>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	60fb      	str	r3, [r7, #12]
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	e7fd      	b.n	8003412 <pvPortMalloc+0x176>
	return pvReturn;
 8003416:	69fb      	ldr	r3, [r7, #28]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3728      	adds	r7, #40	@ 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200040b8 	.word	0x200040b8
 8003424:	200040cc 	.word	0x200040cc
 8003428:	200040bc 	.word	0x200040bc
 800342c:	200040b0 	.word	0x200040b0
 8003430:	200040c0 	.word	0x200040c0
 8003434:	200040c4 	.word	0x200040c4

08003438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d04f      	beq.n	80034ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800344a:	2308      	movs	r3, #8
 800344c:	425b      	negs	r3, r3
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4413      	add	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <vPortFree+0xbc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <vPortFree+0x46>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60fb      	str	r3, [r7, #12]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <vPortFree+0x66>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60bb      	str	r3, [r7, #8]
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	e7fd      	b.n	800349a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <vPortFree+0xbc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01e      	beq.n	80034ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11a      	bne.n	80034ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <vPortFree+0xbc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80034c4:	f7ff f8a6 	bl	8002614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <vPortFree+0xc0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	4a09      	ldr	r2, [pc, #36]	@ (80034f8 <vPortFree+0xc0>)
 80034d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034d6:	6938      	ldr	r0, [r7, #16]
 80034d8:	f000 f874 	bl	80035c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <vPortFree+0xc4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a06      	ldr	r2, [pc, #24]	@ (80034fc <vPortFree+0xc4>)
 80034e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80034e6:	f7ff f8a3 	bl	8002630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200040cc 	.word	0x200040cc
 80034f8:	200040bc 	.word	0x200040bc
 80034fc:	200040c8 	.word	0x200040c8

08003500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003506:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800350a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800350c:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <prvHeapInit+0xac>)
 800350e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3307      	adds	r3, #7
 800351e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0307 	bic.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <prvHeapInit+0xac>)
 8003530:	4413      	add	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003538:	4a1d      	ldr	r2, [pc, #116]	@ (80035b0 <prvHeapInit+0xb0>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800353e:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <prvHeapInit+0xb0>)
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4413      	add	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800354c:	2208      	movs	r2, #8
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a15      	ldr	r2, [pc, #84]	@ (80035b4 <prvHeapInit+0xb4>)
 8003560:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003562:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <prvHeapInit+0xb4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <prvHeapInit+0xb4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <prvHeapInit+0xb4>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <prvHeapInit+0xb8>)
 800358e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a09      	ldr	r2, [pc, #36]	@ (80035bc <prvHeapInit+0xbc>)
 8003596:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <prvHeapInit+0xc0>)
 800359a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	200004b0 	.word	0x200004b0
 80035b0:	200040b0 	.word	0x200040b0
 80035b4:	200040b8 	.word	0x200040b8
 80035b8:	200040c0 	.word	0x200040c0
 80035bc:	200040bc 	.word	0x200040bc
 80035c0:	200040cc 	.word	0x200040cc

080035c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035cc:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <prvInsertBlockIntoFreeList+0xac>)
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e002      	b.n	80035d8 <prvInsertBlockIntoFreeList+0x14>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d8f7      	bhi.n	80035d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4413      	add	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d108      	bne.n	8003606 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	441a      	add	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d118      	bne.n	800364c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <prvInsertBlockIntoFreeList+0xb0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d00d      	beq.n	8003642 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	441a      	add	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e008      	b.n	8003654 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003642:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <prvInsertBlockIntoFreeList+0xb0>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e003      	b.n	8003654 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d002      	beq.n	8003662 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	200040b0 	.word	0x200040b0
 8003674:	200040b8 	.word	0x200040b8

08003678 <std>:
 8003678:	2300      	movs	r3, #0
 800367a:	b510      	push	{r4, lr}
 800367c:	4604      	mov	r4, r0
 800367e:	e9c0 3300 	strd	r3, r3, [r0]
 8003682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003686:	6083      	str	r3, [r0, #8]
 8003688:	8181      	strh	r1, [r0, #12]
 800368a:	6643      	str	r3, [r0, #100]	@ 0x64
 800368c:	81c2      	strh	r2, [r0, #14]
 800368e:	6183      	str	r3, [r0, #24]
 8003690:	4619      	mov	r1, r3
 8003692:	2208      	movs	r2, #8
 8003694:	305c      	adds	r0, #92	@ 0x5c
 8003696:	f000 f9e7 	bl	8003a68 <memset>
 800369a:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <std+0x58>)
 800369c:	6263      	str	r3, [r4, #36]	@ 0x24
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <std+0x5c>)
 80036a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <std+0x60>)
 80036a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <std+0x64>)
 80036a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <std+0x68>)
 80036ac:	6224      	str	r4, [r4, #32]
 80036ae:	429c      	cmp	r4, r3
 80036b0:	d006      	beq.n	80036c0 <std+0x48>
 80036b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036b6:	4294      	cmp	r4, r2
 80036b8:	d002      	beq.n	80036c0 <std+0x48>
 80036ba:	33d0      	adds	r3, #208	@ 0xd0
 80036bc:	429c      	cmp	r4, r3
 80036be:	d105      	bne.n	80036cc <std+0x54>
 80036c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	f000 ba9c 	b.w	8003c04 <__retarget_lock_init_recursive>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	080038b9 	.word	0x080038b9
 80036d4:	080038db 	.word	0x080038db
 80036d8:	08003913 	.word	0x08003913
 80036dc:	08003937 	.word	0x08003937
 80036e0:	200040d0 	.word	0x200040d0

080036e4 <stdio_exit_handler>:
 80036e4:	4a02      	ldr	r2, [pc, #8]	@ (80036f0 <stdio_exit_handler+0xc>)
 80036e6:	4903      	ldr	r1, [pc, #12]	@ (80036f4 <stdio_exit_handler+0x10>)
 80036e8:	4803      	ldr	r0, [pc, #12]	@ (80036f8 <stdio_exit_handler+0x14>)
 80036ea:	f000 b869 	b.w	80037c0 <_fwalk_sglue>
 80036ee:	bf00      	nop
 80036f0:	20000010 	.word	0x20000010
 80036f4:	08003f05 	.word	0x08003f05
 80036f8:	20000020 	.word	0x20000020

080036fc <cleanup_stdio>:
 80036fc:	6841      	ldr	r1, [r0, #4]
 80036fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <cleanup_stdio+0x34>)
 8003700:	4299      	cmp	r1, r3
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	d001      	beq.n	800370c <cleanup_stdio+0x10>
 8003708:	f000 fbfc 	bl	8003f04 <_fflush_r>
 800370c:	68a1      	ldr	r1, [r4, #8]
 800370e:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <cleanup_stdio+0x38>)
 8003710:	4299      	cmp	r1, r3
 8003712:	d002      	beq.n	800371a <cleanup_stdio+0x1e>
 8003714:	4620      	mov	r0, r4
 8003716:	f000 fbf5 	bl	8003f04 <_fflush_r>
 800371a:	68e1      	ldr	r1, [r4, #12]
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <cleanup_stdio+0x3c>)
 800371e:	4299      	cmp	r1, r3
 8003720:	d004      	beq.n	800372c <cleanup_stdio+0x30>
 8003722:	4620      	mov	r0, r4
 8003724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003728:	f000 bbec 	b.w	8003f04 <_fflush_r>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	bf00      	nop
 8003730:	200040d0 	.word	0x200040d0
 8003734:	20004138 	.word	0x20004138
 8003738:	200041a0 	.word	0x200041a0

0800373c <global_stdio_init.part.0>:
 800373c:	b510      	push	{r4, lr}
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <global_stdio_init.part.0+0x30>)
 8003740:	4c0b      	ldr	r4, [pc, #44]	@ (8003770 <global_stdio_init.part.0+0x34>)
 8003742:	4a0c      	ldr	r2, [pc, #48]	@ (8003774 <global_stdio_init.part.0+0x38>)
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	4620      	mov	r0, r4
 8003748:	2200      	movs	r2, #0
 800374a:	2104      	movs	r1, #4
 800374c:	f7ff ff94 	bl	8003678 <std>
 8003750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003754:	2201      	movs	r2, #1
 8003756:	2109      	movs	r1, #9
 8003758:	f7ff ff8e 	bl	8003678 <std>
 800375c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003760:	2202      	movs	r2, #2
 8003762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003766:	2112      	movs	r1, #18
 8003768:	f7ff bf86 	b.w	8003678 <std>
 800376c:	20004208 	.word	0x20004208
 8003770:	200040d0 	.word	0x200040d0
 8003774:	080036e5 	.word	0x080036e5

08003778 <__sfp_lock_acquire>:
 8003778:	4801      	ldr	r0, [pc, #4]	@ (8003780 <__sfp_lock_acquire+0x8>)
 800377a:	f000 ba44 	b.w	8003c06 <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	20004211 	.word	0x20004211

08003784 <__sfp_lock_release>:
 8003784:	4801      	ldr	r0, [pc, #4]	@ (800378c <__sfp_lock_release+0x8>)
 8003786:	f000 ba3f 	b.w	8003c08 <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	20004211 	.word	0x20004211

08003790 <__sinit>:
 8003790:	b510      	push	{r4, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	f7ff fff0 	bl	8003778 <__sfp_lock_acquire>
 8003798:	6a23      	ldr	r3, [r4, #32]
 800379a:	b11b      	cbz	r3, 80037a4 <__sinit+0x14>
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a0:	f7ff bff0 	b.w	8003784 <__sfp_lock_release>
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <__sinit+0x28>)
 80037a6:	6223      	str	r3, [r4, #32]
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__sinit+0x2c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f5      	bne.n	800379c <__sinit+0xc>
 80037b0:	f7ff ffc4 	bl	800373c <global_stdio_init.part.0>
 80037b4:	e7f2      	b.n	800379c <__sinit+0xc>
 80037b6:	bf00      	nop
 80037b8:	080036fd 	.word	0x080036fd
 80037bc:	20004208 	.word	0x20004208

080037c0 <_fwalk_sglue>:
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c4:	4607      	mov	r7, r0
 80037c6:	4688      	mov	r8, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	2600      	movs	r6, #0
 80037cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037d0:	f1b9 0901 	subs.w	r9, r9, #1
 80037d4:	d505      	bpl.n	80037e2 <_fwalk_sglue+0x22>
 80037d6:	6824      	ldr	r4, [r4, #0]
 80037d8:	2c00      	cmp	r4, #0
 80037da:	d1f7      	bne.n	80037cc <_fwalk_sglue+0xc>
 80037dc:	4630      	mov	r0, r6
 80037de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e2:	89ab      	ldrh	r3, [r5, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d907      	bls.n	80037f8 <_fwalk_sglue+0x38>
 80037e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ec:	3301      	adds	r3, #1
 80037ee:	d003      	beq.n	80037f8 <_fwalk_sglue+0x38>
 80037f0:	4629      	mov	r1, r5
 80037f2:	4638      	mov	r0, r7
 80037f4:	47c0      	blx	r8
 80037f6:	4306      	orrs	r6, r0
 80037f8:	3568      	adds	r5, #104	@ 0x68
 80037fa:	e7e9      	b.n	80037d0 <_fwalk_sglue+0x10>

080037fc <_puts_r>:
 80037fc:	6a03      	ldr	r3, [r0, #32]
 80037fe:	b570      	push	{r4, r5, r6, lr}
 8003800:	6884      	ldr	r4, [r0, #8]
 8003802:	4605      	mov	r5, r0
 8003804:	460e      	mov	r6, r1
 8003806:	b90b      	cbnz	r3, 800380c <_puts_r+0x10>
 8003808:	f7ff ffc2 	bl	8003790 <__sinit>
 800380c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800380e:	07db      	lsls	r3, r3, #31
 8003810:	d405      	bmi.n	800381e <_puts_r+0x22>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	0598      	lsls	r0, r3, #22
 8003816:	d402      	bmi.n	800381e <_puts_r+0x22>
 8003818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800381a:	f000 f9f4 	bl	8003c06 <__retarget_lock_acquire_recursive>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	0719      	lsls	r1, r3, #28
 8003822:	d502      	bpl.n	800382a <_puts_r+0x2e>
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d135      	bne.n	8003896 <_puts_r+0x9a>
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f8c5 	bl	80039bc <__swsetup_r>
 8003832:	b380      	cbz	r0, 8003896 <_puts_r+0x9a>
 8003834:	f04f 35ff 	mov.w	r5, #4294967295
 8003838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800383a:	07da      	lsls	r2, r3, #31
 800383c:	d405      	bmi.n	800384a <_puts_r+0x4e>
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	059b      	lsls	r3, r3, #22
 8003842:	d402      	bmi.n	800384a <_puts_r+0x4e>
 8003844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003846:	f000 f9df 	bl	8003c08 <__retarget_lock_release_recursive>
 800384a:	4628      	mov	r0, r5
 800384c:	bd70      	pop	{r4, r5, r6, pc}
 800384e:	2b00      	cmp	r3, #0
 8003850:	da04      	bge.n	800385c <_puts_r+0x60>
 8003852:	69a2      	ldr	r2, [r4, #24]
 8003854:	429a      	cmp	r2, r3
 8003856:	dc17      	bgt.n	8003888 <_puts_r+0x8c>
 8003858:	290a      	cmp	r1, #10
 800385a:	d015      	beq.n	8003888 <_puts_r+0x8c>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	6022      	str	r2, [r4, #0]
 8003862:	7019      	strb	r1, [r3, #0]
 8003864:	68a3      	ldr	r3, [r4, #8]
 8003866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800386a:	3b01      	subs	r3, #1
 800386c:	60a3      	str	r3, [r4, #8]
 800386e:	2900      	cmp	r1, #0
 8003870:	d1ed      	bne.n	800384e <_puts_r+0x52>
 8003872:	2b00      	cmp	r3, #0
 8003874:	da11      	bge.n	800389a <_puts_r+0x9e>
 8003876:	4622      	mov	r2, r4
 8003878:	210a      	movs	r1, #10
 800387a:	4628      	mov	r0, r5
 800387c:	f000 f85f 	bl	800393e <__swbuf_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d0d7      	beq.n	8003834 <_puts_r+0x38>
 8003884:	250a      	movs	r5, #10
 8003886:	e7d7      	b.n	8003838 <_puts_r+0x3c>
 8003888:	4622      	mov	r2, r4
 800388a:	4628      	mov	r0, r5
 800388c:	f000 f857 	bl	800393e <__swbuf_r>
 8003890:	3001      	adds	r0, #1
 8003892:	d1e7      	bne.n	8003864 <_puts_r+0x68>
 8003894:	e7ce      	b.n	8003834 <_puts_r+0x38>
 8003896:	3e01      	subs	r6, #1
 8003898:	e7e4      	b.n	8003864 <_puts_r+0x68>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	6022      	str	r2, [r4, #0]
 80038a0:	220a      	movs	r2, #10
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e7ee      	b.n	8003884 <_puts_r+0x88>
	...

080038a8 <puts>:
 80038a8:	4b02      	ldr	r3, [pc, #8]	@ (80038b4 <puts+0xc>)
 80038aa:	4601      	mov	r1, r0
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f7ff bfa5 	b.w	80037fc <_puts_r>
 80038b2:	bf00      	nop
 80038b4:	2000001c 	.word	0x2000001c

080038b8 <__sread>:
 80038b8:	b510      	push	{r4, lr}
 80038ba:	460c      	mov	r4, r1
 80038bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c0:	f000 f952 	bl	8003b68 <_read_r>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	bfab      	itete	ge
 80038c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038ca:	89a3      	ldrhlt	r3, [r4, #12]
 80038cc:	181b      	addge	r3, r3, r0
 80038ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038d2:	bfac      	ite	ge
 80038d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038d6:	81a3      	strhlt	r3, [r4, #12]
 80038d8:	bd10      	pop	{r4, pc}

080038da <__swrite>:
 80038da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038de:	461f      	mov	r7, r3
 80038e0:	898b      	ldrh	r3, [r1, #12]
 80038e2:	05db      	lsls	r3, r3, #23
 80038e4:	4605      	mov	r5, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	4616      	mov	r6, r2
 80038ea:	d505      	bpl.n	80038f8 <__swrite+0x1e>
 80038ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f0:	2302      	movs	r3, #2
 80038f2:	2200      	movs	r2, #0
 80038f4:	f000 f926 	bl	8003b44 <_lseek_r>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	4632      	mov	r2, r6
 8003906:	463b      	mov	r3, r7
 8003908:	4628      	mov	r0, r5
 800390a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800390e:	f000 b93d 	b.w	8003b8c <_write_r>

08003912 <__sseek>:
 8003912:	b510      	push	{r4, lr}
 8003914:	460c      	mov	r4, r1
 8003916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391a:	f000 f913 	bl	8003b44 <_lseek_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	bf15      	itete	ne
 8003924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800392a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800392e:	81a3      	strheq	r3, [r4, #12]
 8003930:	bf18      	it	ne
 8003932:	81a3      	strhne	r3, [r4, #12]
 8003934:	bd10      	pop	{r4, pc}

08003936 <__sclose>:
 8003936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800393a:	f000 b89d 	b.w	8003a78 <_close_r>

0800393e <__swbuf_r>:
 800393e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003940:	460e      	mov	r6, r1
 8003942:	4614      	mov	r4, r2
 8003944:	4605      	mov	r5, r0
 8003946:	b118      	cbz	r0, 8003950 <__swbuf_r+0x12>
 8003948:	6a03      	ldr	r3, [r0, #32]
 800394a:	b90b      	cbnz	r3, 8003950 <__swbuf_r+0x12>
 800394c:	f7ff ff20 	bl	8003790 <__sinit>
 8003950:	69a3      	ldr	r3, [r4, #24]
 8003952:	60a3      	str	r3, [r4, #8]
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	071a      	lsls	r2, r3, #28
 8003958:	d501      	bpl.n	800395e <__swbuf_r+0x20>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	b943      	cbnz	r3, 8003970 <__swbuf_r+0x32>
 800395e:	4621      	mov	r1, r4
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f82b 	bl	80039bc <__swsetup_r>
 8003966:	b118      	cbz	r0, 8003970 <__swbuf_r+0x32>
 8003968:	f04f 37ff 	mov.w	r7, #4294967295
 800396c:	4638      	mov	r0, r7
 800396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	6922      	ldr	r2, [r4, #16]
 8003974:	1a98      	subs	r0, r3, r2
 8003976:	6963      	ldr	r3, [r4, #20]
 8003978:	b2f6      	uxtb	r6, r6
 800397a:	4283      	cmp	r3, r0
 800397c:	4637      	mov	r7, r6
 800397e:	dc05      	bgt.n	800398c <__swbuf_r+0x4e>
 8003980:	4621      	mov	r1, r4
 8003982:	4628      	mov	r0, r5
 8003984:	f000 fabe 	bl	8003f04 <_fflush_r>
 8003988:	2800      	cmp	r0, #0
 800398a:	d1ed      	bne.n	8003968 <__swbuf_r+0x2a>
 800398c:	68a3      	ldr	r3, [r4, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	60a3      	str	r3, [r4, #8]
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	6022      	str	r2, [r4, #0]
 8003998:	701e      	strb	r6, [r3, #0]
 800399a:	6962      	ldr	r2, [r4, #20]
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	429a      	cmp	r2, r3
 80039a0:	d004      	beq.n	80039ac <__swbuf_r+0x6e>
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	07db      	lsls	r3, r3, #31
 80039a6:	d5e1      	bpl.n	800396c <__swbuf_r+0x2e>
 80039a8:	2e0a      	cmp	r6, #10
 80039aa:	d1df      	bne.n	800396c <__swbuf_r+0x2e>
 80039ac:	4621      	mov	r1, r4
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 faa8 	bl	8003f04 <_fflush_r>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d0d9      	beq.n	800396c <__swbuf_r+0x2e>
 80039b8:	e7d6      	b.n	8003968 <__swbuf_r+0x2a>
	...

080039bc <__swsetup_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	4b29      	ldr	r3, [pc, #164]	@ (8003a64 <__swsetup_r+0xa8>)
 80039c0:	4605      	mov	r5, r0
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	460c      	mov	r4, r1
 80039c6:	b118      	cbz	r0, 80039d0 <__swsetup_r+0x14>
 80039c8:	6a03      	ldr	r3, [r0, #32]
 80039ca:	b90b      	cbnz	r3, 80039d0 <__swsetup_r+0x14>
 80039cc:	f7ff fee0 	bl	8003790 <__sinit>
 80039d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d4:	0719      	lsls	r1, r3, #28
 80039d6:	d422      	bmi.n	8003a1e <__swsetup_r+0x62>
 80039d8:	06da      	lsls	r2, r3, #27
 80039da:	d407      	bmi.n	80039ec <__swsetup_r+0x30>
 80039dc:	2209      	movs	r2, #9
 80039de:	602a      	str	r2, [r5, #0]
 80039e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039e4:	81a3      	strh	r3, [r4, #12]
 80039e6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ea:	e033      	b.n	8003a54 <__swsetup_r+0x98>
 80039ec:	0758      	lsls	r0, r3, #29
 80039ee:	d512      	bpl.n	8003a16 <__swsetup_r+0x5a>
 80039f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039f2:	b141      	cbz	r1, 8003a06 <__swsetup_r+0x4a>
 80039f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039f8:	4299      	cmp	r1, r3
 80039fa:	d002      	beq.n	8003a02 <__swsetup_r+0x46>
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f905 	bl	8003c0c <_free_r>
 8003a02:	2300      	movs	r3, #0
 8003a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	6063      	str	r3, [r4, #4]
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	b94b      	cbnz	r3, 8003a36 <__swsetup_r+0x7a>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2c:	d003      	beq.n	8003a36 <__swsetup_r+0x7a>
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 fab5 	bl	8003fa0 <__smakebuf_r>
 8003a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a3a:	f013 0201 	ands.w	r2, r3, #1
 8003a3e:	d00a      	beq.n	8003a56 <__swsetup_r+0x9a>
 8003a40:	2200      	movs	r2, #0
 8003a42:	60a2      	str	r2, [r4, #8]
 8003a44:	6962      	ldr	r2, [r4, #20]
 8003a46:	4252      	negs	r2, r2
 8003a48:	61a2      	str	r2, [r4, #24]
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	b942      	cbnz	r2, 8003a60 <__swsetup_r+0xa4>
 8003a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a52:	d1c5      	bne.n	80039e0 <__swsetup_r+0x24>
 8003a54:	bd38      	pop	{r3, r4, r5, pc}
 8003a56:	0799      	lsls	r1, r3, #30
 8003a58:	bf58      	it	pl
 8003a5a:	6962      	ldrpl	r2, [r4, #20]
 8003a5c:	60a2      	str	r2, [r4, #8]
 8003a5e:	e7f4      	b.n	8003a4a <__swsetup_r+0x8e>
 8003a60:	2000      	movs	r0, #0
 8003a62:	e7f7      	b.n	8003a54 <__swsetup_r+0x98>
 8003a64:	2000001c 	.word	0x2000001c

08003a68 <memset>:
 8003a68:	4402      	add	r2, r0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <_close_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d06      	ldr	r5, [pc, #24]	@ (8003a94 <_close_r+0x1c>)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7fc ffb1 	bl	80009ea <_close>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_close_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_close_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	2000420c 	.word	0x2000420c

08003a98 <_reclaim_reent>:
 8003a98:	4b29      	ldr	r3, [pc, #164]	@ (8003b40 <_reclaim_reent+0xa8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4283      	cmp	r3, r0
 8003a9e:	b570      	push	{r4, r5, r6, lr}
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	d04b      	beq.n	8003b3c <_reclaim_reent+0xa4>
 8003aa4:	69c3      	ldr	r3, [r0, #28]
 8003aa6:	b1ab      	cbz	r3, 8003ad4 <_reclaim_reent+0x3c>
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	b16b      	cbz	r3, 8003ac8 <_reclaim_reent+0x30>
 8003aac:	2500      	movs	r5, #0
 8003aae:	69e3      	ldr	r3, [r4, #28]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	5959      	ldr	r1, [r3, r5]
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d13b      	bne.n	8003b30 <_reclaim_reent+0x98>
 8003ab8:	3504      	adds	r5, #4
 8003aba:	2d80      	cmp	r5, #128	@ 0x80
 8003abc:	d1f7      	bne.n	8003aae <_reclaim_reent+0x16>
 8003abe:	69e3      	ldr	r3, [r4, #28]
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	68d9      	ldr	r1, [r3, #12]
 8003ac4:	f000 f8a2 	bl	8003c0c <_free_r>
 8003ac8:	69e3      	ldr	r3, [r4, #28]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	b111      	cbz	r1, 8003ad4 <_reclaim_reent+0x3c>
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 f89c 	bl	8003c0c <_free_r>
 8003ad4:	6961      	ldr	r1, [r4, #20]
 8003ad6:	b111      	cbz	r1, 8003ade <_reclaim_reent+0x46>
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 f897 	bl	8003c0c <_free_r>
 8003ade:	69e1      	ldr	r1, [r4, #28]
 8003ae0:	b111      	cbz	r1, 8003ae8 <_reclaim_reent+0x50>
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 f892 	bl	8003c0c <_free_r>
 8003ae8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003aea:	b111      	cbz	r1, 8003af2 <_reclaim_reent+0x5a>
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 f88d 	bl	8003c0c <_free_r>
 8003af2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003af4:	b111      	cbz	r1, 8003afc <_reclaim_reent+0x64>
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 f888 	bl	8003c0c <_free_r>
 8003afc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003afe:	b111      	cbz	r1, 8003b06 <_reclaim_reent+0x6e>
 8003b00:	4620      	mov	r0, r4
 8003b02:	f000 f883 	bl	8003c0c <_free_r>
 8003b06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003b08:	b111      	cbz	r1, 8003b10 <_reclaim_reent+0x78>
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 f87e 	bl	8003c0c <_free_r>
 8003b10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003b12:	b111      	cbz	r1, 8003b1a <_reclaim_reent+0x82>
 8003b14:	4620      	mov	r0, r4
 8003b16:	f000 f879 	bl	8003c0c <_free_r>
 8003b1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003b1c:	b111      	cbz	r1, 8003b24 <_reclaim_reent+0x8c>
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 f874 	bl	8003c0c <_free_r>
 8003b24:	6a23      	ldr	r3, [r4, #32]
 8003b26:	b14b      	cbz	r3, 8003b3c <_reclaim_reent+0xa4>
 8003b28:	4620      	mov	r0, r4
 8003b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b2e:	4718      	bx	r3
 8003b30:	680e      	ldr	r6, [r1, #0]
 8003b32:	4620      	mov	r0, r4
 8003b34:	f000 f86a 	bl	8003c0c <_free_r>
 8003b38:	4631      	mov	r1, r6
 8003b3a:	e7bb      	b.n	8003ab4 <_reclaim_reent+0x1c>
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000001c 	.word	0x2000001c

08003b44 <_lseek_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	@ (8003b64 <_lseek_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fc ff70 	bl	8000a38 <_lseek>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_lseek_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_lseek_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	2000420c 	.word	0x2000420c

08003b68 <_read_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d07      	ldr	r5, [pc, #28]	@ (8003b88 <_read_r+0x20>)
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4608      	mov	r0, r1
 8003b70:	4611      	mov	r1, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	602a      	str	r2, [r5, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f7fc ff1a 	bl	80009b0 <_read>
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d102      	bne.n	8003b86 <_read_r+0x1e>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b103      	cbz	r3, 8003b86 <_read_r+0x1e>
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	bd38      	pop	{r3, r4, r5, pc}
 8003b88:	2000420c 	.word	0x2000420c

08003b8c <_write_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4d07      	ldr	r5, [pc, #28]	@ (8003bac <_write_r+0x20>)
 8003b90:	4604      	mov	r4, r0
 8003b92:	4608      	mov	r0, r1
 8003b94:	4611      	mov	r1, r2
 8003b96:	2200      	movs	r2, #0
 8003b98:	602a      	str	r2, [r5, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fc fcd9 	bl	8000552 <_write>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_write_r+0x1e>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_write_r+0x1e>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	2000420c 	.word	0x2000420c

08003bb0 <__errno>:
 8003bb0:	4b01      	ldr	r3, [pc, #4]	@ (8003bb8 <__errno+0x8>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000001c 	.word	0x2000001c

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8003bf4 <__libc_init_array+0x38>)
 8003bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf8 <__libc_init_array+0x3c>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8003bfc <__libc_init_array+0x40>)
 8003bce:	4c0c      	ldr	r4, [pc, #48]	@ (8003c00 <__libc_init_array+0x44>)
 8003bd0:	f000 fa54 	bl	800407c <_init>
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	2600      	movs	r6, #0
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	0800410c 	.word	0x0800410c
 8003bf8:	0800410c 	.word	0x0800410c
 8003bfc:	0800410c 	.word	0x0800410c
 8003c00:	08004110 	.word	0x08004110

08003c04 <__retarget_lock_init_recursive>:
 8003c04:	4770      	bx	lr

08003c06 <__retarget_lock_acquire_recursive>:
 8003c06:	4770      	bx	lr

08003c08 <__retarget_lock_release_recursive>:
 8003c08:	4770      	bx	lr
	...

08003c0c <_free_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4605      	mov	r5, r0
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d041      	beq.n	8003c98 <_free_r+0x8c>
 8003c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c18:	1f0c      	subs	r4, r1, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfb8      	it	lt
 8003c1e:	18e4      	addlt	r4, r4, r3
 8003c20:	f000 f8e0 	bl	8003de4 <__malloc_lock>
 8003c24:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <_free_r+0x90>)
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	b933      	cbnz	r3, 8003c38 <_free_r+0x2c>
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6014      	str	r4, [r2, #0]
 8003c2e:	4628      	mov	r0, r5
 8003c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c34:	f000 b8dc 	b.w	8003df0 <__malloc_unlock>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d908      	bls.n	8003c4e <_free_r+0x42>
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	1821      	adds	r1, r4, r0
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf01      	itttt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	1809      	addeq	r1, r1, r0
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	e7ed      	b.n	8003c2a <_free_r+0x1e>
 8003c4e:	461a      	mov	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b10b      	cbz	r3, 8003c58 <_free_r+0x4c>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x42>
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	1850      	adds	r0, r2, r1
 8003c5c:	42a0      	cmp	r0, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x6c>
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	4401      	add	r1, r0
 8003c64:	1850      	adds	r0, r2, r1
 8003c66:	4283      	cmp	r3, r0
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	d1e0      	bne.n	8003c2e <_free_r+0x22>
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	4408      	add	r0, r1
 8003c74:	6010      	str	r0, [r2, #0]
 8003c76:	e7da      	b.n	8003c2e <_free_r+0x22>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x74>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	e7d6      	b.n	8003c2e <_free_r+0x22>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	1821      	adds	r1, r4, r0
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1809      	addeq	r1, r1, r0
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6054      	str	r4, [r2, #4]
 8003c96:	e7ca      	b.n	8003c2e <_free_r+0x22>
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20004218 	.word	0x20004218

08003ca0 <sbrk_aligned>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8003ce0 <sbrk_aligned+0x40>)
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b911      	cbnz	r1, 8003cb2 <sbrk_aligned+0x12>
 8003cac:	f000 f9d6 	bl	800405c <_sbrk_r>
 8003cb0:	6030      	str	r0, [r6, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 f9d1 	bl	800405c <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d103      	bne.n	8003cc6 <sbrk_aligned+0x26>
 8003cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	1cc4      	adds	r4, r0, #3
 8003cc8:	f024 0403 	bic.w	r4, r4, #3
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d0f8      	beq.n	8003cc2 <sbrk_aligned+0x22>
 8003cd0:	1a21      	subs	r1, r4, r0
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 f9c2 	bl	800405c <_sbrk_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d1f2      	bne.n	8003cc2 <sbrk_aligned+0x22>
 8003cdc:	e7ef      	b.n	8003cbe <sbrk_aligned+0x1e>
 8003cde:	bf00      	nop
 8003ce0:	20004214 	.word	0x20004214

08003ce4 <_malloc_r>:
 8003ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	1ccd      	adds	r5, r1, #3
 8003cea:	f025 0503 	bic.w	r5, r5, #3
 8003cee:	3508      	adds	r5, #8
 8003cf0:	2d0c      	cmp	r5, #12
 8003cf2:	bf38      	it	cc
 8003cf4:	250c      	movcc	r5, #12
 8003cf6:	2d00      	cmp	r5, #0
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	db01      	blt.n	8003d00 <_malloc_r+0x1c>
 8003cfc:	42a9      	cmp	r1, r5
 8003cfe:	d904      	bls.n	8003d0a <_malloc_r+0x26>
 8003d00:	230c      	movs	r3, #12
 8003d02:	6033      	str	r3, [r6, #0]
 8003d04:	2000      	movs	r0, #0
 8003d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003de0 <_malloc_r+0xfc>
 8003d0e:	f000 f869 	bl	8003de4 <__malloc_lock>
 8003d12:	f8d8 3000 	ldr.w	r3, [r8]
 8003d16:	461c      	mov	r4, r3
 8003d18:	bb44      	cbnz	r4, 8003d6c <_malloc_r+0x88>
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff ffbf 	bl	8003ca0 <sbrk_aligned>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	4604      	mov	r4, r0
 8003d26:	d158      	bne.n	8003dda <_malloc_r+0xf6>
 8003d28:	f8d8 4000 	ldr.w	r4, [r8]
 8003d2c:	4627      	mov	r7, r4
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	d143      	bne.n	8003dba <_malloc_r+0xd6>
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	d04b      	beq.n	8003dce <_malloc_r+0xea>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	4639      	mov	r1, r7
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	eb04 0903 	add.w	r9, r4, r3
 8003d40:	f000 f98c 	bl	800405c <_sbrk_r>
 8003d44:	4581      	cmp	r9, r0
 8003d46:	d142      	bne.n	8003dce <_malloc_r+0xea>
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	1a6d      	subs	r5, r5, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f7ff ffa6 	bl	8003ca0 <sbrk_aligned>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d03a      	beq.n	8003dce <_malloc_r+0xea>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	442b      	add	r3, r5
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	bb62      	cbnz	r2, 8003dc0 <_malloc_r+0xdc>
 8003d66:	f8c8 7000 	str.w	r7, [r8]
 8003d6a:	e00f      	b.n	8003d8c <_malloc_r+0xa8>
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	1b52      	subs	r2, r2, r5
 8003d70:	d420      	bmi.n	8003db4 <_malloc_r+0xd0>
 8003d72:	2a0b      	cmp	r2, #11
 8003d74:	d917      	bls.n	8003da6 <_malloc_r+0xc2>
 8003d76:	1961      	adds	r1, r4, r5
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	6025      	str	r5, [r4, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	6059      	strne	r1, [r3, #4]
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	bf08      	it	eq
 8003d84:	f8c8 1000 	streq.w	r1, [r8]
 8003d88:	5162      	str	r2, [r4, r5]
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f82f 	bl	8003df0 <__malloc_unlock>
 8003d92:	f104 000b 	add.w	r0, r4, #11
 8003d96:	1d23      	adds	r3, r4, #4
 8003d98:	f020 0007 	bic.w	r0, r0, #7
 8003d9c:	1ac2      	subs	r2, r0, r3
 8003d9e:	bf1c      	itt	ne
 8003da0:	1a1b      	subne	r3, r3, r0
 8003da2:	50a3      	strne	r3, [r4, r2]
 8003da4:	e7af      	b.n	8003d06 <_malloc_r+0x22>
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	bf0c      	ite	eq
 8003dac:	f8c8 2000 	streq.w	r2, [r8]
 8003db0:	605a      	strne	r2, [r3, #4]
 8003db2:	e7eb      	b.n	8003d8c <_malloc_r+0xa8>
 8003db4:	4623      	mov	r3, r4
 8003db6:	6864      	ldr	r4, [r4, #4]
 8003db8:	e7ae      	b.n	8003d18 <_malloc_r+0x34>
 8003dba:	463c      	mov	r4, r7
 8003dbc:	687f      	ldr	r7, [r7, #4]
 8003dbe:	e7b6      	b.n	8003d2e <_malloc_r+0x4a>
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d1fb      	bne.n	8003dc0 <_malloc_r+0xdc>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6053      	str	r3, [r2, #4]
 8003dcc:	e7de      	b.n	8003d8c <_malloc_r+0xa8>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f000 f80c 	bl	8003df0 <__malloc_unlock>
 8003dd8:	e794      	b.n	8003d04 <_malloc_r+0x20>
 8003dda:	6005      	str	r5, [r0, #0]
 8003ddc:	e7d6      	b.n	8003d8c <_malloc_r+0xa8>
 8003dde:	bf00      	nop
 8003de0:	20004218 	.word	0x20004218

08003de4 <__malloc_lock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	@ (8003dec <__malloc_lock+0x8>)
 8003de6:	f7ff bf0e 	b.w	8003c06 <__retarget_lock_acquire_recursive>
 8003dea:	bf00      	nop
 8003dec:	20004210 	.word	0x20004210

08003df0 <__malloc_unlock>:
 8003df0:	4801      	ldr	r0, [pc, #4]	@ (8003df8 <__malloc_unlock+0x8>)
 8003df2:	f7ff bf09 	b.w	8003c08 <__retarget_lock_release_recursive>
 8003df6:	bf00      	nop
 8003df8:	20004210 	.word	0x20004210

08003dfc <__sflush_r>:
 8003dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e04:	0716      	lsls	r6, r2, #28
 8003e06:	4605      	mov	r5, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	d454      	bmi.n	8003eb6 <__sflush_r+0xba>
 8003e0c:	684b      	ldr	r3, [r1, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	dc02      	bgt.n	8003e18 <__sflush_r+0x1c>
 8003e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	dd48      	ble.n	8003eaa <__sflush_r+0xae>
 8003e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e1a:	2e00      	cmp	r6, #0
 8003e1c:	d045      	beq.n	8003eaa <__sflush_r+0xae>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e24:	682f      	ldr	r7, [r5, #0]
 8003e26:	6a21      	ldr	r1, [r4, #32]
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	d030      	beq.n	8003e8e <__sflush_r+0x92>
 8003e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	0759      	lsls	r1, r3, #29
 8003e32:	d505      	bpl.n	8003e40 <__sflush_r+0x44>
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e3a:	b10b      	cbz	r3, 8003e40 <__sflush_r+0x44>
 8003e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e3e:	1ad2      	subs	r2, r2, r3
 8003e40:	2300      	movs	r3, #0
 8003e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e44:	6a21      	ldr	r1, [r4, #32]
 8003e46:	4628      	mov	r0, r5
 8003e48:	47b0      	blx	r6
 8003e4a:	1c43      	adds	r3, r0, #1
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	d106      	bne.n	8003e5e <__sflush_r+0x62>
 8003e50:	6829      	ldr	r1, [r5, #0]
 8003e52:	291d      	cmp	r1, #29
 8003e54:	d82b      	bhi.n	8003eae <__sflush_r+0xb2>
 8003e56:	4a2a      	ldr	r2, [pc, #168]	@ (8003f00 <__sflush_r+0x104>)
 8003e58:	410a      	asrs	r2, r1
 8003e5a:	07d6      	lsls	r6, r2, #31
 8003e5c:	d427      	bmi.n	8003eae <__sflush_r+0xb2>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	6062      	str	r2, [r4, #4]
 8003e62:	04d9      	lsls	r1, r3, #19
 8003e64:	6922      	ldr	r2, [r4, #16]
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	d504      	bpl.n	8003e74 <__sflush_r+0x78>
 8003e6a:	1c42      	adds	r2, r0, #1
 8003e6c:	d101      	bne.n	8003e72 <__sflush_r+0x76>
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	b903      	cbnz	r3, 8003e74 <__sflush_r+0x78>
 8003e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e76:	602f      	str	r7, [r5, #0]
 8003e78:	b1b9      	cbz	r1, 8003eaa <__sflush_r+0xae>
 8003e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e7e:	4299      	cmp	r1, r3
 8003e80:	d002      	beq.n	8003e88 <__sflush_r+0x8c>
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7ff fec2 	bl	8003c0c <_free_r>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e8c:	e00d      	b.n	8003eaa <__sflush_r+0xae>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4628      	mov	r0, r5
 8003e92:	47b0      	blx	r6
 8003e94:	4602      	mov	r2, r0
 8003e96:	1c50      	adds	r0, r2, #1
 8003e98:	d1c9      	bne.n	8003e2e <__sflush_r+0x32>
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0c6      	beq.n	8003e2e <__sflush_r+0x32>
 8003ea0:	2b1d      	cmp	r3, #29
 8003ea2:	d001      	beq.n	8003ea8 <__sflush_r+0xac>
 8003ea4:	2b16      	cmp	r3, #22
 8003ea6:	d11e      	bne.n	8003ee6 <__sflush_r+0xea>
 8003ea8:	602f      	str	r7, [r5, #0]
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e022      	b.n	8003ef4 <__sflush_r+0xf8>
 8003eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	e01b      	b.n	8003eee <__sflush_r+0xf2>
 8003eb6:	690f      	ldr	r7, [r1, #16]
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	d0f6      	beq.n	8003eaa <__sflush_r+0xae>
 8003ebc:	0793      	lsls	r3, r2, #30
 8003ebe:	680e      	ldr	r6, [r1, #0]
 8003ec0:	bf08      	it	eq
 8003ec2:	694b      	ldreq	r3, [r1, #20]
 8003ec4:	600f      	str	r7, [r1, #0]
 8003ec6:	bf18      	it	ne
 8003ec8:	2300      	movne	r3, #0
 8003eca:	eba6 0807 	sub.w	r8, r6, r7
 8003ece:	608b      	str	r3, [r1, #8]
 8003ed0:	f1b8 0f00 	cmp.w	r8, #0
 8003ed4:	dde9      	ble.n	8003eaa <__sflush_r+0xae>
 8003ed6:	6a21      	ldr	r1, [r4, #32]
 8003ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003eda:	4643      	mov	r3, r8
 8003edc:	463a      	mov	r2, r7
 8003ede:	4628      	mov	r0, r5
 8003ee0:	47b0      	blx	r6
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	dc08      	bgt.n	8003ef8 <__sflush_r+0xfc>
 8003ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef8:	4407      	add	r7, r0
 8003efa:	eba8 0800 	sub.w	r8, r8, r0
 8003efe:	e7e7      	b.n	8003ed0 <__sflush_r+0xd4>
 8003f00:	dfbffffe 	.word	0xdfbffffe

08003f04 <_fflush_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	690b      	ldr	r3, [r1, #16]
 8003f08:	4605      	mov	r5, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	b913      	cbnz	r3, 8003f14 <_fflush_r+0x10>
 8003f0e:	2500      	movs	r5, #0
 8003f10:	4628      	mov	r0, r5
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	b118      	cbz	r0, 8003f1e <_fflush_r+0x1a>
 8003f16:	6a03      	ldr	r3, [r0, #32]
 8003f18:	b90b      	cbnz	r3, 8003f1e <_fflush_r+0x1a>
 8003f1a:	f7ff fc39 	bl	8003790 <__sinit>
 8003f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f3      	beq.n	8003f0e <_fflush_r+0xa>
 8003f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f28:	07d0      	lsls	r0, r2, #31
 8003f2a:	d404      	bmi.n	8003f36 <_fflush_r+0x32>
 8003f2c:	0599      	lsls	r1, r3, #22
 8003f2e:	d402      	bmi.n	8003f36 <_fflush_r+0x32>
 8003f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f32:	f7ff fe68 	bl	8003c06 <__retarget_lock_acquire_recursive>
 8003f36:	4628      	mov	r0, r5
 8003f38:	4621      	mov	r1, r4
 8003f3a:	f7ff ff5f 	bl	8003dfc <__sflush_r>
 8003f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f40:	07da      	lsls	r2, r3, #31
 8003f42:	4605      	mov	r5, r0
 8003f44:	d4e4      	bmi.n	8003f10 <_fflush_r+0xc>
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	059b      	lsls	r3, r3, #22
 8003f4a:	d4e1      	bmi.n	8003f10 <_fflush_r+0xc>
 8003f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f4e:	f7ff fe5b 	bl	8003c08 <__retarget_lock_release_recursive>
 8003f52:	e7dd      	b.n	8003f10 <_fflush_r+0xc>

08003f54 <__swhatbuf_r>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	460c      	mov	r4, r1
 8003f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	b096      	sub	sp, #88	@ 0x58
 8003f60:	4615      	mov	r5, r2
 8003f62:	461e      	mov	r6, r3
 8003f64:	da0d      	bge.n	8003f82 <__swhatbuf_r+0x2e>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2340      	movne	r3, #64	@ 0x40
 8003f74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f78:	2000      	movs	r0, #0
 8003f7a:	6031      	str	r1, [r6, #0]
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	b016      	add	sp, #88	@ 0x58
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	466a      	mov	r2, sp
 8003f84:	f000 f848 	bl	8004018 <_fstat_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	dbec      	blt.n	8003f66 <__swhatbuf_r+0x12>
 8003f8c:	9901      	ldr	r1, [sp, #4]
 8003f8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f96:	4259      	negs	r1, r3
 8003f98:	4159      	adcs	r1, r3
 8003f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f9e:	e7eb      	b.n	8003f78 <__swhatbuf_r+0x24>

08003fa0 <__smakebuf_r>:
 8003fa0:	898b      	ldrh	r3, [r1, #12]
 8003fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fa4:	079d      	lsls	r5, r3, #30
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	d507      	bpl.n	8003fbc <__smakebuf_r+0x1c>
 8003fac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6163      	str	r3, [r4, #20]
 8003fb8:	b003      	add	sp, #12
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbc:	ab01      	add	r3, sp, #4
 8003fbe:	466a      	mov	r2, sp
 8003fc0:	f7ff ffc8 	bl	8003f54 <__swhatbuf_r>
 8003fc4:	9f00      	ldr	r7, [sp, #0]
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	4639      	mov	r1, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7ff fe8a 	bl	8003ce4 <_malloc_r>
 8003fd0:	b948      	cbnz	r0, 8003fe6 <__smakebuf_r+0x46>
 8003fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd6:	059a      	lsls	r2, r3, #22
 8003fd8:	d4ee      	bmi.n	8003fb8 <__smakebuf_r+0x18>
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	e7e2      	b.n	8003fac <__smakebuf_r+0xc>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	6020      	str	r0, [r4, #0]
 8003fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fee:	81a3      	strh	r3, [r4, #12]
 8003ff0:	9b01      	ldr	r3, [sp, #4]
 8003ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ff6:	b15b      	cbz	r3, 8004010 <__smakebuf_r+0x70>
 8003ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f81d 	bl	800403c <_isatty_r>
 8004002:	b128      	cbz	r0, 8004010 <__smakebuf_r+0x70>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	431d      	orrs	r5, r3
 8004014:	81a5      	strh	r5, [r4, #12]
 8004016:	e7cf      	b.n	8003fb8 <__smakebuf_r+0x18>

08004018 <_fstat_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d07      	ldr	r5, [pc, #28]	@ (8004038 <_fstat_r+0x20>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	f7fc fcec 	bl	8000a02 <_fstat>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	d102      	bne.n	8004034 <_fstat_r+0x1c>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	b103      	cbz	r3, 8004034 <_fstat_r+0x1c>
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	bd38      	pop	{r3, r4, r5, pc}
 8004036:	bf00      	nop
 8004038:	2000420c 	.word	0x2000420c

0800403c <_isatty_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d06      	ldr	r5, [pc, #24]	@ (8004058 <_isatty_r+0x1c>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fc fceb 	bl	8000a22 <_isatty>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_isatty_r+0x1a>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_isatty_r+0x1a>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	2000420c 	.word	0x2000420c

0800405c <_sbrk_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4d06      	ldr	r5, [pc, #24]	@ (8004078 <_sbrk_r+0x1c>)
 8004060:	2300      	movs	r3, #0
 8004062:	4604      	mov	r4, r0
 8004064:	4608      	mov	r0, r1
 8004066:	602b      	str	r3, [r5, #0]
 8004068:	f7fc fcf4 	bl	8000a54 <_sbrk>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d102      	bne.n	8004076 <_sbrk_r+0x1a>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b103      	cbz	r3, 8004076 <_sbrk_r+0x1a>
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	2000420c 	.word	0x2000420c

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
