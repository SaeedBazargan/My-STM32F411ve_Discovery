
SDcard_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ec  080051ec  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f4  080051f4  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f8  080051f8  000061f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080051fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000185c  20000080  0800527c  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018dc  0800527c  000078dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8da  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216b  00000000  00000000  0001198a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00013af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f8  00000000  00000000  000145a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c95  00000000  00000000  00014d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef3b  00000000  00000000  0002ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889e8  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  000c4394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c7628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050f4 	.word	0x080050f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080050f4 	.word	0x080050f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <SELECT+0x18>)
 8000b86:	f001 fb73 	bl	8002270 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f001 f8e2 	bl	8001d54 <HAL_Delay>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40020000 	.word	0x40020000

08000b98 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <DESELECT+0x18>)
 8000ba2:	f001 fb65 	bl	8002270 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f001 f8d4 	bl	8001d54 <HAL_Delay>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bbe:	bf00      	nop
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <SPI_TxByte+0x30>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d1f8      	bne.n	8000bc0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bce:	1df9      	adds	r1, r7, #7
 8000bd0:	2364      	movs	r3, #100	@ 0x64
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <SPI_TxByte+0x30>)
 8000bd6:	f002 f86c 	bl	8002cb2 <HAL_SPI_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000a0 	.word	0x200000a0

08000be8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bf4:	bf00      	nop
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <SPI_TxBuffer+0x30>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d1f8      	bne.n	8000bf6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c04:	887a      	ldrh	r2, [r7, #2]
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <SPI_TxBuffer+0x30>)
 8000c0c:	f002 f851 	bl	8002cb2 <HAL_SPI_Transmit>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000a0 	.word	0x200000a0

08000c1c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c22:	23ff      	movs	r3, #255	@ 0xff
 8000c24:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c26:	bf00      	nop
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <SPI_RxByte+0x34>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d1f8      	bne.n	8000c28 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c36:	1dba      	adds	r2, r7, #6
 8000c38:	1df9      	adds	r1, r7, #7
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <SPI_RxByte+0x34>)
 8000c42:	f002 f97a 	bl	8002f3a <HAL_SPI_TransmitReceive>

	return data;
 8000c46:	79bb      	ldrb	r3, [r7, #6]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000a0 	.word	0x200000a0

08000c54 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c5c:	f7ff ffde 	bl	8000c1c <SPI_RxByte>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	701a      	strb	r2, [r3, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <SD_ReadyWait+0x30>)
 8000c78:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c7c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c7e:	f7ff ffcd 	bl	8000c1c <SPI_RxByte>
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2bff      	cmp	r3, #255	@ 0xff
 8000c8a:	d004      	beq.n	8000c96 <SD_ReadyWait+0x26>
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <SD_ReadyWait+0x30>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f3      	bne.n	8000c7e <SD_ReadyWait+0xe>

	return res;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000154a 	.word	0x2000154a

08000ca4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000caa:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cae:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cb0:	f7ff ff72 	bl	8000b98 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	e005      	b.n	8000cc6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cba:	20ff      	movs	r0, #255	@ 0xff
 8000cbc:	f7ff ff7a 	bl	8000bb4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	ddf6      	ble.n	8000cba <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ccc:	f7ff ff56 	bl	8000b7c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cd0:	2340      	movs	r3, #64	@ 0x40
 8000cd2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ce4:	2395      	movs	r3, #149	@ 0x95
 8000ce6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2106      	movs	r1, #6
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff7b 	bl	8000be8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cf2:	e002      	b.n	8000cfa <SD_PowerOn+0x56>
	{
		cnt--;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cfa:	f7ff ff8f 	bl	8000c1c <SPI_RxByte>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d002      	beq.n	8000d0a <SD_PowerOn+0x66>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f4      	bne.n	8000cf4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d0a:	f7ff ff45 	bl	8000b98 <DESELECT>
	SPI_TxByte(0XFF);
 8000d0e:	20ff      	movs	r0, #255	@ 0xff
 8000d10:	f7ff ff50 	bl	8000bb4 <SPI_TxByte>

	PowerFlag = 1;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <SD_PowerOn+0x80>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000009d 	.word	0x2000009d

08000d28 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <SD_PowerOff+0x14>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	2000009d 	.word	0x2000009d

08000d40 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <SD_CheckPower+0x14>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000009d 	.word	0x2000009d

08000d58 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <SD_RxDataBlock+0x5c>)
 8000d64:	22c8      	movs	r2, #200	@ 0xc8
 8000d66:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d68:	f7ff ff58 	bl	8000c1c <SPI_RxByte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2bff      	cmp	r3, #255	@ 0xff
 8000d74:	d104      	bne.n	8000d80 <SD_RxDataBlock+0x28>
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <SD_RxDataBlock+0x5c>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f3      	bne.n	8000d68 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d84:	d001      	beq.n	8000d8a <SD_RxDataBlock+0x32>
 8000d86:	2300      	movs	r3, #0
 8000d88:	e00f      	b.n	8000daa <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <SPI_RxBytePtr>
	} while(len--);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	603a      	str	r2, [r7, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f4      	bne.n	8000d8a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000da0:	f7ff ff3c 	bl	8000c1c <SPI_RxByte>
	SPI_RxByte();
 8000da4:	f7ff ff3a 	bl	8000c1c <SPI_RxByte>

	return TRUE;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20001549 	.word	0x20001549

08000db8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dc8:	f7ff ff52 	bl	8000c70 <SD_ReadyWait>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2bff      	cmp	r3, #255	@ 0xff
 8000dd0:	d001      	beq.n	8000dd6 <SD_TxDataBlock+0x1e>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e02f      	b.n	8000e36 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff feeb 	bl	8000bb4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	2bfd      	cmp	r3, #253	@ 0xfd
 8000de2:	d020      	beq.n	8000e26 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000de4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fefd 	bl	8000be8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000dee:	f7ff ff15 	bl	8000c1c <SPI_RxByte>
		SPI_RxByte();
 8000df2:	f7ff ff13 	bl	8000c1c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000df6:	e00b      	b.n	8000e10 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000df8:	f7ff ff10 	bl	8000c1c <SPI_RxByte>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d006      	beq.n	8000e18 <SD_TxDataBlock+0x60>
			i++;
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	2b40      	cmp	r3, #64	@ 0x40
 8000e14:	d9f0      	bls.n	8000df8 <SD_TxDataBlock+0x40>
 8000e16:	e000      	b.n	8000e1a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e18:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e1a:	bf00      	nop
 8000e1c:	f7ff fefe 	bl	8000c1c <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0fa      	beq.n	8000e1c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d101      	bne.n	8000e34 <SD_TxDataBlock+0x7c>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	6039      	str	r1, [r7, #0]
 8000e48:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e4a:	f7ff ff11 	bl	8000c70 <SD_ReadyWait>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2bff      	cmp	r3, #255	@ 0xff
 8000e52:	d001      	beq.n	8000e58 <SD_SendCmd+0x1a>
 8000e54:	23ff      	movs	r3, #255	@ 0xff
 8000e56:	e042      	b.n	8000ede <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff feaa 	bl	8000bb4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fea4 	bl	8000bb4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	0c1b      	lsrs	r3, r3, #16
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe9e 	bl	8000bb4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe98 	bl	8000bb4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe93 	bl	8000bb4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b40      	cmp	r3, #64	@ 0x40
 8000e92:	d102      	bne.n	8000e9a <SD_SendCmd+0x5c>
 8000e94:	2395      	movs	r3, #149	@ 0x95
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e007      	b.n	8000eaa <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b48      	cmp	r3, #72	@ 0x48
 8000e9e:	d102      	bne.n	8000ea6 <SD_SendCmd+0x68>
 8000ea0:	2387      	movs	r3, #135	@ 0x87
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e001      	b.n	8000eaa <SD_SendCmd+0x6c>
	else crc = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe81 	bl	8000bb4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b4c      	cmp	r3, #76	@ 0x4c
 8000eb6:	d101      	bne.n	8000ebc <SD_SendCmd+0x7e>
 8000eb8:	f7ff feb0 	bl	8000c1c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ec0:	f7ff feac 	bl	8000c1c <SPI_RxByte>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ec8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da05      	bge.n	8000edc <SD_SendCmd+0x9e>
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	73bb      	strb	r3, [r7, #14]
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f1      	bne.n	8000ec0 <SD_SendCmd+0x82>

	return res;
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SD_disk_initialize+0x14>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e0d6      	b.n	80010aa <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000efc:	4b6d      	ldr	r3, [pc, #436]	@ (80010b4 <SD_disk_initialize+0x1cc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <SD_disk_initialize+0x2a>
 8000f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80010b4 <SD_disk_initialize+0x1cc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	e0cb      	b.n	80010aa <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f12:	f7ff fec7 	bl	8000ca4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f16:	f7ff fe31 	bl	8000b7c <SELECT>

	/* check disk type */
	type = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2040      	movs	r0, #64	@ 0x40
 8000f22:	f7ff ff8c 	bl	8000e3e <SD_SendCmd>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	f040 80a6 	bne.w	800107a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f2e:	4b62      	ldr	r3, [pc, #392]	@ (80010b8 <SD_disk_initialize+0x1d0>)
 8000f30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f34:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f36:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f3a:	2048      	movs	r0, #72	@ 0x48
 8000f3c:	f7ff ff7f 	bl	8000e3e <SD_SendCmd>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d158      	bne.n	8000ff8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e00c      	b.n	8000f66 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f4c:	7bfc      	ldrb	r4, [r7, #15]
 8000f4e:	f7ff fe65 	bl	8000c1c <SPI_RxByte>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	f104 0310 	add.w	r3, r4, #16
 8000f5a:	443b      	add	r3, r7
 8000f5c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d9ef      	bls.n	8000f4c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f6c:	7abb      	ldrb	r3, [r7, #10]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	f040 8083 	bne.w	800107a <SD_disk_initialize+0x192>
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	2baa      	cmp	r3, #170	@ 0xaa
 8000f78:	d17f      	bne.n	800107a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2077      	movs	r0, #119	@ 0x77
 8000f7e:	f7ff ff5e 	bl	8000e3e <SD_SendCmd>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d807      	bhi.n	8000f98 <SD_disk_initialize+0xb0>
 8000f88:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f8c:	2069      	movs	r0, #105	@ 0x69
 8000f8e:	f7ff ff56 	bl	8000e3e <SD_SendCmd>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000f98:	4b47      	ldr	r3, [pc, #284]	@ (80010b8 <SD_disk_initialize+0x1d0>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1eb      	bne.n	8000f7a <SD_disk_initialize+0x92>
 8000fa2:	e000      	b.n	8000fa6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fa4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fa6:	4b44      	ldr	r3, [pc, #272]	@ (80010b8 <SD_disk_initialize+0x1d0>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d064      	beq.n	800107a <SD_disk_initialize+0x192>
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	207a      	movs	r0, #122	@ 0x7a
 8000fb4:	f7ff ff43 	bl	8000e3e <SD_SendCmd>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d15d      	bne.n	800107a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e00c      	b.n	8000fde <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fc4:	7bfc      	ldrb	r4, [r7, #15]
 8000fc6:	f7ff fe29 	bl	8000c1c <SPI_RxByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f104 0310 	add.w	r3, r4, #16
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d9ef      	bls.n	8000fc4 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000fe4:	7a3b      	ldrb	r3, [r7, #8]
 8000fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SD_disk_initialize+0x10a>
 8000fee:	230c      	movs	r3, #12
 8000ff0:	e000      	b.n	8000ff4 <SD_disk_initialize+0x10c>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	73bb      	strb	r3, [r7, #14]
 8000ff6:	e040      	b.n	800107a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2077      	movs	r0, #119	@ 0x77
 8000ffc:	f7ff ff1f 	bl	8000e3e <SD_SendCmd>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d808      	bhi.n	8001018 <SD_disk_initialize+0x130>
 8001006:	2100      	movs	r1, #0
 8001008:	2069      	movs	r0, #105	@ 0x69
 800100a:	f7ff ff18 	bl	8000e3e <SD_SendCmd>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d801      	bhi.n	8001018 <SD_disk_initialize+0x130>
 8001014:	2302      	movs	r3, #2
 8001016:	e000      	b.n	800101a <SD_disk_initialize+0x132>
 8001018:	2301      	movs	r3, #1
 800101a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d10e      	bne.n	8001040 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001022:	2100      	movs	r1, #0
 8001024:	2077      	movs	r0, #119	@ 0x77
 8001026:	f7ff ff0a 	bl	8000e3e <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d80e      	bhi.n	800104e <SD_disk_initialize+0x166>
 8001030:	2100      	movs	r1, #0
 8001032:	2069      	movs	r0, #105	@ 0x69
 8001034:	f7ff ff03 	bl	8000e3e <SD_SendCmd>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d107      	bne.n	800104e <SD_disk_initialize+0x166>
 800103e:	e00d      	b.n	800105c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001040:	2100      	movs	r1, #0
 8001042:	2041      	movs	r0, #65	@ 0x41
 8001044:	f7ff fefb 	bl	8000e3e <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <SD_disk_initialize+0x1d0>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e1      	bne.n	800101c <SD_disk_initialize+0x134>
 8001058:	e000      	b.n	800105c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800105a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <SD_disk_initialize+0x1d0>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <SD_disk_initialize+0x18e>
 8001066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106a:	2050      	movs	r0, #80	@ 0x50
 800106c:	f7ff fee7 	bl	8000e3e <SD_SendCmd>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SD_disk_initialize+0x192>
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800107a:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <SD_disk_initialize+0x1d4>)
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001080:	f7ff fd8a 	bl	8000b98 <DESELECT>
	SPI_RxByte();
 8001084:	f7ff fdca 	bl	8000c1c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <SD_disk_initialize+0x1cc>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <SD_disk_initialize+0x1cc>)
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e001      	b.n	80010a4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010a0:	f7ff fe42 	bl	8000d28 <SD_PowerOff>
	}

	return Stat;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <SD_disk_initialize+0x1cc>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20001549 	.word	0x20001549
 80010bc:	2000009c 	.word	0x2000009c

080010c0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SD_disk_status+0x14>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e002      	b.n	80010da <SD_disk_status+0x1a>
	return Stat;
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SD_disk_status+0x28>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000

080010ec <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <SD_disk_read+0x1c>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <SD_disk_read+0x20>
 8001108:	2304      	movs	r3, #4
 800110a:	e051      	b.n	80011b0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800110c:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <SD_disk_read+0xcc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SD_disk_read+0x32>
 800111a:	2303      	movs	r3, #3
 800111c:	e048      	b.n	80011b0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800111e:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <SD_disk_read+0xd0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <SD_disk_read+0x44>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001130:	f7ff fd24 	bl	8000b7c <SELECT>

	if (count == 1)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d111      	bne.n	800115e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2051      	movs	r0, #81	@ 0x51
 800113e:	f7ff fe7e 	bl	8000e3e <SD_SendCmd>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d129      	bne.n	800119c <SD_disk_read+0xb0>
 8001148:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	f7ff fe03 	bl	8000d58 <SD_RxDataBlock>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d021      	beq.n	800119c <SD_disk_read+0xb0>
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	e01e      	b.n	800119c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	2052      	movs	r0, #82	@ 0x52
 8001162:	f7ff fe6c 	bl	8000e3e <SD_SendCmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d117      	bne.n	800119c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800116c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff fdf1 	bl	8000d58 <SD_RxDataBlock>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00a      	beq.n	8001192 <SD_disk_read+0xa6>
				buff += 512;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001182:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ed      	bne.n	800116c <SD_disk_read+0x80>
 8001190:	e000      	b.n	8001194 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001192:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001194:	2100      	movs	r1, #0
 8001196:	204c      	movs	r0, #76	@ 0x4c
 8001198:	f7ff fe51 	bl	8000e3e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800119c:	f7ff fcfc 	bl	8000b98 <DESELECT>
	SPI_RxByte();
 80011a0:	f7ff fd3c 	bl	8000c1c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	2000009c 	.word	0x2000009c

080011c0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <SD_disk_write+0x1c>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <SD_disk_write+0x20>
 80011dc:	2304      	movs	r3, #4
 80011de:	e06b      	b.n	80012b8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011e0:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <SD_disk_write+0x100>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SD_disk_write+0x32>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e062      	b.n	80012b8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80011f2:	4b33      	ldr	r3, [pc, #204]	@ (80012c0 <SD_disk_write+0x100>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SD_disk_write+0x44>
 8001200:	2302      	movs	r3, #2
 8001202:	e059      	b.n	80012b8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <SD_disk_write+0x104>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <SD_disk_write+0x56>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	607b      	str	r3, [r7, #4]

	SELECT();
 8001216:	f7ff fcb1 	bl	8000b7c <SELECT>

	if (count == 1)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d110      	bne.n	8001242 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	2058      	movs	r0, #88	@ 0x58
 8001224:	f7ff fe0b 	bl	8000e3e <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d13a      	bne.n	80012a4 <SD_disk_write+0xe4>
 800122e:	21fe      	movs	r1, #254	@ 0xfe
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f7ff fdc1 	bl	8000db8 <SD_TxDataBlock>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d033      	beq.n	80012a4 <SD_disk_write+0xe4>
			count = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	e030      	b.n	80012a4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <SD_disk_write+0x104>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800124e:	2100      	movs	r1, #0
 8001250:	2077      	movs	r0, #119	@ 0x77
 8001252:	f7ff fdf4 	bl	8000e3e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	2057      	movs	r0, #87	@ 0x57
 800125a:	f7ff fdf0 	bl	8000e3e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	2059      	movs	r0, #89	@ 0x59
 8001262:	f7ff fdec 	bl	8000e3e <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11b      	bne.n	80012a4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800126c:	21fc      	movs	r1, #252	@ 0xfc
 800126e:	68b8      	ldr	r0, [r7, #8]
 8001270:	f7ff fda2 	bl	8000db8 <SD_TxDataBlock>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00a      	beq.n	8001290 <SD_disk_write+0xd0>
				buff += 512;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001280:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ee      	bne.n	800126c <SD_disk_write+0xac>
 800128e:	e000      	b.n	8001292 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001290:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001292:	21fd      	movs	r1, #253	@ 0xfd
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fd8f 	bl	8000db8 <SD_TxDataBlock>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <SD_disk_write+0xe4>
			{
				count = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012a4:	f7ff fc78 	bl	8000b98 <DESELECT>
	SPI_RxByte();
 80012a8:	f7ff fcb8 	bl	8000c1c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf14      	ite	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	2300      	moveq	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	2000009c 	.word	0x2000009c

080012c8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b08b      	sub	sp, #44	@ 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	460b      	mov	r3, r1
 80012d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SD_disk_ioctl+0x1e>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e113      	b.n	800150e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d124      	bne.n	800133c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d012      	beq.n	8001320 <SD_disk_ioctl+0x58>
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	dc1a      	bgt.n	8001334 <SD_disk_ioctl+0x6c>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <SD_disk_ioctl+0x40>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d006      	beq.n	8001314 <SD_disk_ioctl+0x4c>
 8001306:	e015      	b.n	8001334 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001308:	f7ff fd0e 	bl	8000d28 <SD_PowerOff>
			res = RES_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001312:	e0fa      	b.n	800150a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001314:	f7ff fcc6 	bl	8000ca4 <SD_PowerOn>
			res = RES_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800131e:	e0f4      	b.n	800150a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	1c5c      	adds	r4, r3, #1
 8001324:	f7ff fd0c 	bl	8000d40 <SD_CheckPower>
 8001328:	4603      	mov	r3, r0
 800132a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001332:	e0ea      	b.n	800150a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001334:	2304      	movs	r3, #4
 8001336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800133a:	e0e6      	b.n	800150a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800133c:	4b76      	ldr	r3, [pc, #472]	@ (8001518 <SD_disk_ioctl+0x250>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SD_disk_ioctl+0x86>
 800134a:	2303      	movs	r3, #3
 800134c:	e0df      	b.n	800150e <SD_disk_ioctl+0x246>

		SELECT();
 800134e:	f7ff fc15 	bl	8000b7c <SELECT>

		switch (ctrl)
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	2b0d      	cmp	r3, #13
 8001356:	f200 80c9 	bhi.w	80014ec <SD_disk_ioctl+0x224>
 800135a:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <SD_disk_ioctl+0x98>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	08001457 	.word	0x08001457
 8001364:	08001399 	.word	0x08001399
 8001368:	08001447 	.word	0x08001447
 800136c:	080014ed 	.word	0x080014ed
 8001370:	080014ed 	.word	0x080014ed
 8001374:	080014ed 	.word	0x080014ed
 8001378:	080014ed 	.word	0x080014ed
 800137c:	080014ed 	.word	0x080014ed
 8001380:	080014ed 	.word	0x080014ed
 8001384:	080014ed 	.word	0x080014ed
 8001388:	080014ed 	.word	0x080014ed
 800138c:	08001469 	.word	0x08001469
 8001390:	0800148d 	.word	0x0800148d
 8001394:	080014b1 	.word	0x080014b1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001398:	2100      	movs	r1, #0
 800139a:	2049      	movs	r0, #73	@ 0x49
 800139c:	f7ff fd4f 	bl	8000e3e <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 80a6 	bne.w	80014f4 <SD_disk_ioctl+0x22c>
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2110      	movs	r1, #16
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fcd2 	bl	8000d58 <SD_RxDataBlock>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 809c 	beq.w	80014f4 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	099b      	lsrs	r3, r3, #6
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d10d      	bne.n	80013e2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013c6:	7d7b      	ldrb	r3, [r7, #21]
 80013c8:	461a      	mov	r2, r3
 80013ca:	7d3b      	ldrb	r3, [r7, #20]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013d8:	8bfb      	ldrh	r3, [r7, #30]
 80013da:	029a      	lsls	r2, r3, #10
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e02d      	b.n	800143e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013e2:	7c7b      	ldrb	r3, [r7, #17]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	7dbb      	ldrb	r3, [r7, #22]
 80013ec:	09db      	lsrs	r3, r3, #7
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	7d7b      	ldrb	r3, [r7, #21]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 0306 	and.w	r3, r3, #6
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	3302      	adds	r3, #2
 8001406:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800140a:	7d3b      	ldrb	r3, [r7, #20]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	7cfb      	ldrb	r3, [r7, #19]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	b29b      	uxth	r3, r3
 8001418:	4413      	add	r3, r2
 800141a:	b29a      	uxth	r2, r3
 800141c:	7cbb      	ldrb	r3, [r7, #18]
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	b29b      	uxth	r3, r3
 8001422:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	3301      	adds	r3, #1
 800142e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001430:	8bfa      	ldrh	r2, [r7, #30]
 8001432:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001436:	3b09      	subs	r3, #9
 8001438:	409a      	lsls	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001444:	e056      	b.n	80014f4 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001454:	e055      	b.n	8001502 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001456:	f7ff fc0b 	bl	8000c70 <SD_ReadyWait>
 800145a:	4603      	mov	r3, r0
 800145c:	2bff      	cmp	r3, #255	@ 0xff
 800145e:	d14b      	bne.n	80014f8 <SD_disk_ioctl+0x230>
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001466:	e047      	b.n	80014f8 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001468:	2100      	movs	r1, #0
 800146a:	2049      	movs	r0, #73	@ 0x49
 800146c:	f7ff fce7 	bl	8000e3e <SD_SendCmd>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d142      	bne.n	80014fc <SD_disk_ioctl+0x234>
 8001476:	2110      	movs	r1, #16
 8001478:	6a38      	ldr	r0, [r7, #32]
 800147a:	f7ff fc6d 	bl	8000d58 <SD_RxDataBlock>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d03b      	beq.n	80014fc <SD_disk_ioctl+0x234>
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800148a:	e037      	b.n	80014fc <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800148c:	2100      	movs	r1, #0
 800148e:	204a      	movs	r0, #74	@ 0x4a
 8001490:	f7ff fcd5 	bl	8000e3e <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d132      	bne.n	8001500 <SD_disk_ioctl+0x238>
 800149a:	2110      	movs	r1, #16
 800149c:	6a38      	ldr	r0, [r7, #32]
 800149e:	f7ff fc5b 	bl	8000d58 <SD_RxDataBlock>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d02b      	beq.n	8001500 <SD_disk_ioctl+0x238>
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014ae:	e027      	b.n	8001500 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014b0:	2100      	movs	r1, #0
 80014b2:	207a      	movs	r0, #122	@ 0x7a
 80014b4:	f7ff fcc3 	bl	8000e3e <SD_SendCmd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014c4:	e00b      	b.n	80014de <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80014c6:	6a3c      	ldr	r4, [r7, #32]
 80014c8:	1c63      	adds	r3, r4, #1
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	f7ff fba6 	bl	8000c1c <SPI_RxByte>
 80014d0:	4603      	mov	r3, r0
 80014d2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014d8:	3301      	adds	r3, #1
 80014da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d9ef      	bls.n	80014c6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80014ec:	2304      	movs	r3, #4
 80014ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014f2:	e006      	b.n	8001502 <SD_disk_ioctl+0x23a>
			break;
 80014f4:	bf00      	nop
 80014f6:	e004      	b.n	8001502 <SD_disk_ioctl+0x23a>
			break;
 80014f8:	bf00      	nop
 80014fa:	e002      	b.n	8001502 <SD_disk_ioctl+0x23a>
			break;
 80014fc:	bf00      	nop
 80014fe:	e000      	b.n	8001502 <SD_disk_ioctl+0x23a>
			break;
 8001500:	bf00      	nop
		}

		DESELECT();
 8001502:	f7ff fb49 	bl	8000b98 <DESELECT>
		SPI_RxByte();
 8001506:	f7ff fb89 	bl	8000c1c <SPI_RxByte>
	}

	return res;
 800150a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800150e:	4618      	mov	r0, r3
 8001510:	372c      	adds	r7, #44	@ 0x2c
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000

0800151c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001524:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001528:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001534:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001538:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800153c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001544:	e000      	b.n	8001548 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001546:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001548:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f9      	beq.n	8001546 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001552:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e009      	b.n	8001594 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ffc7 	bl	800151c <ITM_SendChar>
	for(i = 0; i < len; i++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf1      	blt.n	8001580 <_write+0x16>
	}
	return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <buf_clear>:
	return i;
}

// <---- --- clear buffer --- ---->
void buf_clear(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e007      	b.n	80015c4 <buf_clear+0x1c>
		buffer[i] = '\0';
 80015b4:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <buf_clear+0x34>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ca:	dbf3      	blt.n	80015b4 <buf_clear+0xc>
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20001138 	.word	0x20001138

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e4:	f000 fb44 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e8:	f000 f89a 	bl	8001720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ec:	f000 f936 	bl	800185c <MX_GPIO_Init>
  MX_SPI1_Init();
 80015f0:	f000 f8fe 	bl	80017f0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80015f4:	f001 ff26 	bl	8003444 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // <---- --- Mount SD Card --- ---->
  fresult = f_mount(&fs, "", 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	493a      	ldr	r1, [pc, #232]	@ (80016e4 <main+0x104>)
 80015fc:	483a      	ldr	r0, [pc, #232]	@ (80016e8 <main+0x108>)
 80015fe:	f002 fcf1 	bl	8003fe4 <f_mount>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <main+0x10c>)
 8001608:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <main+0x10c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <main+0x3e>
	  printf("error in mounting SD Card = %d \n", fresult);
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <main+0x10c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4835      	ldr	r0, [pc, #212]	@ (80016f0 <main+0x110>)
 800161a:	f002 fefd 	bl	8004418 <iprintf>
  printf("SD Card mounting successfully = %d \n", fresult);
 800161e:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <main+0x10c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4833      	ldr	r0, [pc, #204]	@ (80016f4 <main+0x114>)
 8001626:	f002 fef7 	bl	8004418 <iprintf>
  /* USER CODE END 2 */
  // <---- --- Card capacity details --- ---->
  // <---- --- Check free space --- ---->
  f_getfree("", &fre_clust, &pfs);
 800162a:	4a33      	ldr	r2, [pc, #204]	@ (80016f8 <main+0x118>)
 800162c:	4933      	ldr	r1, [pc, #204]	@ (80016fc <main+0x11c>)
 800162e:	482d      	ldr	r0, [pc, #180]	@ (80016e4 <main+0x104>)
 8001630:	f002 fd1e 	bl	8004070 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001634:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <main+0x118>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	3b02      	subs	r3, #2
 800163c:	4a2e      	ldr	r2, [pc, #184]	@ (80016f8 <main+0x118>)
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	8952      	ldrh	r2, [r2, #10]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f886 	bl	8000758 <__aeabi_ui2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <main+0x120>)
 8001652:	f7fe fe15 	bl	8000280 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff f8f5 	bl	800084c <__aeabi_d2uiz>
 8001662:	4603      	mov	r3, r0
 8001664:	4a27      	ldr	r2, [pc, #156]	@ (8001704 <main+0x124>)
 8001666:	6013      	str	r3, [r2, #0]
  printf("SD Card total size = %d \n", total);
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <main+0x124>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	4826      	ldr	r0, [pc, #152]	@ (8001708 <main+0x128>)
 8001670:	f002 fed2 	bl	8004418 <iprintf>
  buf_clear();
 8001674:	f7ff ff98 	bl	80015a8 <buf_clear>
  free_space = (uint32_t)(fre_clust * pfs->csize *  0.5);
 8001678:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <main+0x118>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	895b      	ldrh	r3, [r3, #10]
 800167e:	461a      	mov	r2, r3
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <main+0x11c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f865 	bl	8000758 <__aeabi_ui2d>
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <main+0x120>)
 8001694:	f7fe fdf4 	bl	8000280 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff f8d4 	bl	800084c <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a19      	ldr	r2, [pc, #100]	@ (800170c <main+0x12c>)
 80016a8:	6013      	str	r3, [r2, #0]
  printf("SD Card free space = %d \n", free_space);
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <main+0x12c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4817      	ldr	r0, [pc, #92]	@ (8001710 <main+0x130>)
 80016b2:	f002 feb1 	bl	8004418 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <main+0x134>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <main+0x134>)
 80016c0:	701a      	strb	r2, [r3, #0]
	  printf("Hello MRL = %d \n", count);
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <main+0x134>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4813      	ldr	r0, [pc, #76]	@ (8001718 <main+0x138>)
 80016ca:	f002 fea5 	bl	8004418 <iprintf>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80016ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d2:	4812      	ldr	r0, [pc, #72]	@ (800171c <main+0x13c>)
 80016d4:	f000 fde5 	bl	80022a2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80016d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016dc:	f000 fb3a 	bl	8001d54 <HAL_Delay>
	  count++;
 80016e0:	bf00      	nop
 80016e2:	e7e8      	b.n	80016b6 <main+0xd6>
 80016e4:	0800510c 	.word	0x0800510c
 80016e8:	200000fc 	.word	0x200000fc
 80016ec:	20001134 	.word	0x20001134
 80016f0:	08005110 	.word	0x08005110
 80016f4:	08005134 	.word	0x08005134
 80016f8:	20001538 	.word	0x20001538
 80016fc:	2000153c 	.word	0x2000153c
 8001700:	3fe00000 	.word	0x3fe00000
 8001704:	20001540 	.word	0x20001540
 8001708:	0800515c 	.word	0x0800515c
 800170c:	20001544 	.word	0x20001544
 8001710:	08005178 	.word	0x08005178
 8001714:	200000f8 	.word	0x200000f8
 8001718:	08005194 	.word	0x08005194
 800171c:	40020c00 	.word	0x40020c00

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b094      	sub	sp, #80	@ 0x50
 8001724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	2230      	movs	r2, #48	@ 0x30
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fec7 	bl	80044c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	4b27      	ldr	r3, [pc, #156]	@ (80017e8 <SystemClock_Config+0xc8>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	4a26      	ldr	r2, [pc, #152]	@ (80017e8 <SystemClock_Config+0xc8>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	@ 0x40
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <SystemClock_Config+0xc8>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <SystemClock_Config+0xcc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a20      	ldr	r2, [pc, #128]	@ (80017ec <SystemClock_Config+0xcc>)
 800176a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <SystemClock_Config+0xcc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001780:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001786:	2302      	movs	r3, #2
 8001788:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001794:	2364      	movs	r3, #100	@ 0x64
 8001796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001798:	2302      	movs	r3, #2
 800179a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800179c:	2304      	movs	r3, #4
 800179e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fd97 	bl	80022d8 <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017b0:	f000 f8bc 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	230f      	movs	r3, #15
 80017b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b8:	2302      	movs	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	2103      	movs	r1, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fff9 	bl	80027c8 <HAL_RCC_ClockConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017dc:	f000 f8a6 	bl	800192c <Error_Handler>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3750      	adds	r7, #80	@ 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <MX_SPI1_Init+0x64>)
 80017f6:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <MX_SPI1_Init+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <MX_SPI1_Init+0x64>)
 80017fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <MX_SPI1_Init+0x64>)
 800181c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001824:	2210      	movs	r2, #16
 8001826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001834:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_SPI1_Init+0x64>)
 800183c:	220a      	movs	r2, #10
 800183e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	@ (8001854 <MX_SPI1_Init+0x64>)
 8001842:	f001 f9ad 	bl	8002ba0 <HAL_SPI_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800184c:	f000 f86e 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200000a0 	.word	0x200000a0
 8001858:	40013000 	.word	0x40013000

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <MX_GPIO_Init+0xc4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a29      	ldr	r2, [pc, #164]	@ (8001920 <MX_GPIO_Init+0xc4>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <MX_GPIO_Init+0xc4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <MX_GPIO_Init+0xc4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <MX_GPIO_Init+0xc4>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <MX_GPIO_Init+0xc4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <MX_GPIO_Init+0xc4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <MX_GPIO_Init+0xc4>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <MX_GPIO_Init+0xc4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2110      	movs	r1, #16
 80018ca:	4816      	ldr	r0, [pc, #88]	@ (8001924 <MX_GPIO_Init+0xc8>)
 80018cc:	f000 fcd0 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018d6:	4814      	ldr	r0, [pc, #80]	@ (8001928 <MX_GPIO_Init+0xcc>)
 80018d8:	f000 fcca 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80018dc:	2310      	movs	r3, #16
 80018de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	480c      	ldr	r0, [pc, #48]	@ (8001924 <MX_GPIO_Init+0xc8>)
 80018f4:	f000 fb38 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_GPIO_Init+0xcc>)
 8001912:	f000 fb29 	bl	8001f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020c00 	.word	0x40020c00

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <Error_Handler+0x8>

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <HAL_MspInit+0x4c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_MspInit+0x4c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_SPI_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12b      	bne.n	8001a02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_SPI_MspInit+0x88>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <HAL_SPI_MspInit+0x88>)
 80019b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_SPI_MspInit+0x88>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_SPI_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	@ (8001a10 <HAL_SPI_MspInit+0x88>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_SPI_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019e2:	23e0      	movs	r3, #224	@ 0xe0
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f2:	2305      	movs	r3, #5
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <HAL_SPI_MspInit+0x8c>)
 80019fe:	f000 fab3 	bl	8001f68 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40013000 	.word	0x40013000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <SDTimer_Handler+0x40>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <SDTimer_Handler+0x1c>
		Timer1--;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <SDTimer_Handler+0x40>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <SDTimer_Handler+0x40>)
 8001a32:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <SDTimer_Handler+0x44>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <SDTimer_Handler+0x34>
		Timer2--;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <SDTimer_Handler+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <SDTimer_Handler+0x44>)
 8001a4a:	701a      	strb	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20001549 	.word	0x20001549
 8001a5c:	2000154a 	.word	0x2000154a

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <NMI_Handler+0x4>

08001a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <MemManage_Handler+0x4>

08001a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <SysTick_Handler+0x30>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <SysTick_Handler+0x30>)
 8001ac4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <SysTick_Handler+0x30>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d904      	bls.n	8001ada <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <SysTick_Handler+0x30>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001ad6:	f7ff ff9f 	bl	8001a18 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ada:	f000 f91b 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20001548 	.word	0x20001548

08001ae8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00a      	b.n	8001b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afa:	f3af 8000 	nop.w
 8001afe:	4601      	mov	r1, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf0      	blt.n	8001afa <_read+0x12>
  }

  return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_isatty>:

int _isatty(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f002 fcd0 	bl	8004560 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20020000 	.word	0x20020000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	2000154c 	.word	0x2000154c
 8001bf4:	200018e0 	.word	0x200018e0

08001bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c20:	f7ff ffea 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c26:	490d      	ldr	r1, [pc, #52]	@ (8001c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f002 fc8f 	bl	800456c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff fcc7 	bl	80015e0 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c60:	080051fc 	.word	0x080051fc
  ldr r2, =_sbss
 8001c64:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c68:	200018dc 	.word	0x200018dc

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <HAL_Init+0x40>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_Init+0x40>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <HAL_Init+0x40>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f000 f931 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9e:	200f      	movs	r0, #15
 8001ca0:	f000 f808 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca4:	f7ff fe48 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_InitTick+0x54>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_InitTick+0x58>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f93b 	bl	8001f4e <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00e      	b.n	8001d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d80a      	bhi.n	8001cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f000 f911 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4a06      	ldr	r2, [pc, #24]	@ (8001d10 <HAL_InitTick+0x5c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20001550 	.word	0x20001550

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20001550 	.word	0x20001550

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <__NVIC_SetPriorityGrouping>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_SetPriority>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	@ (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	@ 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff47 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff5c 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff8e 	bl	8001e54 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5d 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffb0 	bl	8001ebc <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e159      	b.n	8002238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8148 	bne.w	8002232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a2 	beq.w	8002232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a56      	ldr	r2, [pc, #344]	@ (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b54      	ldr	r3, [pc, #336]	@ (8002250 <HAL_GPIO_Init+0x2e8>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_GPIO_Init+0x2ec>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a49      	ldr	r2, [pc, #292]	@ (8002258 <HAL_GPIO_Init+0x2f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x202>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a48      	ldr	r2, [pc, #288]	@ (800225c <HAL_GPIO_Init+0x2f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x1fe>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a47      	ldr	r2, [pc, #284]	@ (8002260 <HAL_GPIO_Init+0x2f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <HAL_GPIO_Init+0x2fc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x1f6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a45      	ldr	r2, [pc, #276]	@ (8002268 <HAL_GPIO_Init+0x300>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x1f2>
 8002156:	2304      	movs	r3, #4
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215a:	2307      	movs	r3, #7
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x204>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4935      	ldr	r1, [pc, #212]	@ (8002254 <HAL_GPIO_Init+0x2ec>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b38      	ldr	r3, [pc, #224]	@ (800226c <HAL_GPIO_Init+0x304>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021de:	4b23      	ldr	r3, [pc, #140]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <HAL_GPIO_Init+0x304>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <HAL_GPIO_Init+0x304>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222c:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <HAL_GPIO_Init+0x304>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f aea2 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	041a      	lsls	r2, r3, #16
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43d9      	mvns	r1, r3
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e267      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d075      	beq.n	80023e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022f6:	4b88      	ldr	r3, [pc, #544]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d00c      	beq.n	800231c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4b85      	ldr	r3, [pc, #532]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800230a:	2b08      	cmp	r3, #8
 800230c:	d112      	bne.n	8002334 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4b82      	ldr	r3, [pc, #520]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800231a:	d10b      	bne.n	8002334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	4b7e      	ldr	r3, [pc, #504]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05b      	beq.n	80023e0 <HAL_RCC_OscConfig+0x108>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d157      	bne.n	80023e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e242      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x74>
 800233e:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xb0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b70      	ldr	r3, [pc, #448]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6f      	ldr	r2, [pc, #444]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b6d      	ldr	r3, [pc, #436]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6c      	ldr	r2, [pc, #432]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xb0>
 8002370:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a68      	ldr	r2, [pc, #416]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b66      	ldr	r3, [pc, #408]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a65      	ldr	r2, [pc, #404]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fcd4 	bl	8001d3c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fcd0 	bl	8001d3c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	@ 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e207      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xc0>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff fcc0 	bl	8001d3c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff fcbc 	bl	8001d3c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	@ 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1f3      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0xe8>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x152>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1c7      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4937      	ldr	r1, [pc, #220]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <HAL_RCC_OscConfig+0x244>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff fc75 	bl	8001d3c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff fc71 	bl	8001d3c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1a8      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4925      	ldr	r1, [pc, #148]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b24      	ldr	r3, [pc, #144]	@ (800251c <HAL_RCC_OscConfig+0x244>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fc54 	bl	8001d3c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff fc50 	bl	8001d3c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e187      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d036      	beq.n	8002530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_RCC_OscConfig+0x248>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7ff fc34 	bl	8001d3c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7ff fc30 	bl	8001d3c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e167      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <HAL_RCC_OscConfig+0x240>)
 80024ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x200>
 80024f6:	e01b      	b.n	8002530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_RCC_OscConfig+0x248>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fc1d 	bl	8001d3c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e00e      	b.n	8002524 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002506:	f7ff fc19 	bl	8001d3c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d907      	bls.n	8002524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e150      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
 8002518:	40023800 	.word	0x40023800
 800251c:	42470000 	.word	0x42470000
 8002520:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ea      	bne.n	8002506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8097 	beq.w	800266c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b81      	ldr	r3, [pc, #516]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b7d      	ldr	r3, [pc, #500]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a7c      	ldr	r2, [pc, #496]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
 800255e:	4b7a      	ldr	r3, [pc, #488]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b77      	ldr	r3, [pc, #476]	@ (800274c <HAL_RCC_OscConfig+0x474>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b74      	ldr	r3, [pc, #464]	@ (800274c <HAL_RCC_OscConfig+0x474>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a73      	ldr	r2, [pc, #460]	@ (800274c <HAL_RCC_OscConfig+0x474>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7ff fbd9 	bl	8001d3c <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7ff fbd5 	bl	8001d3c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e10c      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <HAL_RCC_OscConfig+0x474>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2ea>
 80025b4:	4b64      	ldr	r3, [pc, #400]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b8:	4a63      	ldr	r2, [pc, #396]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c0:	e01c      	b.n	80025fc <HAL_RCC_OscConfig+0x324>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x30c>
 80025ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	4a5b      	ldr	r2, [pc, #364]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0x324>
 80025e4:	4b58      	ldr	r3, [pc, #352]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e8:	4a57      	ldr	r2, [pc, #348]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f0:	4b55      	ldr	r3, [pc, #340]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f4:	4a54      	ldr	r2, [pc, #336]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 0304 	bic.w	r3, r3, #4
 80025fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d015      	beq.n	8002630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7ff fb9a 	bl	8001d3c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7ff fb96 	bl	8001d3c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0cb      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ee      	beq.n	800260c <HAL_RCC_OscConfig+0x334>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7ff fb84 	bl	8001d3c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7ff fb80 	bl	8001d3c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0b5      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264e:	4b3e      	ldr	r3, [pc, #248]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ee      	bne.n	8002638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	4a38      	ldr	r2, [pc, #224]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800266a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a1 	beq.w	80027b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002676:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d05c      	beq.n	800273c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d141      	bne.n	800270e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <HAL_RCC_OscConfig+0x478>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fb54 	bl	8001d3c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fb50 	bl	8001d3c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e087      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	019b      	lsls	r3, r3, #6
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	3b01      	subs	r3, #1
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	491b      	ldr	r1, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_RCC_OscConfig+0x478>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7ff fb29 	bl	8001d3c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff fb25 	bl	8001d3c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e05c      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x416>
 800270c:	e054      	b.n	80027b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_RCC_OscConfig+0x478>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fb12 	bl	8001d3c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff fb0e 	bl	8001d3c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e045      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_RCC_OscConfig+0x470>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x444>
 800273a:	e03d      	b.n	80027b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e038      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000
 8002750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_RCC_OscConfig+0x4ec>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d028      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d121      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d11a      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800278a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278c:	4293      	cmp	r3, r2
 800278e:	d111      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	3b01      	subs	r3, #1
 800279e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cc      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b68      	ldr	r3, [pc, #416]	@ (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d90c      	bls.n	8002804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	@ (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e067      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b37      	ldr	r3, [pc, #220]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4934      	ldr	r1, [pc, #208]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff fa40 	bl	8001d3c <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff fa3c 	bl	8001d3c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d20c      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f9a0 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	080051a8 	.word	0x080051a8
 800298c:	20000004 	.word	0x20000004
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002998:	b094      	sub	sp, #80	@ 0x50
 800299a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ac:	4b79      	ldr	r3, [pc, #484]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d00d      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x40>
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	f200 80e1 	bhi.w	8002b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x34>
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x3a>
 80029c6:	e0db      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029cc:	e0db      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ce:	4b73      	ldr	r3, [pc, #460]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80029d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029d2:	e0d8      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029de:	4b6d      	ldr	r3, [pc, #436]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	2200      	movs	r2, #0
 80029f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a06:	4622      	mov	r2, r4
 8002a08:	462b      	mov	r3, r5
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	0159      	lsls	r1, r3, #5
 8002a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a18:	0150      	lsls	r0, r2, #5
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4621      	mov	r1, r4
 8002a20:	1a51      	subs	r1, r2, r1
 8002a22:	6139      	str	r1, [r7, #16]
 8002a24:	4629      	mov	r1, r5
 8002a26:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	018b      	lsls	r3, r1, #6
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a42:	4651      	mov	r1, sl
 8002a44:	018a      	lsls	r2, r1, #6
 8002a46:	4651      	mov	r1, sl
 8002a48:	ebb2 0801 	subs.w	r8, r2, r1
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a66:	4690      	mov	r8, r2
 8002a68:	4699      	mov	r9, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	eb18 0303 	adds.w	r3, r8, r3
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	462b      	mov	r3, r5
 8002a74:	eb49 0303 	adc.w	r3, r9, r3
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a86:	4629      	mov	r1, r5
 8002a88:	024b      	lsls	r3, r1, #9
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a90:	4621      	mov	r1, r4
 8002a92:	024a      	lsls	r2, r1, #9
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aa4:	f7fd fef2 	bl	800088c <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ab0:	e058      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab2:	4b38      	ldr	r3, [pc, #224]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	4611      	mov	r1, r2
 8002abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002acc:	4642      	mov	r2, r8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	f04f 0000 	mov.w	r0, #0
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	0159      	lsls	r1, r3, #5
 8002ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ade:	0150      	lsls	r0, r2, #5
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aea:	4649      	mov	r1, r9
 8002aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b04:	ebb2 040a 	subs.w	r4, r2, sl
 8002b08:	eb63 050b 	sbc.w	r5, r3, fp
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	00eb      	lsls	r3, r5, #3
 8002b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1a:	00e2      	lsls	r2, r4, #3
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	461d      	mov	r5, r3
 8002b20:	4643      	mov	r3, r8
 8002b22:	18e3      	adds	r3, r4, r3
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	464b      	mov	r3, r9
 8002b28:	eb45 0303 	adc.w	r3, r5, r3
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	028b      	lsls	r3, r1, #10
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b44:	4621      	mov	r1, r4
 8002b46:	028a      	lsls	r2, r1, #10
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	61fa      	str	r2, [r7, #28]
 8002b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b58:	f7fd fe98 	bl	800088c <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3750      	adds	r7, #80	@ 0x50
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07b      	b.n	8002caa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bc2:	d009      	beq.n	8002bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
 8002bca:	e005      	b.n	8002bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fec8 	bl	8001988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5c:	ea42 0103 	orr.w	r1, r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0104 	and.w	r1, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	f003 0210 	and.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b088      	sub	sp, #32
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc2:	f7ff f83b 	bl	8001d3c <HAL_GetTick>
 8002cc6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d001      	beq.n	8002cdc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e12a      	b.n	8002f32 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Transmit+0x36>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e122      	b.n	8002f32 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_SPI_Transmit+0x48>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e11b      	b.n	8002f32 <HAL_SPI_Transmit+0x280>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d48:	d10f      	bne.n	8002d6a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d007      	beq.n	8002d88 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d90:	d152      	bne.n	8002e38 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_SPI_Transmit+0xee>
 8002d9a:	8b7b      	ldrh	r3, [r7, #26]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d145      	bne.n	8002e2c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	881a      	ldrh	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	1c9a      	adds	r2, r3, #2
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dc4:	e032      	b.n	8002e2c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d112      	bne.n	8002dfa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	881a      	ldrh	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	1c9a      	adds	r2, r3, #2
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002df8:	e018      	b.n	8002e2c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dfa:	f7fe ff9f 	bl	8001d3c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d803      	bhi.n	8002e12 <HAL_SPI_Transmit+0x160>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d102      	bne.n	8002e18 <HAL_SPI_Transmit+0x166>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e082      	b.n	8002f32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1c7      	bne.n	8002dc6 <HAL_SPI_Transmit+0x114>
 8002e36:	e053      	b.n	8002ee0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_Transmit+0x194>
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d147      	bne.n	8002ed6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e6c:	e033      	b.n	8002ed6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d113      	bne.n	8002ea4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ea2:	e018      	b.n	8002ed6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea4:	f7fe ff4a 	bl	8001d3c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d803      	bhi.n	8002ebc <HAL_SPI_Transmit+0x20a>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d102      	bne.n	8002ec2 <HAL_SPI_Transmit+0x210>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e02d      	b.n	8002f32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1c6      	bne.n	8002e6e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fa59 	bl	800339c <SPI_EndRxTxTransaction>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b08a      	sub	sp, #40	@ 0x28
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f4c:	f7fe fef6 	bl	8001d3c <HAL_GetTick>
 8002f50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d00c      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x4a>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f70:	d106      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x46>
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d001      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
 8002f82:	e17f      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x5c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x5c>
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e174      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x6e>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e16d      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d003      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	d007      	beq.n	8003018 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003020:	d17e      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_SPI_TransmitReceive+0xf6>
 800302a:	8afb      	ldrh	r3, [r7, #22]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d16c      	bne.n	800310a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003054:	e059      	b.n	800310a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d11b      	bne.n	800309c <HAL_SPI_TransmitReceive+0x162>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_SPI_TransmitReceive+0x162>
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	2b01      	cmp	r3, #1
 8003072:	d113      	bne.n	800309c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	1c9a      	adds	r2, r3, #2
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d119      	bne.n	80030de <HAL_SPI_TransmitReceive+0x1a4>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d014      	beq.n	80030de <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	b292      	uxth	r2, r2
 80030c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	1c9a      	adds	r2, r3, #2
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030da:	2301      	movs	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030de:	f7fe fe2d 	bl	8001d3c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d80d      	bhi.n	800310a <HAL_SPI_TransmitReceive+0x1d0>
 80030ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d009      	beq.n	800310a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0bc      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1a0      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x11c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d19b      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x11c>
 800311e:	e082      	b.n	8003226 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_SPI_TransmitReceive+0x1f4>
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d171      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003154:	e05d      	b.n	8003212 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d11c      	bne.n	800319e <HAL_SPI_TransmitReceive+0x264>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d017      	beq.n	800319e <HAL_SPI_TransmitReceive+0x264>
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	2b01      	cmp	r3, #1
 8003172:	d114      	bne.n	800319e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	7812      	ldrb	r2, [r2, #0]
 8003180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d119      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x2a6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d014      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031e0:	f7fe fdac 	bl	8001d3c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d803      	bhi.n	80031f8 <HAL_SPI_TransmitReceive+0x2be>
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d102      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x2c4>
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e038      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d19c      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x21c>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d197      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003226:	6a3a      	ldr	r2, [r7, #32]
 8003228:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f8b6 	bl	800339c <SPI_EndRxTxTransaction>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e01d      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3728      	adds	r7, #40	@ 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800329c:	f7fe fd4e 	bl	8001d3c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4413      	add	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ac:	f7fe fd46 	bl	8001d3c <HAL_GetTick>
 80032b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032b2:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	015b      	lsls	r3, r3, #5
 80032b8:	0d1b      	lsrs	r3, r3, #20
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c2:	e054      	b.n	800336e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d050      	beq.n	800336e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032cc:	f7fe fd36 	bl	8001d3c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d902      	bls.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d13d      	bne.n	800335e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032fa:	d111      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003304:	d004      	beq.n	8003310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330e:	d107      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800331e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003328:	d10f      	bne.n	800334a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e017      	b.n	800338e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3b01      	subs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d19b      	bne.n	80032c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000004 	.word	0x20000004

0800339c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2102      	movs	r1, #2
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff ff6a 	bl	800328c <SPI_WaitFlagStateUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e032      	b.n	8003434 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033ce:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <SPI_EndRxTxTransaction+0xa0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <SPI_EndRxTxTransaction+0xa4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	0d5b      	lsrs	r3, r3, #21
 80033da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ec:	d112      	bne.n	8003414 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff ff47 	bl	800328c <SPI_WaitFlagStateUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e00f      	b.n	8003434 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	3b01      	subs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b80      	cmp	r3, #128	@ 0x80
 800342c:	d0f2      	beq.n	8003414 <SPI_EndRxTxTransaction+0x78>
 800342e:	e000      	b.n	8003432 <SPI_EndRxTxTransaction+0x96>
        break;
 8003430:	bf00      	nop
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000004 	.word	0x20000004
 8003440:	165e9f81 	.word	0x165e9f81

08003444 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003448:	4904      	ldr	r1, [pc, #16]	@ (800345c <MX_FATFS_Init+0x18>)
 800344a:	4805      	ldr	r0, [pc, #20]	@ (8003460 <MX_FATFS_Init+0x1c>)
 800344c:	f000 ff12 	bl	8004274 <FATFS_LinkDriver>
 8003450:	4603      	mov	r3, r0
 8003452:	461a      	mov	r2, r3
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <MX_FATFS_Init+0x20>)
 8003456:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20001558 	.word	0x20001558
 8003460:	20000010 	.word	0x20000010
 8003464:	20001554 	.word	0x20001554

08003468 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fd37 	bl	8000ee8 <SD_disk_initialize>
 800347a:	4603      	mov	r3, r0
 800347c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fe14 	bl	80010c0 <SD_disk_status>
 8003498:	4603      	mov	r3, r0
 800349a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80034b4:	7bf8      	ldrb	r0, [r7, #15]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	f7fd fe16 	bl	80010ec <SD_disk_read>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80034dc:	7bf8      	ldrb	r0, [r7, #15]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	f7fd fe6c 	bl	80011c0 <SD_disk_write>
 80034e8:	4603      	mov	r3, r0
 80034ea:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	603a      	str	r2, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
 8003500:	460b      	mov	r3, r1
 8003502:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	79b9      	ldrb	r1, [r7, #6]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fedc 	bl	80012c8 <SD_disk_ioctl>
 8003510:	4603      	mov	r3, r0
 8003512:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4a08      	ldr	r2, [pc, #32]	@ (800354c <disk_status+0x30>)
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	4905      	ldr	r1, [pc, #20]	@ (800354c <disk_status+0x30>)
 8003536:	440a      	add	r2, r1
 8003538:	7a12      	ldrb	r2, [r2, #8]
 800353a:	4610      	mov	r0, r2
 800353c:	4798      	blx	r3
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20001784 	.word	0x20001784

08003550 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4a0e      	ldr	r2, [pc, #56]	@ (800359c <disk_initialize+0x4c>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d114      	bne.n	8003592 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	4a0c      	ldr	r2, [pc, #48]	@ (800359c <disk_initialize+0x4c>)
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	79fa      	ldrb	r2, [r7, #7]
 8003576:	4909      	ldr	r1, [pc, #36]	@ (800359c <disk_initialize+0x4c>)
 8003578:	440a      	add	r2, r1
 800357a:	7a12      	ldrb	r2, [r2, #8]
 800357c:	4610      	mov	r0, r2
 800357e:	4798      	blx	r3
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	4a03      	ldr	r2, [pc, #12]	@ (800359c <disk_initialize+0x4c>)
 800358e:	2101      	movs	r1, #1
 8003590:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20001784 	.word	0x20001784

080035a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <disk_read+0x3c>)
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	689c      	ldr	r4, [r3, #8]
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	4a07      	ldr	r2, [pc, #28]	@ (80035dc <disk_read+0x3c>)
 80035c0:	4413      	add	r3, r2
 80035c2:	7a18      	ldrb	r0, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	47a0      	blx	r4
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	bf00      	nop
 80035dc:	20001784 	.word	0x20001784

080035e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4603      	mov	r3, r0
 80035ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <disk_write+0x3c>)
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68dc      	ldr	r4, [r3, #12]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	4a07      	ldr	r2, [pc, #28]	@ (800361c <disk_write+0x3c>)
 8003600:	4413      	add	r3, r2
 8003602:	7a18      	ldrb	r0, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	47a0      	blx	r4
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003610:	7dfb      	ldrb	r3, [r7, #23]
}
 8003612:	4618      	mov	r0, r3
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	bf00      	nop
 800361c:	20001784 	.word	0x20001784

08003620 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	603a      	str	r2, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
 800362c:	460b      	mov	r3, r1
 800362e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	4a09      	ldr	r2, [pc, #36]	@ (8003658 <disk_ioctl+0x38>)
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	79fa      	ldrb	r2, [r7, #7]
 800363e:	4906      	ldr	r1, [pc, #24]	@ (8003658 <disk_ioctl+0x38>)
 8003640:	440a      	add	r2, r1
 8003642:	7a10      	ldrb	r0, [r2, #8]
 8003644:	79b9      	ldrb	r1, [r7, #6]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	4798      	blx	r3
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]
  return res;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20001784 	.word	0x20001784

0800365c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3301      	adds	r3, #1
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21b      	sxth	r3, r3
 800367c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800367e:	89fb      	ldrh	r3, [r7, #14]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3303      	adds	r3, #3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	3202      	adds	r2, #2
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	3201      	adds	r2, #1
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80036c4:	68fb      	ldr	r3, [r7, #12]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e010      	b.n	8003704 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80036e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <clear_lock+0x44>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d105      	bne.n	80036fe <clear_lock+0x2a>
 80036f2:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <clear_lock+0x44>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	4413      	add	r3, r2
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3301      	adds	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d9eb      	bls.n	80036e2 <clear_lock+0xe>
	}
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	20001564 	.word	0x20001564

0800371c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d034      	beq.n	800379a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003734:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7858      	ldrb	r0, [r3, #1]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003740:	2301      	movs	r3, #1
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	f7ff ff4c 	bl	80035e0 <disk_write>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <sync_window+0x38>
			res = FR_DISK_ERR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e022      	b.n	800379a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	429a      	cmp	r2, r3
 8003768:	d217      	bcs.n	800379a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	789b      	ldrb	r3, [r3, #2]
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e010      	b.n	8003794 <sync_window+0x78>
					wsect += fs->fsize;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4413      	add	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7858      	ldrb	r0, [r3, #1]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003786:	2301      	movs	r3, #1
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	f7ff ff29 	bl	80035e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	3b01      	subs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d8eb      	bhi.n	8003772 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d01b      	beq.n	80037f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ffad 	bl	800371c <sync_window>
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d113      	bne.n	80037f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7858      	ldrb	r0, [r3, #1]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80037d6:	2301      	movs	r3, #1
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	f7ff fee1 	bl	80035a0 <disk_read>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d904      	bls.n	800381e <get_fat+0x20>
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <get_fat+0x26>
		val = 1;	/* Internal error */
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e0ba      	b.n	800399a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	f000 8082 	beq.w	8003938 <get_fat+0x13a>
 8003834:	2b03      	cmp	r3, #3
 8003836:	f300 80a6 	bgt.w	8003986 <get_fat+0x188>
 800383a:	2b01      	cmp	r3, #1
 800383c:	d002      	beq.n	8003844 <get_fat+0x46>
 800383e:	2b02      	cmp	r3, #2
 8003840:	d055      	beq.n	80038ee <get_fat+0xf0>
 8003842:	e0a0      	b.n	8003986 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	899b      	ldrh	r3, [r3, #12]
 800385a:	4619      	mov	r1, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003862:	4413      	add	r3, r2
 8003864:	4619      	mov	r1, r3
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f7ff ff9c 	bl	80037a4 <move_window>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 808c 	bne.w	800398c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	60fa      	str	r2, [r7, #12]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	8992      	ldrh	r2, [r2, #12]
 800387e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003882:	fb01 f202 	mul.w	r2, r1, r2
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003890:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	899b      	ldrh	r3, [r3, #12]
 800389a:	4619      	mov	r1, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a2:	4413      	add	r3, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	6938      	ldr	r0, [r7, #16]
 80038a8:	f7ff ff7c 	bl	80037a4 <move_window>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d16e      	bne.n	8003990 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	899b      	ldrh	r3, [r3, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80038be:	fb01 f202 	mul.w	r2, r1, r2
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <get_fat+0xe6>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	e002      	b.n	80038ea <get_fat+0xec>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	617b      	str	r3, [r7, #20]
			break;
 80038ec:	e055      	b.n	800399a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	899b      	ldrh	r3, [r3, #12]
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4619      	mov	r1, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003902:	4413      	add	r3, r2
 8003904:	4619      	mov	r1, r3
 8003906:	6938      	ldr	r0, [r7, #16]
 8003908:	f7ff ff4c 	bl	80037a4 <move_window>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d140      	bne.n	8003994 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	8992      	ldrh	r2, [r2, #12]
 8003920:	fbb3 f0f2 	udiv	r0, r3, r2
 8003924:	fb00 f202 	mul.w	r2, r0, r2
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	440b      	add	r3, r1
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fe95 	bl	800365c <ld_word>
 8003932:	4603      	mov	r3, r0
 8003934:	617b      	str	r3, [r7, #20]
			break;
 8003936:	e030      	b.n	800399a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	899b      	ldrh	r3, [r3, #12]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	b29b      	uxth	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	fbb3 f3f1 	udiv	r3, r3, r1
 800394c:	4413      	add	r3, r2
 800394e:	4619      	mov	r1, r3
 8003950:	6938      	ldr	r0, [r7, #16]
 8003952:	f7ff ff27 	bl	80037a4 <move_window>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11d      	bne.n	8003998 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	8992      	ldrh	r2, [r2, #12]
 800396a:	fbb3 f0f2 	udiv	r0, r3, r2
 800396e:	fb00 f202 	mul.w	r2, r0, r2
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	440b      	add	r3, r1
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fe88 	bl	800368c <ld_dword>
 800397c:	4603      	mov	r3, r0
 800397e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003982:	617b      	str	r3, [r7, #20]
			break;
 8003984:	e009      	b.n	800399a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003986:	2301      	movs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e006      	b.n	800399a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800398c:	bf00      	nop
 800398e:	e004      	b.n	800399a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003990:	bf00      	nop
 8003992:	e002      	b.n	800399a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003998:	bf00      	nop
		}
	}

	return val;
 800399a:	697b      	ldr	r3, [r7, #20]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d031      	beq.n	8003a1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e002      	b.n	80039c8 <get_ldnumber+0x24>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b1f      	cmp	r3, #31
 80039ce:	d903      	bls.n	80039d8 <get_ldnumber+0x34>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b3a      	cmp	r3, #58	@ 0x3a
 80039d6:	d1f4      	bne.n	80039c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80039de:	d11c      	bne.n	8003a1a <get_ldnumber+0x76>
			tp = *path;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	60fa      	str	r2, [r7, #12]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3b30      	subs	r3, #48	@ 0x30
 80039f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b09      	cmp	r3, #9
 80039f6:	d80e      	bhi.n	8003a16 <get_ldnumber+0x72>
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d10a      	bne.n	8003a16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <get_ldnumber+0x72>
					vol = (int)i;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	e002      	b.n	8003a20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003a1e:	693b      	ldr	r3, [r7, #16]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	70da      	strb	r2, [r3, #3]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a42:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff feac 	bl	80037a4 <move_window>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <check_fs+0x2a>
 8003a52:	2304      	movs	r3, #4
 8003a54:	e038      	b.n	8003ac8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3338      	adds	r3, #56	@ 0x38
 8003a5a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fdfc 	bl	800365c <ld_word>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <check_fs+0x48>
 8003a70:	2303      	movs	r3, #3
 8003a72:	e029      	b.n	8003ac8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7a:	2be9      	cmp	r3, #233	@ 0xe9
 8003a7c:	d009      	beq.n	8003a92 <check_fs+0x66>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a84:	2beb      	cmp	r3, #235	@ 0xeb
 8003a86:	d11e      	bne.n	8003ac6 <check_fs+0x9a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003a8e:	2b90      	cmp	r3, #144	@ 0x90
 8003a90:	d119      	bne.n	8003ac6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3338      	adds	r3, #56	@ 0x38
 8003a96:	3336      	adds	r3, #54	@ 0x36
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fdf7 	bl	800368c <ld_dword>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <check_fs+0xa4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <check_fs+0x82>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e00c      	b.n	8003ac8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3338      	adds	r3, #56	@ 0x38
 8003ab2:	3352      	adds	r3, #82	@ 0x52
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fde9 	bl	800368c <ld_dword>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4a05      	ldr	r2, [pc, #20]	@ (8003ad4 <check_fs+0xa8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <check_fs+0x9a>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003ac6:	2302      	movs	r3, #2
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	00544146 	.word	0x00544146
 8003ad4:	33544146 	.word	0x33544146

08003ad8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b096      	sub	sp, #88	@ 0x58
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ff59 	bl	80039a4 <get_ldnumber>
 8003af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da01      	bge.n	8003afe <find_volume+0x26>
 8003afa:	230b      	movs	r3, #11
 8003afc:	e265      	b.n	8003fca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003afe:	4a9f      	ldr	r2, [pc, #636]	@ (8003d7c <find_volume+0x2a4>)
 8003b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <find_volume+0x3a>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	e25b      	b.n	8003fca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01a      	beq.n	8003b5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fcf5 	bl	800351c <disk_status>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003b38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10c      	bne.n	8003b5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <find_volume+0x82>
 8003b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003b56:	230a      	movs	r3, #10
 8003b58:	e237      	b.n	8003fca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e235      	b.n	8003fca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fced 	bl	8003550 <disk_initialize>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e21e      	b.n	8003fca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <find_volume+0xca>
 8003b92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	e213      	b.n	8003fca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba4:	7858      	ldrb	r0, [r3, #1]
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	330c      	adds	r3, #12
 8003baa:	461a      	mov	r2, r3
 8003bac:	2102      	movs	r1, #2
 8003bae:	f7ff fd37 	bl	8003620 <disk_ioctl>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <find_volume+0xe4>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e206      	b.n	8003fca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbe:	899b      	ldrh	r3, [r3, #12]
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc4:	d80d      	bhi.n	8003be2 <find_volume+0x10a>
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	899b      	ldrh	r3, [r3, #12]
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bce:	d308      	bcc.n	8003be2 <find_volume+0x10a>
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	899b      	ldrh	r3, [r3, #12]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	899b      	ldrh	r3, [r3, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <find_volume+0x10e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1f1      	b.n	8003fca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003bea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003bec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bee:	f7ff ff1d 	bl	8003a2c <check_fs>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d149      	bne.n	8003c94 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003c00:	2300      	movs	r3, #0
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c04:	e01e      	b.n	8003c44 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8003c14:	4413      	add	r3, r2
 8003c16:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <find_volume+0x158>
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	3308      	adds	r3, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd30 	bl	800368c <ld_dword>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	e000      	b.n	8003c32 <find_volume+0x15a>
 8003c30:	2200      	movs	r2, #0
 8003c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	3358      	adds	r3, #88	@ 0x58
 8003c38:	443b      	add	r3, r7
 8003c3a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c40:	3301      	adds	r3, #1
 8003c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d9dd      	bls.n	8003c06 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <find_volume+0x182>
 8003c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c56:	3b01      	subs	r3, #1
 8003c58:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3358      	adds	r3, #88	@ 0x58
 8003c60:	443b      	add	r3, r7
 8003c62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003c66:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <find_volume+0x1a2>
 8003c6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c72:	f7ff fedb 	bl	8003a2c <check_fs>
 8003c76:	4603      	mov	r3, r0
 8003c78:	e000      	b.n	8003c7c <find_volume+0x1a4>
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003c80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d905      	bls.n	8003c94 <find_volume+0x1bc>
 8003c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d9e2      	bls.n	8003c5a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003c94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d101      	bne.n	8003ca0 <find_volume+0x1c8>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e194      	b.n	8003fca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003ca0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d901      	bls.n	8003cac <find_volume+0x1d4>
 8003ca8:	230d      	movs	r3, #13
 8003caa:	e18e      	b.n	8003fca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	3338      	adds	r3, #56	@ 0x38
 8003cb0:	330b      	adds	r3, #11
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fcd2 	bl	800365c <ld_word>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbe:	899b      	ldrh	r3, [r3, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <find_volume+0x1f0>
 8003cc4:	230d      	movs	r3, #13
 8003cc6:	e180      	b.n	8003fca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cca:	3338      	adds	r3, #56	@ 0x38
 8003ccc:	3316      	adds	r3, #22
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fcc4 	bl	800365c <ld_word>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <find_volume+0x214>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	3338      	adds	r3, #56	@ 0x38
 8003ce2:	3324      	adds	r3, #36	@ 0x24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fcd1 	bl	800368c <ld_dword>
 8003cea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cf0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	789b      	ldrb	r3, [r3, #2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d005      	beq.n	8003d10 <find_volume+0x238>
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	789b      	ldrb	r3, [r3, #2]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d001      	beq.n	8003d10 <find_volume+0x238>
 8003d0c:	230d      	movs	r3, #13
 8003d0e:	e15c      	b.n	8003fca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d12:	789b      	ldrb	r3, [r3, #2]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d24:	461a      	mov	r2, r3
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	895b      	ldrh	r3, [r3, #10]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <find_volume+0x26c>
 8003d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d34:	895b      	ldrh	r3, [r3, #10]
 8003d36:	461a      	mov	r2, r3
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	895b      	ldrh	r3, [r3, #10]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <find_volume+0x270>
 8003d44:	230d      	movs	r3, #13
 8003d46:	e140      	b.n	8003fca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	3338      	adds	r3, #56	@ 0x38
 8003d4c:	3311      	adds	r3, #17
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fc84 	bl	800365c <ld_word>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5e:	891b      	ldrh	r3, [r3, #8]
 8003d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d62:	8992      	ldrh	r2, [r2, #12]
 8003d64:	0952      	lsrs	r2, r2, #5
 8003d66:	b292      	uxth	r2, r2
 8003d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d6c:	fb01 f202 	mul.w	r2, r1, r2
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <find_volume+0x2a8>
 8003d78:	230d      	movs	r3, #13
 8003d7a:	e126      	b.n	8003fca <find_volume+0x4f2>
 8003d7c:	2000155c 	.word	0x2000155c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	3338      	adds	r3, #56	@ 0x38
 8003d84:	3313      	adds	r3, #19
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fc68 	bl	800365c <ld_word>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <find_volume+0x2cc>
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	3338      	adds	r3, #56	@ 0x38
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fc75 	bl	800368c <ld_dword>
 8003da2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da6:	3338      	adds	r3, #56	@ 0x38
 8003da8:	330e      	adds	r3, #14
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fc56 	bl	800365c <ld_word>
 8003db0:	4603      	mov	r3, r0
 8003db2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003db4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <find_volume+0x2e6>
 8003dba:	230d      	movs	r3, #13
 8003dbc:	e105      	b.n	8003fca <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003dbe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc2:	4413      	add	r3, r2
 8003dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dc6:	8911      	ldrh	r1, [r2, #8]
 8003dc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dca:	8992      	ldrh	r2, [r2, #12]
 8003dcc:	0952      	lsrs	r2, r2, #5
 8003dce:	b292      	uxth	r2, r2
 8003dd0:	fbb1 f2f2 	udiv	r2, r1, r2
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d201      	bcs.n	8003de6 <find_volume+0x30e>
 8003de2:	230d      	movs	r3, #13
 8003de4:	e0f1      	b.n	8003fca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dee:	8952      	ldrh	r2, [r2, #10]
 8003df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <find_volume+0x328>
 8003dfc:	230d      	movs	r3, #13
 8003dfe:	e0e4      	b.n	8003fca <find_volume+0x4f2>
		fmt = FS_FAT32;
 8003e00:	2303      	movs	r3, #3
 8003e02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d802      	bhi.n	8003e16 <find_volume+0x33e>
 8003e10:	2302      	movs	r3, #2
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d802      	bhi.n	8003e26 <find_volume+0x34e>
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003e34:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e38:	441a      	add	r2, r3
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8003e3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	441a      	add	r2, r3
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8003e48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d11e      	bne.n	8003e8e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	3338      	adds	r3, #56	@ 0x38
 8003e54:	332a      	adds	r3, #42	@ 0x2a
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fc00 	bl	800365c <ld_word>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <find_volume+0x38e>
 8003e62:	230d      	movs	r3, #13
 8003e64:	e0b1      	b.n	8003fca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	891b      	ldrh	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <find_volume+0x39a>
 8003e6e:	230d      	movs	r3, #13
 8003e70:	e0ab      	b.n	8003fca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e74:	3338      	adds	r3, #56	@ 0x38
 8003e76:	332c      	adds	r3, #44	@ 0x2c
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fc07 	bl	800368c <ld_dword>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e82:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8c:	e01f      	b.n	8003ece <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	891b      	ldrh	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <find_volume+0x3c2>
 8003e96:	230d      	movs	r3, #13
 8003e98:	e097      	b.n	8003fca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea0:	441a      	add	r2, r3
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d103      	bne.n	8003eb6 <find_volume+0x3de>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	e00a      	b.n	8003ecc <find_volume+0x3f4>
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	69da      	ldr	r2, [r3, #28]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	085a      	lsrs	r2, r3, #1
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003ecc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	899b      	ldrh	r3, [r3, #12]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eda:	440b      	add	r3, r1
 8003edc:	3b01      	subs	r3, #1
 8003ede:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ee0:	8989      	ldrh	r1, [r1, #12]
 8003ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d201      	bcs.n	8003eee <find_volume+0x416>
 8003eea:	230d      	movs	r3, #13
 8003eec:	e06d      	b.n	8003fca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	619a      	str	r2, [r3, #24]
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	2280      	movs	r2, #128	@ 0x80
 8003f02:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003f04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d149      	bne.n	8003fa0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0e:	3338      	adds	r3, #56	@ 0x38
 8003f10:	3330      	adds	r3, #48	@ 0x30
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fba2 	bl	800365c <ld_word>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d140      	bne.n	8003fa0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f20:	3301      	adds	r3, #1
 8003f22:	4619      	mov	r1, r3
 8003f24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f26:	f7ff fc3d 	bl	80037a4 <move_window>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d137      	bne.n	8003fa0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	2200      	movs	r2, #0
 8003f34:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f38:	3338      	adds	r3, #56	@ 0x38
 8003f3a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fb8c 	bl	800365c <ld_word>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d127      	bne.n	8003fa0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	3338      	adds	r3, #56	@ 0x38
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fb99 	bl	800368c <ld_dword>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <find_volume+0x4fc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d11e      	bne.n	8003fa0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	3338      	adds	r3, #56	@ 0x38
 8003f66:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fb8e 	bl	800368c <ld_dword>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4a19      	ldr	r2, [pc, #100]	@ (8003fd8 <find_volume+0x500>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7a:	3338      	adds	r3, #56	@ 0x38
 8003f7c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fb83 	bl	800368c <ld_dword>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8e:	3338      	adds	r3, #56	@ 0x38
 8003f90:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fb79 	bl	800368c <ld_dword>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003fa6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <find_volume+0x504>)
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fdc <find_volume+0x504>)
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <find_volume+0x504>)
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	4a08      	ldr	r2, [pc, #32]	@ (8003fe0 <find_volume+0x508>)
 8003fc0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8003fc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003fc4:	f7ff fb86 	bl	80036d4 <clear_lock>
#endif
	return FR_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3758      	adds	r7, #88	@ 0x58
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	41615252 	.word	0x41615252
 8003fd8:	61417272 	.word	0x61417272
 8003fdc:	20001560 	.word	0x20001560
 8003fe0:	20001584 	.word	0x20001584

08003fe4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003ff6:	f107 0310 	add.w	r3, r7, #16
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fcd2 	bl	80039a4 <get_ldnumber>
 8004000:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	da01      	bge.n	800400c <f_mount+0x28>
 8004008:	230b      	movs	r3, #11
 800400a:	e02b      	b.n	8004064 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800400c:	4a17      	ldr	r2, [pc, #92]	@ (800406c <f_mount+0x88>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800401c:	69b8      	ldr	r0, [r7, #24]
 800401e:	f7ff fb59 	bl	80036d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	490d      	ldr	r1, [pc, #52]	@ (800406c <f_mount+0x88>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <f_mount+0x66>
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <f_mount+0x6a>
 800404a:	2300      	movs	r3, #0
 800404c:	e00a      	b.n	8004064 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800404e:	f107 010c 	add.w	r1, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	2200      	movs	r2, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fd3d 	bl	8003ad8 <find_volume>
 800405e:	4603      	mov	r3, r0
 8004060:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	2000155c 	.word	0x2000155c

08004070 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b092      	sub	sp, #72	@ 0x48
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800407c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	2200      	movs	r2, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fd26 	bl	8003ad8 <find_volume>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8004092:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 8099 	bne.w	80041ce <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800409c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	3b02      	subs	r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d804      	bhi.n	80040ba <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e089      	b.n	80041ce <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80040be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d128      	bne.n	8004118 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80040c6:	2302      	movs	r3, #2
 80040c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80040ce:	f107 0314 	add.w	r3, r7, #20
 80040d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fb92 	bl	80037fe <get_fat>
 80040da:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d103      	bne.n	80040ec <f_getfree+0x7c>
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80040ea:	e063      	b.n	80041b4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d103      	bne.n	80040fa <f_getfree+0x8a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80040f8:	e05c      	b.n	80041b4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <f_getfree+0x96>
 8004100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004102:	3301      	adds	r3, #1
 8004104:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8004106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004108:	3301      	adds	r3, #1
 800410a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004112:	429a      	cmp	r2, r3
 8004114:	d3db      	bcc.n	80040ce <f_getfree+0x5e>
 8004116:	e04d      	b.n	80041b4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
 8004128:	2300      	movs	r3, #0
 800412a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800412c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412e:	2b00      	cmp	r3, #0
 8004130:	d113      	bne.n	800415a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8004132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	63ba      	str	r2, [r7, #56]	@ 0x38
 800413a:	4619      	mov	r1, r3
 800413c:	f7ff fb32 	bl	80037a4 <move_window>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8004146:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800414a:	2b00      	cmp	r3, #0
 800414c:	d131      	bne.n	80041b2 <f_getfree+0x142>
							p = fs->win;
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	3338      	adds	r3, #56	@ 0x38
 8004152:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	899b      	ldrh	r3, [r3, #12]
 8004158:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d10f      	bne.n	8004182 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8004162:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004164:	f7ff fa7a 	bl	800365c <ld_word>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <f_getfree+0x104>
 800416e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004170:	3301      	adds	r3, #1
 8004172:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	3302      	adds	r3, #2
 8004178:	633b      	str	r3, [r7, #48]	@ 0x30
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	3b02      	subs	r3, #2
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004180:	e010      	b.n	80041a4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8004182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004184:	f7ff fa82 	bl	800368c <ld_dword>
 8004188:	4603      	mov	r3, r0
 800418a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <f_getfree+0x128>
 8004192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004194:	3301      	adds	r3, #1
 8004196:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	3304      	adds	r3, #4
 800419c:	633b      	str	r3, [r7, #48]	@ 0x30
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	3b04      	subs	r3, #4
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80041a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a6:	3b01      	subs	r3, #1
 80041a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1bd      	bne.n	800412c <f_getfree+0xbc>
 80041b0:	e000      	b.n	80041b4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80041b2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041b8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041be:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	791a      	ldrb	r2, [r3, #4]
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80041ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3748      	adds	r7, #72	@ 0x48
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80041f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 80041f4:	7a5b      	ldrb	r3, [r3, #9]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d131      	bne.n	8004260 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80041fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 80041fe:	7a5b      	ldrb	r3, [r3, #9]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800420a:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 800420c:	7a5b      	ldrb	r3, [r3, #9]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 800421c:	7a5b      	ldrb	r3, [r3, #9]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 8004224:	4413      	add	r3, r2
 8004226:	79fa      	ldrb	r2, [r7, #7]
 8004228:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800422a:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 800422c:	7a5b      	ldrb	r3, [r3, #9]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	b2d1      	uxtb	r1, r2
 8004234:	4a0e      	ldr	r2, [pc, #56]	@ (8004270 <FATFS_LinkDriverEx+0x94>)
 8004236:	7251      	strb	r1, [r2, #9]
 8004238:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800423a:	7dbb      	ldrb	r3, [r7, #22]
 800423c:	3330      	adds	r3, #48	@ 0x30
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3301      	adds	r3, #1
 8004248:	223a      	movs	r2, #58	@ 0x3a
 800424a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3302      	adds	r3, #2
 8004250:	222f      	movs	r2, #47	@ 0x2f
 8004252:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3303      	adds	r3, #3
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
}
 8004262:	4618      	mov	r0, r3
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20001784 	.word	0x20001784

08004274 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ffaa 	bl	80041dc <FATFS_LinkDriverEx>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <std>:
 8004294:	2300      	movs	r3, #0
 8004296:	b510      	push	{r4, lr}
 8004298:	4604      	mov	r4, r0
 800429a:	e9c0 3300 	strd	r3, r3, [r0]
 800429e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042a2:	6083      	str	r3, [r0, #8]
 80042a4:	8181      	strh	r1, [r0, #12]
 80042a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042a8:	81c2      	strh	r2, [r0, #14]
 80042aa:	6183      	str	r3, [r0, #24]
 80042ac:	4619      	mov	r1, r3
 80042ae:	2208      	movs	r2, #8
 80042b0:	305c      	adds	r0, #92	@ 0x5c
 80042b2:	f000 f906 	bl	80044c2 <memset>
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <std+0x58>)
 80042b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <std+0x5c>)
 80042bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <std+0x60>)
 80042c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <std+0x64>)
 80042c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <std+0x68>)
 80042c8:	6224      	str	r4, [r4, #32]
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d006      	beq.n	80042dc <std+0x48>
 80042ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042d2:	4294      	cmp	r4, r2
 80042d4:	d002      	beq.n	80042dc <std+0x48>
 80042d6:	33d0      	adds	r3, #208	@ 0xd0
 80042d8:	429c      	cmp	r4, r3
 80042da:	d105      	bne.n	80042e8 <std+0x54>
 80042dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e4:	f000 b966 	b.w	80045b4 <__retarget_lock_init_recursive>
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	bf00      	nop
 80042ec:	0800443d 	.word	0x0800443d
 80042f0:	0800445f 	.word	0x0800445f
 80042f4:	08004497 	.word	0x08004497
 80042f8:	080044bb 	.word	0x080044bb
 80042fc:	20001790 	.word	0x20001790

08004300 <stdio_exit_handler>:
 8004300:	4a02      	ldr	r2, [pc, #8]	@ (800430c <stdio_exit_handler+0xc>)
 8004302:	4903      	ldr	r1, [pc, #12]	@ (8004310 <stdio_exit_handler+0x10>)
 8004304:	4803      	ldr	r0, [pc, #12]	@ (8004314 <stdio_exit_handler+0x14>)
 8004306:	f000 b869 	b.w	80043dc <_fwalk_sglue>
 800430a:	bf00      	nop
 800430c:	20000024 	.word	0x20000024
 8004310:	08004e55 	.word	0x08004e55
 8004314:	20000034 	.word	0x20000034

08004318 <cleanup_stdio>:
 8004318:	6841      	ldr	r1, [r0, #4]
 800431a:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <cleanup_stdio+0x34>)
 800431c:	4299      	cmp	r1, r3
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	d001      	beq.n	8004328 <cleanup_stdio+0x10>
 8004324:	f000 fd96 	bl	8004e54 <_fflush_r>
 8004328:	68a1      	ldr	r1, [r4, #8]
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <cleanup_stdio+0x38>)
 800432c:	4299      	cmp	r1, r3
 800432e:	d002      	beq.n	8004336 <cleanup_stdio+0x1e>
 8004330:	4620      	mov	r0, r4
 8004332:	f000 fd8f 	bl	8004e54 <_fflush_r>
 8004336:	68e1      	ldr	r1, [r4, #12]
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <cleanup_stdio+0x3c>)
 800433a:	4299      	cmp	r1, r3
 800433c:	d004      	beq.n	8004348 <cleanup_stdio+0x30>
 800433e:	4620      	mov	r0, r4
 8004340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004344:	f000 bd86 	b.w	8004e54 <_fflush_r>
 8004348:	bd10      	pop	{r4, pc}
 800434a:	bf00      	nop
 800434c:	20001790 	.word	0x20001790
 8004350:	200017f8 	.word	0x200017f8
 8004354:	20001860 	.word	0x20001860

08004358 <global_stdio_init.part.0>:
 8004358:	b510      	push	{r4, lr}
 800435a:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <global_stdio_init.part.0+0x30>)
 800435c:	4c0b      	ldr	r4, [pc, #44]	@ (800438c <global_stdio_init.part.0+0x34>)
 800435e:	4a0c      	ldr	r2, [pc, #48]	@ (8004390 <global_stdio_init.part.0+0x38>)
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	4620      	mov	r0, r4
 8004364:	2200      	movs	r2, #0
 8004366:	2104      	movs	r1, #4
 8004368:	f7ff ff94 	bl	8004294 <std>
 800436c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004370:	2201      	movs	r2, #1
 8004372:	2109      	movs	r1, #9
 8004374:	f7ff ff8e 	bl	8004294 <std>
 8004378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800437c:	2202      	movs	r2, #2
 800437e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004382:	2112      	movs	r1, #18
 8004384:	f7ff bf86 	b.w	8004294 <std>
 8004388:	200018c8 	.word	0x200018c8
 800438c:	20001790 	.word	0x20001790
 8004390:	08004301 	.word	0x08004301

08004394 <__sfp_lock_acquire>:
 8004394:	4801      	ldr	r0, [pc, #4]	@ (800439c <__sfp_lock_acquire+0x8>)
 8004396:	f000 b90e 	b.w	80045b6 <__retarget_lock_acquire_recursive>
 800439a:	bf00      	nop
 800439c:	200018d1 	.word	0x200018d1

080043a0 <__sfp_lock_release>:
 80043a0:	4801      	ldr	r0, [pc, #4]	@ (80043a8 <__sfp_lock_release+0x8>)
 80043a2:	f000 b909 	b.w	80045b8 <__retarget_lock_release_recursive>
 80043a6:	bf00      	nop
 80043a8:	200018d1 	.word	0x200018d1

080043ac <__sinit>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	4604      	mov	r4, r0
 80043b0:	f7ff fff0 	bl	8004394 <__sfp_lock_acquire>
 80043b4:	6a23      	ldr	r3, [r4, #32]
 80043b6:	b11b      	cbz	r3, 80043c0 <__sinit+0x14>
 80043b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043bc:	f7ff bff0 	b.w	80043a0 <__sfp_lock_release>
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <__sinit+0x28>)
 80043c2:	6223      	str	r3, [r4, #32]
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <__sinit+0x2c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f5      	bne.n	80043b8 <__sinit+0xc>
 80043cc:	f7ff ffc4 	bl	8004358 <global_stdio_init.part.0>
 80043d0:	e7f2      	b.n	80043b8 <__sinit+0xc>
 80043d2:	bf00      	nop
 80043d4:	08004319 	.word	0x08004319
 80043d8:	200018c8 	.word	0x200018c8

080043dc <_fwalk_sglue>:
 80043dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e0:	4607      	mov	r7, r0
 80043e2:	4688      	mov	r8, r1
 80043e4:	4614      	mov	r4, r2
 80043e6:	2600      	movs	r6, #0
 80043e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043ec:	f1b9 0901 	subs.w	r9, r9, #1
 80043f0:	d505      	bpl.n	80043fe <_fwalk_sglue+0x22>
 80043f2:	6824      	ldr	r4, [r4, #0]
 80043f4:	2c00      	cmp	r4, #0
 80043f6:	d1f7      	bne.n	80043e8 <_fwalk_sglue+0xc>
 80043f8:	4630      	mov	r0, r6
 80043fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d907      	bls.n	8004414 <_fwalk_sglue+0x38>
 8004404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004408:	3301      	adds	r3, #1
 800440a:	d003      	beq.n	8004414 <_fwalk_sglue+0x38>
 800440c:	4629      	mov	r1, r5
 800440e:	4638      	mov	r0, r7
 8004410:	47c0      	blx	r8
 8004412:	4306      	orrs	r6, r0
 8004414:	3568      	adds	r5, #104	@ 0x68
 8004416:	e7e9      	b.n	80043ec <_fwalk_sglue+0x10>

08004418 <iprintf>:
 8004418:	b40f      	push	{r0, r1, r2, r3}
 800441a:	b507      	push	{r0, r1, r2, lr}
 800441c:	4906      	ldr	r1, [pc, #24]	@ (8004438 <iprintf+0x20>)
 800441e:	ab04      	add	r3, sp, #16
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	f853 2b04 	ldr.w	r2, [r3], #4
 8004426:	6881      	ldr	r1, [r0, #8]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	f000 f9e9 	bl	8004800 <_vfiprintf_r>
 800442e:	b003      	add	sp, #12
 8004430:	f85d eb04 	ldr.w	lr, [sp], #4
 8004434:	b004      	add	sp, #16
 8004436:	4770      	bx	lr
 8004438:	20000030 	.word	0x20000030

0800443c <__sread>:
 800443c:	b510      	push	{r4, lr}
 800443e:	460c      	mov	r4, r1
 8004440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004444:	f000 f868 	bl	8004518 <_read_r>
 8004448:	2800      	cmp	r0, #0
 800444a:	bfab      	itete	ge
 800444c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800444e:	89a3      	ldrhlt	r3, [r4, #12]
 8004450:	181b      	addge	r3, r3, r0
 8004452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004456:	bfac      	ite	ge
 8004458:	6563      	strge	r3, [r4, #84]	@ 0x54
 800445a:	81a3      	strhlt	r3, [r4, #12]
 800445c:	bd10      	pop	{r4, pc}

0800445e <__swrite>:
 800445e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004462:	461f      	mov	r7, r3
 8004464:	898b      	ldrh	r3, [r1, #12]
 8004466:	05db      	lsls	r3, r3, #23
 8004468:	4605      	mov	r5, r0
 800446a:	460c      	mov	r4, r1
 800446c:	4616      	mov	r6, r2
 800446e:	d505      	bpl.n	800447c <__swrite+0x1e>
 8004470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004474:	2302      	movs	r3, #2
 8004476:	2200      	movs	r2, #0
 8004478:	f000 f83c 	bl	80044f4 <_lseek_r>
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	4632      	mov	r2, r6
 800448a:	463b      	mov	r3, r7
 800448c:	4628      	mov	r0, r5
 800448e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	f000 b853 	b.w	800453c <_write_r>

08004496 <__sseek>:
 8004496:	b510      	push	{r4, lr}
 8004498:	460c      	mov	r4, r1
 800449a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449e:	f000 f829 	bl	80044f4 <_lseek_r>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	bf15      	itete	ne
 80044a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044b2:	81a3      	strheq	r3, [r4, #12]
 80044b4:	bf18      	it	ne
 80044b6:	81a3      	strhne	r3, [r4, #12]
 80044b8:	bd10      	pop	{r4, pc}

080044ba <__sclose>:
 80044ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044be:	f000 b809 	b.w	80044d4 <_close_r>

080044c2 <memset>:
 80044c2:	4402      	add	r2, r0
 80044c4:	4603      	mov	r3, r0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d100      	bne.n	80044cc <memset+0xa>
 80044ca:	4770      	bx	lr
 80044cc:	f803 1b01 	strb.w	r1, [r3], #1
 80044d0:	e7f9      	b.n	80044c6 <memset+0x4>
	...

080044d4 <_close_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d06      	ldr	r5, [pc, #24]	@ (80044f0 <_close_r+0x1c>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	f7fd fb1f 	bl	8001b22 <_close>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_close_r+0x1a>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_close_r+0x1a>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	200018cc 	.word	0x200018cc

080044f4 <_lseek_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d07      	ldr	r5, [pc, #28]	@ (8004514 <_lseek_r+0x20>)
 80044f8:	4604      	mov	r4, r0
 80044fa:	4608      	mov	r0, r1
 80044fc:	4611      	mov	r1, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	602a      	str	r2, [r5, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f7fd fb34 	bl	8001b70 <_lseek>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_lseek_r+0x1e>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_lseek_r+0x1e>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	200018cc 	.word	0x200018cc

08004518 <_read_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d07      	ldr	r5, [pc, #28]	@ (8004538 <_read_r+0x20>)
 800451c:	4604      	mov	r4, r0
 800451e:	4608      	mov	r0, r1
 8004520:	4611      	mov	r1, r2
 8004522:	2200      	movs	r2, #0
 8004524:	602a      	str	r2, [r5, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	f7fd fade 	bl	8001ae8 <_read>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_read_r+0x1e>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_read_r+0x1e>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200018cc 	.word	0x200018cc

0800453c <_write_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4d07      	ldr	r5, [pc, #28]	@ (800455c <_write_r+0x20>)
 8004540:	4604      	mov	r4, r0
 8004542:	4608      	mov	r0, r1
 8004544:	4611      	mov	r1, r2
 8004546:	2200      	movs	r2, #0
 8004548:	602a      	str	r2, [r5, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f7fd f80d 	bl	800156a <_write>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_write_r+0x1e>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_write_r+0x1e>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200018cc 	.word	0x200018cc

08004560 <__errno>:
 8004560:	4b01      	ldr	r3, [pc, #4]	@ (8004568 <__errno+0x8>)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000030 	.word	0x20000030

0800456c <__libc_init_array>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	4d0d      	ldr	r5, [pc, #52]	@ (80045a4 <__libc_init_array+0x38>)
 8004570:	4c0d      	ldr	r4, [pc, #52]	@ (80045a8 <__libc_init_array+0x3c>)
 8004572:	1b64      	subs	r4, r4, r5
 8004574:	10a4      	asrs	r4, r4, #2
 8004576:	2600      	movs	r6, #0
 8004578:	42a6      	cmp	r6, r4
 800457a:	d109      	bne.n	8004590 <__libc_init_array+0x24>
 800457c:	4d0b      	ldr	r5, [pc, #44]	@ (80045ac <__libc_init_array+0x40>)
 800457e:	4c0c      	ldr	r4, [pc, #48]	@ (80045b0 <__libc_init_array+0x44>)
 8004580:	f000 fdb8 	bl	80050f4 <_init>
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	2600      	movs	r6, #0
 800458a:	42a6      	cmp	r6, r4
 800458c:	d105      	bne.n	800459a <__libc_init_array+0x2e>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	f855 3b04 	ldr.w	r3, [r5], #4
 8004594:	4798      	blx	r3
 8004596:	3601      	adds	r6, #1
 8004598:	e7ee      	b.n	8004578 <__libc_init_array+0xc>
 800459a:	f855 3b04 	ldr.w	r3, [r5], #4
 800459e:	4798      	blx	r3
 80045a0:	3601      	adds	r6, #1
 80045a2:	e7f2      	b.n	800458a <__libc_init_array+0x1e>
 80045a4:	080051f4 	.word	0x080051f4
 80045a8:	080051f4 	.word	0x080051f4
 80045ac:	080051f4 	.word	0x080051f4
 80045b0:	080051f8 	.word	0x080051f8

080045b4 <__retarget_lock_init_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_acquire_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <__retarget_lock_release_recursive>:
 80045b8:	4770      	bx	lr
	...

080045bc <_free_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4605      	mov	r5, r0
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d041      	beq.n	8004648 <_free_r+0x8c>
 80045c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c8:	1f0c      	subs	r4, r1, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfb8      	it	lt
 80045ce:	18e4      	addlt	r4, r4, r3
 80045d0:	f000 f8e0 	bl	8004794 <__malloc_lock>
 80045d4:	4a1d      	ldr	r2, [pc, #116]	@ (800464c <_free_r+0x90>)
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	b933      	cbnz	r3, 80045e8 <_free_r+0x2c>
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	6014      	str	r4, [r2, #0]
 80045de:	4628      	mov	r0, r5
 80045e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e4:	f000 b8dc 	b.w	80047a0 <__malloc_unlock>
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d908      	bls.n	80045fe <_free_r+0x42>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	1821      	adds	r1, r4, r0
 80045f0:	428b      	cmp	r3, r1
 80045f2:	bf01      	itttt	eq
 80045f4:	6819      	ldreq	r1, [r3, #0]
 80045f6:	685b      	ldreq	r3, [r3, #4]
 80045f8:	1809      	addeq	r1, r1, r0
 80045fa:	6021      	streq	r1, [r4, #0]
 80045fc:	e7ed      	b.n	80045da <_free_r+0x1e>
 80045fe:	461a      	mov	r2, r3
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	b10b      	cbz	r3, 8004608 <_free_r+0x4c>
 8004604:	42a3      	cmp	r3, r4
 8004606:	d9fa      	bls.n	80045fe <_free_r+0x42>
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	1850      	adds	r0, r2, r1
 800460c:	42a0      	cmp	r0, r4
 800460e:	d10b      	bne.n	8004628 <_free_r+0x6c>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	4401      	add	r1, r0
 8004614:	1850      	adds	r0, r2, r1
 8004616:	4283      	cmp	r3, r0
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	d1e0      	bne.n	80045de <_free_r+0x22>
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	6053      	str	r3, [r2, #4]
 8004622:	4408      	add	r0, r1
 8004624:	6010      	str	r0, [r2, #0]
 8004626:	e7da      	b.n	80045de <_free_r+0x22>
 8004628:	d902      	bls.n	8004630 <_free_r+0x74>
 800462a:	230c      	movs	r3, #12
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	e7d6      	b.n	80045de <_free_r+0x22>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	1821      	adds	r1, r4, r0
 8004634:	428b      	cmp	r3, r1
 8004636:	bf04      	itt	eq
 8004638:	6819      	ldreq	r1, [r3, #0]
 800463a:	685b      	ldreq	r3, [r3, #4]
 800463c:	6063      	str	r3, [r4, #4]
 800463e:	bf04      	itt	eq
 8004640:	1809      	addeq	r1, r1, r0
 8004642:	6021      	streq	r1, [r4, #0]
 8004644:	6054      	str	r4, [r2, #4]
 8004646:	e7ca      	b.n	80045de <_free_r+0x22>
 8004648:	bd38      	pop	{r3, r4, r5, pc}
 800464a:	bf00      	nop
 800464c:	200018d8 	.word	0x200018d8

08004650 <sbrk_aligned>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4e0f      	ldr	r6, [pc, #60]	@ (8004690 <sbrk_aligned+0x40>)
 8004654:	460c      	mov	r4, r1
 8004656:	6831      	ldr	r1, [r6, #0]
 8004658:	4605      	mov	r5, r0
 800465a:	b911      	cbnz	r1, 8004662 <sbrk_aligned+0x12>
 800465c:	f000 fcb6 	bl	8004fcc <_sbrk_r>
 8004660:	6030      	str	r0, [r6, #0]
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f000 fcb1 	bl	8004fcc <_sbrk_r>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	d103      	bne.n	8004676 <sbrk_aligned+0x26>
 800466e:	f04f 34ff 	mov.w	r4, #4294967295
 8004672:	4620      	mov	r0, r4
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	1cc4      	adds	r4, r0, #3
 8004678:	f024 0403 	bic.w	r4, r4, #3
 800467c:	42a0      	cmp	r0, r4
 800467e:	d0f8      	beq.n	8004672 <sbrk_aligned+0x22>
 8004680:	1a21      	subs	r1, r4, r0
 8004682:	4628      	mov	r0, r5
 8004684:	f000 fca2 	bl	8004fcc <_sbrk_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d1f2      	bne.n	8004672 <sbrk_aligned+0x22>
 800468c:	e7ef      	b.n	800466e <sbrk_aligned+0x1e>
 800468e:	bf00      	nop
 8004690:	200018d4 	.word	0x200018d4

08004694 <_malloc_r>:
 8004694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004698:	1ccd      	adds	r5, r1, #3
 800469a:	f025 0503 	bic.w	r5, r5, #3
 800469e:	3508      	adds	r5, #8
 80046a0:	2d0c      	cmp	r5, #12
 80046a2:	bf38      	it	cc
 80046a4:	250c      	movcc	r5, #12
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	4606      	mov	r6, r0
 80046aa:	db01      	blt.n	80046b0 <_malloc_r+0x1c>
 80046ac:	42a9      	cmp	r1, r5
 80046ae:	d904      	bls.n	80046ba <_malloc_r+0x26>
 80046b0:	230c      	movs	r3, #12
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	2000      	movs	r0, #0
 80046b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004790 <_malloc_r+0xfc>
 80046be:	f000 f869 	bl	8004794 <__malloc_lock>
 80046c2:	f8d8 3000 	ldr.w	r3, [r8]
 80046c6:	461c      	mov	r4, r3
 80046c8:	bb44      	cbnz	r4, 800471c <_malloc_r+0x88>
 80046ca:	4629      	mov	r1, r5
 80046cc:	4630      	mov	r0, r6
 80046ce:	f7ff ffbf 	bl	8004650 <sbrk_aligned>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	4604      	mov	r4, r0
 80046d6:	d158      	bne.n	800478a <_malloc_r+0xf6>
 80046d8:	f8d8 4000 	ldr.w	r4, [r8]
 80046dc:	4627      	mov	r7, r4
 80046de:	2f00      	cmp	r7, #0
 80046e0:	d143      	bne.n	800476a <_malloc_r+0xd6>
 80046e2:	2c00      	cmp	r4, #0
 80046e4:	d04b      	beq.n	800477e <_malloc_r+0xea>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	4639      	mov	r1, r7
 80046ea:	4630      	mov	r0, r6
 80046ec:	eb04 0903 	add.w	r9, r4, r3
 80046f0:	f000 fc6c 	bl	8004fcc <_sbrk_r>
 80046f4:	4581      	cmp	r9, r0
 80046f6:	d142      	bne.n	800477e <_malloc_r+0xea>
 80046f8:	6821      	ldr	r1, [r4, #0]
 80046fa:	1a6d      	subs	r5, r5, r1
 80046fc:	4629      	mov	r1, r5
 80046fe:	4630      	mov	r0, r6
 8004700:	f7ff ffa6 	bl	8004650 <sbrk_aligned>
 8004704:	3001      	adds	r0, #1
 8004706:	d03a      	beq.n	800477e <_malloc_r+0xea>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	442b      	add	r3, r5
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	f8d8 3000 	ldr.w	r3, [r8]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	bb62      	cbnz	r2, 8004770 <_malloc_r+0xdc>
 8004716:	f8c8 7000 	str.w	r7, [r8]
 800471a:	e00f      	b.n	800473c <_malloc_r+0xa8>
 800471c:	6822      	ldr	r2, [r4, #0]
 800471e:	1b52      	subs	r2, r2, r5
 8004720:	d420      	bmi.n	8004764 <_malloc_r+0xd0>
 8004722:	2a0b      	cmp	r2, #11
 8004724:	d917      	bls.n	8004756 <_malloc_r+0xc2>
 8004726:	1961      	adds	r1, r4, r5
 8004728:	42a3      	cmp	r3, r4
 800472a:	6025      	str	r5, [r4, #0]
 800472c:	bf18      	it	ne
 800472e:	6059      	strne	r1, [r3, #4]
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	bf08      	it	eq
 8004734:	f8c8 1000 	streq.w	r1, [r8]
 8004738:	5162      	str	r2, [r4, r5]
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f82f 	bl	80047a0 <__malloc_unlock>
 8004742:	f104 000b 	add.w	r0, r4, #11
 8004746:	1d23      	adds	r3, r4, #4
 8004748:	f020 0007 	bic.w	r0, r0, #7
 800474c:	1ac2      	subs	r2, r0, r3
 800474e:	bf1c      	itt	ne
 8004750:	1a1b      	subne	r3, r3, r0
 8004752:	50a3      	strne	r3, [r4, r2]
 8004754:	e7af      	b.n	80046b6 <_malloc_r+0x22>
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	42a3      	cmp	r3, r4
 800475a:	bf0c      	ite	eq
 800475c:	f8c8 2000 	streq.w	r2, [r8]
 8004760:	605a      	strne	r2, [r3, #4]
 8004762:	e7eb      	b.n	800473c <_malloc_r+0xa8>
 8004764:	4623      	mov	r3, r4
 8004766:	6864      	ldr	r4, [r4, #4]
 8004768:	e7ae      	b.n	80046c8 <_malloc_r+0x34>
 800476a:	463c      	mov	r4, r7
 800476c:	687f      	ldr	r7, [r7, #4]
 800476e:	e7b6      	b.n	80046de <_malloc_r+0x4a>
 8004770:	461a      	mov	r2, r3
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	42a3      	cmp	r3, r4
 8004776:	d1fb      	bne.n	8004770 <_malloc_r+0xdc>
 8004778:	2300      	movs	r3, #0
 800477a:	6053      	str	r3, [r2, #4]
 800477c:	e7de      	b.n	800473c <_malloc_r+0xa8>
 800477e:	230c      	movs	r3, #12
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	4630      	mov	r0, r6
 8004784:	f000 f80c 	bl	80047a0 <__malloc_unlock>
 8004788:	e794      	b.n	80046b4 <_malloc_r+0x20>
 800478a:	6005      	str	r5, [r0, #0]
 800478c:	e7d6      	b.n	800473c <_malloc_r+0xa8>
 800478e:	bf00      	nop
 8004790:	200018d8 	.word	0x200018d8

08004794 <__malloc_lock>:
 8004794:	4801      	ldr	r0, [pc, #4]	@ (800479c <__malloc_lock+0x8>)
 8004796:	f7ff bf0e 	b.w	80045b6 <__retarget_lock_acquire_recursive>
 800479a:	bf00      	nop
 800479c:	200018d0 	.word	0x200018d0

080047a0 <__malloc_unlock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	@ (80047a8 <__malloc_unlock+0x8>)
 80047a2:	f7ff bf09 	b.w	80045b8 <__retarget_lock_release_recursive>
 80047a6:	bf00      	nop
 80047a8:	200018d0 	.word	0x200018d0

080047ac <__sfputc_r>:
 80047ac:	6893      	ldr	r3, [r2, #8]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	b410      	push	{r4}
 80047b4:	6093      	str	r3, [r2, #8]
 80047b6:	da08      	bge.n	80047ca <__sfputc_r+0x1e>
 80047b8:	6994      	ldr	r4, [r2, #24]
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	db01      	blt.n	80047c2 <__sfputc_r+0x16>
 80047be:	290a      	cmp	r1, #10
 80047c0:	d103      	bne.n	80047ca <__sfputc_r+0x1e>
 80047c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047c6:	f000 bb6d 	b.w	8004ea4 <__swbuf_r>
 80047ca:	6813      	ldr	r3, [r2, #0]
 80047cc:	1c58      	adds	r0, r3, #1
 80047ce:	6010      	str	r0, [r2, #0]
 80047d0:	7019      	strb	r1, [r3, #0]
 80047d2:	4608      	mov	r0, r1
 80047d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047d8:	4770      	bx	lr

080047da <__sfputs_r>:
 80047da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047dc:	4606      	mov	r6, r0
 80047de:	460f      	mov	r7, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	18d5      	adds	r5, r2, r3
 80047e4:	42ac      	cmp	r4, r5
 80047e6:	d101      	bne.n	80047ec <__sfputs_r+0x12>
 80047e8:	2000      	movs	r0, #0
 80047ea:	e007      	b.n	80047fc <__sfputs_r+0x22>
 80047ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f0:	463a      	mov	r2, r7
 80047f2:	4630      	mov	r0, r6
 80047f4:	f7ff ffda 	bl	80047ac <__sfputc_r>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d1f3      	bne.n	80047e4 <__sfputs_r+0xa>
 80047fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004800 <_vfiprintf_r>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	460d      	mov	r5, r1
 8004806:	b09d      	sub	sp, #116	@ 0x74
 8004808:	4614      	mov	r4, r2
 800480a:	4698      	mov	r8, r3
 800480c:	4606      	mov	r6, r0
 800480e:	b118      	cbz	r0, 8004818 <_vfiprintf_r+0x18>
 8004810:	6a03      	ldr	r3, [r0, #32]
 8004812:	b90b      	cbnz	r3, 8004818 <_vfiprintf_r+0x18>
 8004814:	f7ff fdca 	bl	80043ac <__sinit>
 8004818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	d405      	bmi.n	800482a <_vfiprintf_r+0x2a>
 800481e:	89ab      	ldrh	r3, [r5, #12]
 8004820:	059a      	lsls	r2, r3, #22
 8004822:	d402      	bmi.n	800482a <_vfiprintf_r+0x2a>
 8004824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004826:	f7ff fec6 	bl	80045b6 <__retarget_lock_acquire_recursive>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	071b      	lsls	r3, r3, #28
 800482e:	d501      	bpl.n	8004834 <_vfiprintf_r+0x34>
 8004830:	692b      	ldr	r3, [r5, #16]
 8004832:	b99b      	cbnz	r3, 800485c <_vfiprintf_r+0x5c>
 8004834:	4629      	mov	r1, r5
 8004836:	4630      	mov	r0, r6
 8004838:	f000 fb72 	bl	8004f20 <__swsetup_r>
 800483c:	b170      	cbz	r0, 800485c <_vfiprintf_r+0x5c>
 800483e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004840:	07dc      	lsls	r4, r3, #31
 8004842:	d504      	bpl.n	800484e <_vfiprintf_r+0x4e>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	b01d      	add	sp, #116	@ 0x74
 800484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484e:	89ab      	ldrh	r3, [r5, #12]
 8004850:	0598      	lsls	r0, r3, #22
 8004852:	d4f7      	bmi.n	8004844 <_vfiprintf_r+0x44>
 8004854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004856:	f7ff feaf 	bl	80045b8 <__retarget_lock_release_recursive>
 800485a:	e7f3      	b.n	8004844 <_vfiprintf_r+0x44>
 800485c:	2300      	movs	r3, #0
 800485e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004860:	2320      	movs	r3, #32
 8004862:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004866:	f8cd 800c 	str.w	r8, [sp, #12]
 800486a:	2330      	movs	r3, #48	@ 0x30
 800486c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a1c <_vfiprintf_r+0x21c>
 8004870:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004874:	f04f 0901 	mov.w	r9, #1
 8004878:	4623      	mov	r3, r4
 800487a:	469a      	mov	sl, r3
 800487c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004880:	b10a      	cbz	r2, 8004886 <_vfiprintf_r+0x86>
 8004882:	2a25      	cmp	r2, #37	@ 0x25
 8004884:	d1f9      	bne.n	800487a <_vfiprintf_r+0x7a>
 8004886:	ebba 0b04 	subs.w	fp, sl, r4
 800488a:	d00b      	beq.n	80048a4 <_vfiprintf_r+0xa4>
 800488c:	465b      	mov	r3, fp
 800488e:	4622      	mov	r2, r4
 8004890:	4629      	mov	r1, r5
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff ffa1 	bl	80047da <__sfputs_r>
 8004898:	3001      	adds	r0, #1
 800489a:	f000 80a7 	beq.w	80049ec <_vfiprintf_r+0x1ec>
 800489e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048a0:	445a      	add	r2, fp
 80048a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80048a4:	f89a 3000 	ldrb.w	r3, [sl]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 809f 	beq.w	80049ec <_vfiprintf_r+0x1ec>
 80048ae:	2300      	movs	r3, #0
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b8:	f10a 0a01 	add.w	sl, sl, #1
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	9307      	str	r3, [sp, #28]
 80048c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80048c6:	4654      	mov	r4, sl
 80048c8:	2205      	movs	r2, #5
 80048ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ce:	4853      	ldr	r0, [pc, #332]	@ (8004a1c <_vfiprintf_r+0x21c>)
 80048d0:	f7fb fc86 	bl	80001e0 <memchr>
 80048d4:	9a04      	ldr	r2, [sp, #16]
 80048d6:	b9d8      	cbnz	r0, 8004910 <_vfiprintf_r+0x110>
 80048d8:	06d1      	lsls	r1, r2, #27
 80048da:	bf44      	itt	mi
 80048dc:	2320      	movmi	r3, #32
 80048de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048e2:	0713      	lsls	r3, r2, #28
 80048e4:	bf44      	itt	mi
 80048e6:	232b      	movmi	r3, #43	@ 0x2b
 80048e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ec:	f89a 3000 	ldrb.w	r3, [sl]
 80048f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048f2:	d015      	beq.n	8004920 <_vfiprintf_r+0x120>
 80048f4:	9a07      	ldr	r2, [sp, #28]
 80048f6:	4654      	mov	r4, sl
 80048f8:	2000      	movs	r0, #0
 80048fa:	f04f 0c0a 	mov.w	ip, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004904:	3b30      	subs	r3, #48	@ 0x30
 8004906:	2b09      	cmp	r3, #9
 8004908:	d94b      	bls.n	80049a2 <_vfiprintf_r+0x1a2>
 800490a:	b1b0      	cbz	r0, 800493a <_vfiprintf_r+0x13a>
 800490c:	9207      	str	r2, [sp, #28]
 800490e:	e014      	b.n	800493a <_vfiprintf_r+0x13a>
 8004910:	eba0 0308 	sub.w	r3, r0, r8
 8004914:	fa09 f303 	lsl.w	r3, r9, r3
 8004918:	4313      	orrs	r3, r2
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	46a2      	mov	sl, r4
 800491e:	e7d2      	b.n	80048c6 <_vfiprintf_r+0xc6>
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	1d19      	adds	r1, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	9103      	str	r1, [sp, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	bfbb      	ittet	lt
 800492c:	425b      	neglt	r3, r3
 800492e:	f042 0202 	orrlt.w	r2, r2, #2
 8004932:	9307      	strge	r3, [sp, #28]
 8004934:	9307      	strlt	r3, [sp, #28]
 8004936:	bfb8      	it	lt
 8004938:	9204      	strlt	r2, [sp, #16]
 800493a:	7823      	ldrb	r3, [r4, #0]
 800493c:	2b2e      	cmp	r3, #46	@ 0x2e
 800493e:	d10a      	bne.n	8004956 <_vfiprintf_r+0x156>
 8004940:	7863      	ldrb	r3, [r4, #1]
 8004942:	2b2a      	cmp	r3, #42	@ 0x2a
 8004944:	d132      	bne.n	80049ac <_vfiprintf_r+0x1ac>
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	1d1a      	adds	r2, r3, #4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	9203      	str	r2, [sp, #12]
 800494e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004952:	3402      	adds	r4, #2
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a2c <_vfiprintf_r+0x22c>
 800495a:	7821      	ldrb	r1, [r4, #0]
 800495c:	2203      	movs	r2, #3
 800495e:	4650      	mov	r0, sl
 8004960:	f7fb fc3e 	bl	80001e0 <memchr>
 8004964:	b138      	cbz	r0, 8004976 <_vfiprintf_r+0x176>
 8004966:	9b04      	ldr	r3, [sp, #16]
 8004968:	eba0 000a 	sub.w	r0, r0, sl
 800496c:	2240      	movs	r2, #64	@ 0x40
 800496e:	4082      	lsls	r2, r0
 8004970:	4313      	orrs	r3, r2
 8004972:	3401      	adds	r4, #1
 8004974:	9304      	str	r3, [sp, #16]
 8004976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497a:	4829      	ldr	r0, [pc, #164]	@ (8004a20 <_vfiprintf_r+0x220>)
 800497c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004980:	2206      	movs	r2, #6
 8004982:	f7fb fc2d 	bl	80001e0 <memchr>
 8004986:	2800      	cmp	r0, #0
 8004988:	d03f      	beq.n	8004a0a <_vfiprintf_r+0x20a>
 800498a:	4b26      	ldr	r3, [pc, #152]	@ (8004a24 <_vfiprintf_r+0x224>)
 800498c:	bb1b      	cbnz	r3, 80049d6 <_vfiprintf_r+0x1d6>
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	3307      	adds	r3, #7
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	3308      	adds	r3, #8
 8004998:	9303      	str	r3, [sp, #12]
 800499a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800499c:	443b      	add	r3, r7
 800499e:	9309      	str	r3, [sp, #36]	@ 0x24
 80049a0:	e76a      	b.n	8004878 <_vfiprintf_r+0x78>
 80049a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a6:	460c      	mov	r4, r1
 80049a8:	2001      	movs	r0, #1
 80049aa:	e7a8      	b.n	80048fe <_vfiprintf_r+0xfe>
 80049ac:	2300      	movs	r3, #0
 80049ae:	3401      	adds	r4, #1
 80049b0:	9305      	str	r3, [sp, #20]
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 0c0a 	mov.w	ip, #10
 80049b8:	4620      	mov	r0, r4
 80049ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049be:	3a30      	subs	r2, #48	@ 0x30
 80049c0:	2a09      	cmp	r2, #9
 80049c2:	d903      	bls.n	80049cc <_vfiprintf_r+0x1cc>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0c6      	beq.n	8004956 <_vfiprintf_r+0x156>
 80049c8:	9105      	str	r1, [sp, #20]
 80049ca:	e7c4      	b.n	8004956 <_vfiprintf_r+0x156>
 80049cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80049d0:	4604      	mov	r4, r0
 80049d2:	2301      	movs	r3, #1
 80049d4:	e7f0      	b.n	80049b8 <_vfiprintf_r+0x1b8>
 80049d6:	ab03      	add	r3, sp, #12
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	462a      	mov	r2, r5
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <_vfiprintf_r+0x228>)
 80049de:	a904      	add	r1, sp, #16
 80049e0:	4630      	mov	r0, r6
 80049e2:	f3af 8000 	nop.w
 80049e6:	4607      	mov	r7, r0
 80049e8:	1c78      	adds	r0, r7, #1
 80049ea:	d1d6      	bne.n	800499a <_vfiprintf_r+0x19a>
 80049ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049ee:	07d9      	lsls	r1, r3, #31
 80049f0:	d405      	bmi.n	80049fe <_vfiprintf_r+0x1fe>
 80049f2:	89ab      	ldrh	r3, [r5, #12]
 80049f4:	059a      	lsls	r2, r3, #22
 80049f6:	d402      	bmi.n	80049fe <_vfiprintf_r+0x1fe>
 80049f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049fa:	f7ff fddd 	bl	80045b8 <__retarget_lock_release_recursive>
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	065b      	lsls	r3, r3, #25
 8004a02:	f53f af1f 	bmi.w	8004844 <_vfiprintf_r+0x44>
 8004a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a08:	e71e      	b.n	8004848 <_vfiprintf_r+0x48>
 8004a0a:	ab03      	add	r3, sp, #12
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	462a      	mov	r2, r5
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <_vfiprintf_r+0x228>)
 8004a12:	a904      	add	r1, sp, #16
 8004a14:	4630      	mov	r0, r6
 8004a16:	f000 f879 	bl	8004b0c <_printf_i>
 8004a1a:	e7e4      	b.n	80049e6 <_vfiprintf_r+0x1e6>
 8004a1c:	080051b8 	.word	0x080051b8
 8004a20:	080051c2 	.word	0x080051c2
 8004a24:	00000000 	.word	0x00000000
 8004a28:	080047db 	.word	0x080047db
 8004a2c:	080051be 	.word	0x080051be

08004a30 <_printf_common>:
 8004a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	4616      	mov	r6, r2
 8004a36:	4698      	mov	r8, r3
 8004a38:	688a      	ldr	r2, [r1, #8]
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	bfb8      	it	lt
 8004a44:	4613      	movlt	r3, r2
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	b10a      	cbz	r2, 8004a56 <_printf_common+0x26>
 8004a52:	3301      	adds	r3, #1
 8004a54:	6033      	str	r3, [r6, #0]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	0699      	lsls	r1, r3, #26
 8004a5a:	bf42      	ittt	mi
 8004a5c:	6833      	ldrmi	r3, [r6, #0]
 8004a5e:	3302      	addmi	r3, #2
 8004a60:	6033      	strmi	r3, [r6, #0]
 8004a62:	6825      	ldr	r5, [r4, #0]
 8004a64:	f015 0506 	ands.w	r5, r5, #6
 8004a68:	d106      	bne.n	8004a78 <_printf_common+0x48>
 8004a6a:	f104 0a19 	add.w	sl, r4, #25
 8004a6e:	68e3      	ldr	r3, [r4, #12]
 8004a70:	6832      	ldr	r2, [r6, #0]
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	dc26      	bgt.n	8004ac6 <_printf_common+0x96>
 8004a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a7c:	6822      	ldr	r2, [r4, #0]
 8004a7e:	3b00      	subs	r3, #0
 8004a80:	bf18      	it	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	0692      	lsls	r2, r2, #26
 8004a86:	d42b      	bmi.n	8004ae0 <_printf_common+0xb0>
 8004a88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c8      	blx	r9
 8004a92:	3001      	adds	r0, #1
 8004a94:	d01e      	beq.n	8004ad4 <_printf_common+0xa4>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	f003 0306 	and.w	r3, r3, #6
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	bf02      	ittt	eq
 8004aa2:	68e5      	ldreq	r5, [r4, #12]
 8004aa4:	6833      	ldreq	r3, [r6, #0]
 8004aa6:	1aed      	subeq	r5, r5, r3
 8004aa8:	68a3      	ldr	r3, [r4, #8]
 8004aaa:	bf0c      	ite	eq
 8004aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab0:	2500      	movne	r5, #0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bfc4      	itt	gt
 8004ab6:	1a9b      	subgt	r3, r3, r2
 8004ab8:	18ed      	addgt	r5, r5, r3
 8004aba:	2600      	movs	r6, #0
 8004abc:	341a      	adds	r4, #26
 8004abe:	42b5      	cmp	r5, r6
 8004ac0:	d11a      	bne.n	8004af8 <_printf_common+0xc8>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e008      	b.n	8004ad8 <_printf_common+0xa8>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4641      	mov	r1, r8
 8004acc:	4638      	mov	r0, r7
 8004ace:	47c8      	blx	r9
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d103      	bne.n	8004adc <_printf_common+0xac>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7c6      	b.n	8004a6e <_printf_common+0x3e>
 8004ae0:	18e1      	adds	r1, r4, r3
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	2030      	movs	r0, #48	@ 0x30
 8004ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004aea:	4422      	add	r2, r4
 8004aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004af4:	3302      	adds	r3, #2
 8004af6:	e7c7      	b.n	8004a88 <_printf_common+0x58>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4622      	mov	r2, r4
 8004afc:	4641      	mov	r1, r8
 8004afe:	4638      	mov	r0, r7
 8004b00:	47c8      	blx	r9
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0e6      	beq.n	8004ad4 <_printf_common+0xa4>
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7d9      	b.n	8004abe <_printf_common+0x8e>
	...

08004b0c <_printf_i>:
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	7e0f      	ldrb	r7, [r1, #24]
 8004b12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b14:	2f78      	cmp	r7, #120	@ 0x78
 8004b16:	4691      	mov	r9, r2
 8004b18:	4680      	mov	r8, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	469a      	mov	sl, r3
 8004b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b22:	d807      	bhi.n	8004b34 <_printf_i+0x28>
 8004b24:	2f62      	cmp	r7, #98	@ 0x62
 8004b26:	d80a      	bhi.n	8004b3e <_printf_i+0x32>
 8004b28:	2f00      	cmp	r7, #0
 8004b2a:	f000 80d2 	beq.w	8004cd2 <_printf_i+0x1c6>
 8004b2e:	2f58      	cmp	r7, #88	@ 0x58
 8004b30:	f000 80b9 	beq.w	8004ca6 <_printf_i+0x19a>
 8004b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b3c:	e03a      	b.n	8004bb4 <_printf_i+0xa8>
 8004b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b42:	2b15      	cmp	r3, #21
 8004b44:	d8f6      	bhi.n	8004b34 <_printf_i+0x28>
 8004b46:	a101      	add	r1, pc, #4	@ (adr r1, 8004b4c <_printf_i+0x40>)
 8004b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004b35 	.word	0x08004b35
 8004b58:	08004b35 	.word	0x08004b35
 8004b5c:	08004b35 	.word	0x08004b35
 8004b60:	08004b35 	.word	0x08004b35
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b35 	.word	0x08004b35
 8004b6c:	08004b35 	.word	0x08004b35
 8004b70:	08004b35 	.word	0x08004b35
 8004b74:	08004b35 	.word	0x08004b35
 8004b78:	08004cb9 	.word	0x08004cb9
 8004b7c:	08004be3 	.word	0x08004be3
 8004b80:	08004c73 	.word	0x08004c73
 8004b84:	08004b35 	.word	0x08004b35
 8004b88:	08004b35 	.word	0x08004b35
 8004b8c:	08004cdb 	.word	0x08004cdb
 8004b90:	08004b35 	.word	0x08004b35
 8004b94:	08004be3 	.word	0x08004be3
 8004b98:	08004b35 	.word	0x08004b35
 8004b9c:	08004b35 	.word	0x08004b35
 8004ba0:	08004c7b 	.word	0x08004c7b
 8004ba4:	6833      	ldr	r3, [r6, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6032      	str	r2, [r6, #0]
 8004bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e09d      	b.n	8004cf4 <_printf_i+0x1e8>
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	1d19      	adds	r1, r3, #4
 8004bbe:	6031      	str	r1, [r6, #0]
 8004bc0:	0606      	lsls	r6, r0, #24
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0xbc>
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	e003      	b.n	8004bd0 <_printf_i+0xc4>
 8004bc8:	0645      	lsls	r5, r0, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0xb8>
 8004bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	da03      	bge.n	8004bdc <_printf_i+0xd0>
 8004bd4:	232d      	movs	r3, #45	@ 0x2d
 8004bd6:	426d      	negs	r5, r5
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	4859      	ldr	r0, [pc, #356]	@ (8004d44 <_printf_i+0x238>)
 8004bde:	230a      	movs	r3, #10
 8004be0:	e011      	b.n	8004c06 <_printf_i+0xfa>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	0608      	lsls	r0, r1, #24
 8004be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bec:	d402      	bmi.n	8004bf4 <_printf_i+0xe8>
 8004bee:	0649      	lsls	r1, r1, #25
 8004bf0:	bf48      	it	mi
 8004bf2:	b2ad      	uxthmi	r5, r5
 8004bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bf6:	4853      	ldr	r0, [pc, #332]	@ (8004d44 <_printf_i+0x238>)
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	bf14      	ite	ne
 8004bfc:	230a      	movne	r3, #10
 8004bfe:	2308      	moveq	r3, #8
 8004c00:	2100      	movs	r1, #0
 8004c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c06:	6866      	ldr	r6, [r4, #4]
 8004c08:	60a6      	str	r6, [r4, #8]
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	bfa2      	ittt	ge
 8004c0e:	6821      	ldrge	r1, [r4, #0]
 8004c10:	f021 0104 	bicge.w	r1, r1, #4
 8004c14:	6021      	strge	r1, [r4, #0]
 8004c16:	b90d      	cbnz	r5, 8004c1c <_printf_i+0x110>
 8004c18:	2e00      	cmp	r6, #0
 8004c1a:	d04b      	beq.n	8004cb4 <_printf_i+0x1a8>
 8004c1c:	4616      	mov	r6, r2
 8004c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c22:	fb03 5711 	mls	r7, r3, r1, r5
 8004c26:	5dc7      	ldrb	r7, [r0, r7]
 8004c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c2c:	462f      	mov	r7, r5
 8004c2e:	42bb      	cmp	r3, r7
 8004c30:	460d      	mov	r5, r1
 8004c32:	d9f4      	bls.n	8004c1e <_printf_i+0x112>
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d10b      	bne.n	8004c50 <_printf_i+0x144>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	07df      	lsls	r7, r3, #31
 8004c3c:	d508      	bpl.n	8004c50 <_printf_i+0x144>
 8004c3e:	6923      	ldr	r3, [r4, #16]
 8004c40:	6861      	ldr	r1, [r4, #4]
 8004c42:	4299      	cmp	r1, r3
 8004c44:	bfde      	ittt	le
 8004c46:	2330      	movle	r3, #48	@ 0x30
 8004c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c50:	1b92      	subs	r2, r2, r6
 8004c52:	6122      	str	r2, [r4, #16]
 8004c54:	f8cd a000 	str.w	sl, [sp]
 8004c58:	464b      	mov	r3, r9
 8004c5a:	aa03      	add	r2, sp, #12
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4640      	mov	r0, r8
 8004c60:	f7ff fee6 	bl	8004a30 <_printf_common>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d14a      	bne.n	8004cfe <_printf_i+0x1f2>
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	b004      	add	sp, #16
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f043 0320 	orr.w	r3, r3, #32
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	4833      	ldr	r0, [pc, #204]	@ (8004d48 <_printf_i+0x23c>)
 8004c7c:	2778      	movs	r7, #120	@ 0x78
 8004c7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	6831      	ldr	r1, [r6, #0]
 8004c86:	061f      	lsls	r7, r3, #24
 8004c88:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c8c:	d402      	bmi.n	8004c94 <_printf_i+0x188>
 8004c8e:	065f      	lsls	r7, r3, #25
 8004c90:	bf48      	it	mi
 8004c92:	b2ad      	uxthmi	r5, r5
 8004c94:	6031      	str	r1, [r6, #0]
 8004c96:	07d9      	lsls	r1, r3, #31
 8004c98:	bf44      	itt	mi
 8004c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c9e:	6023      	strmi	r3, [r4, #0]
 8004ca0:	b11d      	cbz	r5, 8004caa <_printf_i+0x19e>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	e7ac      	b.n	8004c00 <_printf_i+0xf4>
 8004ca6:	4827      	ldr	r0, [pc, #156]	@ (8004d44 <_printf_i+0x238>)
 8004ca8:	e7e9      	b.n	8004c7e <_printf_i+0x172>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	f023 0320 	bic.w	r3, r3, #32
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	e7f6      	b.n	8004ca2 <_printf_i+0x196>
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	e7bd      	b.n	8004c34 <_printf_i+0x128>
 8004cb8:	6833      	ldr	r3, [r6, #0]
 8004cba:	6825      	ldr	r5, [r4, #0]
 8004cbc:	6961      	ldr	r1, [r4, #20]
 8004cbe:	1d18      	adds	r0, r3, #4
 8004cc0:	6030      	str	r0, [r6, #0]
 8004cc2:	062e      	lsls	r6, r5, #24
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	d501      	bpl.n	8004ccc <_printf_i+0x1c0>
 8004cc8:	6019      	str	r1, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_printf_i+0x1c6>
 8004ccc:	0668      	lsls	r0, r5, #25
 8004cce:	d5fb      	bpl.n	8004cc8 <_printf_i+0x1bc>
 8004cd0:	8019      	strh	r1, [r3, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	4616      	mov	r6, r2
 8004cd8:	e7bc      	b.n	8004c54 <_printf_i+0x148>
 8004cda:	6833      	ldr	r3, [r6, #0]
 8004cdc:	1d1a      	adds	r2, r3, #4
 8004cde:	6032      	str	r2, [r6, #0]
 8004ce0:	681e      	ldr	r6, [r3, #0]
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7fb fa7a 	bl	80001e0 <memchr>
 8004cec:	b108      	cbz	r0, 8004cf2 <_printf_i+0x1e6>
 8004cee:	1b80      	subs	r0, r0, r6
 8004cf0:	6060      	str	r0, [r4, #4]
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cfc:	e7aa      	b.n	8004c54 <_printf_i+0x148>
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	47d0      	blx	sl
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d0ad      	beq.n	8004c68 <_printf_i+0x15c>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	079b      	lsls	r3, r3, #30
 8004d10:	d413      	bmi.n	8004d3a <_printf_i+0x22e>
 8004d12:	68e0      	ldr	r0, [r4, #12]
 8004d14:	9b03      	ldr	r3, [sp, #12]
 8004d16:	4298      	cmp	r0, r3
 8004d18:	bfb8      	it	lt
 8004d1a:	4618      	movlt	r0, r3
 8004d1c:	e7a6      	b.n	8004c6c <_printf_i+0x160>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4632      	mov	r2, r6
 8004d22:	4649      	mov	r1, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	47d0      	blx	sl
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d09d      	beq.n	8004c68 <_printf_i+0x15c>
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	9903      	ldr	r1, [sp, #12]
 8004d32:	1a5b      	subs	r3, r3, r1
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	dcf2      	bgt.n	8004d1e <_printf_i+0x212>
 8004d38:	e7eb      	b.n	8004d12 <_printf_i+0x206>
 8004d3a:	2500      	movs	r5, #0
 8004d3c:	f104 0619 	add.w	r6, r4, #25
 8004d40:	e7f5      	b.n	8004d2e <_printf_i+0x222>
 8004d42:	bf00      	nop
 8004d44:	080051c9 	.word	0x080051c9
 8004d48:	080051da 	.word	0x080051da

08004d4c <__sflush_r>:
 8004d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	0716      	lsls	r6, r2, #28
 8004d56:	4605      	mov	r5, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	d454      	bmi.n	8004e06 <__sflush_r+0xba>
 8004d5c:	684b      	ldr	r3, [r1, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	dc02      	bgt.n	8004d68 <__sflush_r+0x1c>
 8004d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dd48      	ble.n	8004dfa <__sflush_r+0xae>
 8004d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d045      	beq.n	8004dfa <__sflush_r+0xae>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d74:	682f      	ldr	r7, [r5, #0]
 8004d76:	6a21      	ldr	r1, [r4, #32]
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	d030      	beq.n	8004dde <__sflush_r+0x92>
 8004d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	0759      	lsls	r1, r3, #29
 8004d82:	d505      	bpl.n	8004d90 <__sflush_r+0x44>
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	1ad2      	subs	r2, r2, r3
 8004d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d8a:	b10b      	cbz	r3, 8004d90 <__sflush_r+0x44>
 8004d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d94:	6a21      	ldr	r1, [r4, #32]
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b0      	blx	r6
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	d106      	bne.n	8004dae <__sflush_r+0x62>
 8004da0:	6829      	ldr	r1, [r5, #0]
 8004da2:	291d      	cmp	r1, #29
 8004da4:	d82b      	bhi.n	8004dfe <__sflush_r+0xb2>
 8004da6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e50 <__sflush_r+0x104>)
 8004da8:	410a      	asrs	r2, r1
 8004daa:	07d6      	lsls	r6, r2, #31
 8004dac:	d427      	bmi.n	8004dfe <__sflush_r+0xb2>
 8004dae:	2200      	movs	r2, #0
 8004db0:	6062      	str	r2, [r4, #4]
 8004db2:	04d9      	lsls	r1, r3, #19
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	6022      	str	r2, [r4, #0]
 8004db8:	d504      	bpl.n	8004dc4 <__sflush_r+0x78>
 8004dba:	1c42      	adds	r2, r0, #1
 8004dbc:	d101      	bne.n	8004dc2 <__sflush_r+0x76>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	b903      	cbnz	r3, 8004dc4 <__sflush_r+0x78>
 8004dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dc6:	602f      	str	r7, [r5, #0]
 8004dc8:	b1b9      	cbz	r1, 8004dfa <__sflush_r+0xae>
 8004dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d002      	beq.n	8004dd8 <__sflush_r+0x8c>
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f7ff fbf2 	bl	80045bc <_free_r>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ddc:	e00d      	b.n	8004dfa <__sflush_r+0xae>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b0      	blx	r6
 8004de4:	4602      	mov	r2, r0
 8004de6:	1c50      	adds	r0, r2, #1
 8004de8:	d1c9      	bne.n	8004d7e <__sflush_r+0x32>
 8004dea:	682b      	ldr	r3, [r5, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0c6      	beq.n	8004d7e <__sflush_r+0x32>
 8004df0:	2b1d      	cmp	r3, #29
 8004df2:	d001      	beq.n	8004df8 <__sflush_r+0xac>
 8004df4:	2b16      	cmp	r3, #22
 8004df6:	d11e      	bne.n	8004e36 <__sflush_r+0xea>
 8004df8:	602f      	str	r7, [r5, #0]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e022      	b.n	8004e44 <__sflush_r+0xf8>
 8004dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e02:	b21b      	sxth	r3, r3
 8004e04:	e01b      	b.n	8004e3e <__sflush_r+0xf2>
 8004e06:	690f      	ldr	r7, [r1, #16]
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	d0f6      	beq.n	8004dfa <__sflush_r+0xae>
 8004e0c:	0793      	lsls	r3, r2, #30
 8004e0e:	680e      	ldr	r6, [r1, #0]
 8004e10:	bf08      	it	eq
 8004e12:	694b      	ldreq	r3, [r1, #20]
 8004e14:	600f      	str	r7, [r1, #0]
 8004e16:	bf18      	it	ne
 8004e18:	2300      	movne	r3, #0
 8004e1a:	eba6 0807 	sub.w	r8, r6, r7
 8004e1e:	608b      	str	r3, [r1, #8]
 8004e20:	f1b8 0f00 	cmp.w	r8, #0
 8004e24:	dde9      	ble.n	8004dfa <__sflush_r+0xae>
 8004e26:	6a21      	ldr	r1, [r4, #32]
 8004e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e2a:	4643      	mov	r3, r8
 8004e2c:	463a      	mov	r2, r7
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b0      	blx	r6
 8004e32:	2800      	cmp	r0, #0
 8004e34:	dc08      	bgt.n	8004e48 <__sflush_r+0xfc>
 8004e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	4407      	add	r7, r0
 8004e4a:	eba8 0800 	sub.w	r8, r8, r0
 8004e4e:	e7e7      	b.n	8004e20 <__sflush_r+0xd4>
 8004e50:	dfbffffe 	.word	0xdfbffffe

08004e54 <_fflush_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	690b      	ldr	r3, [r1, #16]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b913      	cbnz	r3, 8004e64 <_fflush_r+0x10>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	4628      	mov	r0, r5
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	b118      	cbz	r0, 8004e6e <_fflush_r+0x1a>
 8004e66:	6a03      	ldr	r3, [r0, #32]
 8004e68:	b90b      	cbnz	r3, 8004e6e <_fflush_r+0x1a>
 8004e6a:	f7ff fa9f 	bl	80043ac <__sinit>
 8004e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f3      	beq.n	8004e5e <_fflush_r+0xa>
 8004e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e78:	07d0      	lsls	r0, r2, #31
 8004e7a:	d404      	bmi.n	8004e86 <_fflush_r+0x32>
 8004e7c:	0599      	lsls	r1, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_fflush_r+0x32>
 8004e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e82:	f7ff fb98 	bl	80045b6 <__retarget_lock_acquire_recursive>
 8004e86:	4628      	mov	r0, r5
 8004e88:	4621      	mov	r1, r4
 8004e8a:	f7ff ff5f 	bl	8004d4c <__sflush_r>
 8004e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e90:	07da      	lsls	r2, r3, #31
 8004e92:	4605      	mov	r5, r0
 8004e94:	d4e4      	bmi.n	8004e60 <_fflush_r+0xc>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	059b      	lsls	r3, r3, #22
 8004e9a:	d4e1      	bmi.n	8004e60 <_fflush_r+0xc>
 8004e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e9e:	f7ff fb8b 	bl	80045b8 <__retarget_lock_release_recursive>
 8004ea2:	e7dd      	b.n	8004e60 <_fflush_r+0xc>

08004ea4 <__swbuf_r>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	460e      	mov	r6, r1
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	4605      	mov	r5, r0
 8004eac:	b118      	cbz	r0, 8004eb6 <__swbuf_r+0x12>
 8004eae:	6a03      	ldr	r3, [r0, #32]
 8004eb0:	b90b      	cbnz	r3, 8004eb6 <__swbuf_r+0x12>
 8004eb2:	f7ff fa7b 	bl	80043ac <__sinit>
 8004eb6:	69a3      	ldr	r3, [r4, #24]
 8004eb8:	60a3      	str	r3, [r4, #8]
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	071a      	lsls	r2, r3, #28
 8004ebe:	d501      	bpl.n	8004ec4 <__swbuf_r+0x20>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	b943      	cbnz	r3, 8004ed6 <__swbuf_r+0x32>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 f82a 	bl	8004f20 <__swsetup_r>
 8004ecc:	b118      	cbz	r0, 8004ed6 <__swbuf_r+0x32>
 8004ece:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	6922      	ldr	r2, [r4, #16]
 8004eda:	1a98      	subs	r0, r3, r2
 8004edc:	6963      	ldr	r3, [r4, #20]
 8004ede:	b2f6      	uxtb	r6, r6
 8004ee0:	4283      	cmp	r3, r0
 8004ee2:	4637      	mov	r7, r6
 8004ee4:	dc05      	bgt.n	8004ef2 <__swbuf_r+0x4e>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7ff ffb3 	bl	8004e54 <_fflush_r>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d1ed      	bne.n	8004ece <__swbuf_r+0x2a>
 8004ef2:	68a3      	ldr	r3, [r4, #8]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	60a3      	str	r3, [r4, #8]
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	6022      	str	r2, [r4, #0]
 8004efe:	701e      	strb	r6, [r3, #0]
 8004f00:	6962      	ldr	r2, [r4, #20]
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d004      	beq.n	8004f12 <__swbuf_r+0x6e>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	07db      	lsls	r3, r3, #31
 8004f0c:	d5e1      	bpl.n	8004ed2 <__swbuf_r+0x2e>
 8004f0e:	2e0a      	cmp	r6, #10
 8004f10:	d1df      	bne.n	8004ed2 <__swbuf_r+0x2e>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7ff ff9d 	bl	8004e54 <_fflush_r>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d0d9      	beq.n	8004ed2 <__swbuf_r+0x2e>
 8004f1e:	e7d6      	b.n	8004ece <__swbuf_r+0x2a>

08004f20 <__swsetup_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4b29      	ldr	r3, [pc, #164]	@ (8004fc8 <__swsetup_r+0xa8>)
 8004f24:	4605      	mov	r5, r0
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	460c      	mov	r4, r1
 8004f2a:	b118      	cbz	r0, 8004f34 <__swsetup_r+0x14>
 8004f2c:	6a03      	ldr	r3, [r0, #32]
 8004f2e:	b90b      	cbnz	r3, 8004f34 <__swsetup_r+0x14>
 8004f30:	f7ff fa3c 	bl	80043ac <__sinit>
 8004f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f38:	0719      	lsls	r1, r3, #28
 8004f3a:	d422      	bmi.n	8004f82 <__swsetup_r+0x62>
 8004f3c:	06da      	lsls	r2, r3, #27
 8004f3e:	d407      	bmi.n	8004f50 <__swsetup_r+0x30>
 8004f40:	2209      	movs	r2, #9
 8004f42:	602a      	str	r2, [r5, #0]
 8004f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	e033      	b.n	8004fb8 <__swsetup_r+0x98>
 8004f50:	0758      	lsls	r0, r3, #29
 8004f52:	d512      	bpl.n	8004f7a <__swsetup_r+0x5a>
 8004f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f56:	b141      	cbz	r1, 8004f6a <__swsetup_r+0x4a>
 8004f58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f5c:	4299      	cmp	r1, r3
 8004f5e:	d002      	beq.n	8004f66 <__swsetup_r+0x46>
 8004f60:	4628      	mov	r0, r5
 8004f62:	f7ff fb2b 	bl	80045bc <_free_r>
 8004f66:	2300      	movs	r3, #0
 8004f68:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	2300      	movs	r3, #0
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	f043 0308 	orr.w	r3, r3, #8
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	b94b      	cbnz	r3, 8004f9a <__swsetup_r+0x7a>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f90:	d003      	beq.n	8004f9a <__swsetup_r+0x7a>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 f84f 	bl	8005038 <__smakebuf_r>
 8004f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9e:	f013 0201 	ands.w	r2, r3, #1
 8004fa2:	d00a      	beq.n	8004fba <__swsetup_r+0x9a>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60a2      	str	r2, [r4, #8]
 8004fa8:	6962      	ldr	r2, [r4, #20]
 8004faa:	4252      	negs	r2, r2
 8004fac:	61a2      	str	r2, [r4, #24]
 8004fae:	6922      	ldr	r2, [r4, #16]
 8004fb0:	b942      	cbnz	r2, 8004fc4 <__swsetup_r+0xa4>
 8004fb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fb6:	d1c5      	bne.n	8004f44 <__swsetup_r+0x24>
 8004fb8:	bd38      	pop	{r3, r4, r5, pc}
 8004fba:	0799      	lsls	r1, r3, #30
 8004fbc:	bf58      	it	pl
 8004fbe:	6962      	ldrpl	r2, [r4, #20]
 8004fc0:	60a2      	str	r2, [r4, #8]
 8004fc2:	e7f4      	b.n	8004fae <__swsetup_r+0x8e>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e7f7      	b.n	8004fb8 <__swsetup_r+0x98>
 8004fc8:	20000030 	.word	0x20000030

08004fcc <_sbrk_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4d06      	ldr	r5, [pc, #24]	@ (8004fe8 <_sbrk_r+0x1c>)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	f7fc fdd8 	bl	8001b8c <_sbrk>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_sbrk_r+0x1a>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_sbrk_r+0x1a>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	200018cc 	.word	0x200018cc

08004fec <__swhatbuf_r>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	460c      	mov	r4, r1
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	b096      	sub	sp, #88	@ 0x58
 8004ff8:	4615      	mov	r5, r2
 8004ffa:	461e      	mov	r6, r3
 8004ffc:	da0d      	bge.n	800501a <__swhatbuf_r+0x2e>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	bf14      	ite	ne
 800500a:	2340      	movne	r3, #64	@ 0x40
 800500c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005010:	2000      	movs	r0, #0
 8005012:	6031      	str	r1, [r6, #0]
 8005014:	602b      	str	r3, [r5, #0]
 8005016:	b016      	add	sp, #88	@ 0x58
 8005018:	bd70      	pop	{r4, r5, r6, pc}
 800501a:	466a      	mov	r2, sp
 800501c:	f000 f848 	bl	80050b0 <_fstat_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	dbec      	blt.n	8004ffe <__swhatbuf_r+0x12>
 8005024:	9901      	ldr	r1, [sp, #4]
 8005026:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800502a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800502e:	4259      	negs	r1, r3
 8005030:	4159      	adcs	r1, r3
 8005032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005036:	e7eb      	b.n	8005010 <__swhatbuf_r+0x24>

08005038 <__smakebuf_r>:
 8005038:	898b      	ldrh	r3, [r1, #12]
 800503a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800503c:	079d      	lsls	r5, r3, #30
 800503e:	4606      	mov	r6, r0
 8005040:	460c      	mov	r4, r1
 8005042:	d507      	bpl.n	8005054 <__smakebuf_r+0x1c>
 8005044:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	2301      	movs	r3, #1
 800504e:	6163      	str	r3, [r4, #20]
 8005050:	b003      	add	sp, #12
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005054:	ab01      	add	r3, sp, #4
 8005056:	466a      	mov	r2, sp
 8005058:	f7ff ffc8 	bl	8004fec <__swhatbuf_r>
 800505c:	9f00      	ldr	r7, [sp, #0]
 800505e:	4605      	mov	r5, r0
 8005060:	4639      	mov	r1, r7
 8005062:	4630      	mov	r0, r6
 8005064:	f7ff fb16 	bl	8004694 <_malloc_r>
 8005068:	b948      	cbnz	r0, 800507e <__smakebuf_r+0x46>
 800506a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506e:	059a      	lsls	r2, r3, #22
 8005070:	d4ee      	bmi.n	8005050 <__smakebuf_r+0x18>
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	f043 0302 	orr.w	r3, r3, #2
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	e7e2      	b.n	8005044 <__smakebuf_r+0xc>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	6020      	str	r0, [r4, #0]
 8005082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	9b01      	ldr	r3, [sp, #4]
 800508a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800508e:	b15b      	cbz	r3, 80050a8 <__smakebuf_r+0x70>
 8005090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005094:	4630      	mov	r0, r6
 8005096:	f000 f81d 	bl	80050d4 <_isatty_r>
 800509a:	b128      	cbz	r0, 80050a8 <__smakebuf_r+0x70>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	431d      	orrs	r5, r3
 80050ac:	81a5      	strh	r5, [r4, #12]
 80050ae:	e7cf      	b.n	8005050 <__smakebuf_r+0x18>

080050b0 <_fstat_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	@ (80050d0 <_fstat_r+0x20>)
 80050b4:	2300      	movs	r3, #0
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	f7fc fd3c 	bl	8001b3a <_fstat>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d102      	bne.n	80050cc <_fstat_r+0x1c>
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	b103      	cbz	r3, 80050cc <_fstat_r+0x1c>
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	200018cc 	.word	0x200018cc

080050d4 <_isatty_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	@ (80050f0 <_isatty_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fc fd3b 	bl	8001b5a <_isatty>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_isatty_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_isatty_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	200018cc 	.word	0x200018cc

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
