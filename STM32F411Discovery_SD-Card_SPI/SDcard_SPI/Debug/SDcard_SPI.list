
SDcard_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  080071c8  080071c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d0  080071d0  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d0  080071d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080071d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e88  20000080  08007258  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  08007258  00009f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a57e  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002151  00000000  00000000  0001362e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00015780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d4  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c59  00000000  00000000  000169d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6ae  00000000  00000000  0002e62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088905  00000000  00000000  0003ccdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c55e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031fc  00000000  00000000  000c5624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c8820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e1c 	.word	0x08006e1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006e1c 	.word	0x08006e1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <SELECT+0x1c>)
 8000b88:	f001 fc48 	bl	800241c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f001 f9b7 	bl	8001f00 <HAL_Delay>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba6:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <DESELECT+0x1c>)
 8000ba8:	f001 fc38 	bl	800241c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 f9a7 	bl	8001f00 <HAL_Delay>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bc6:	bf00      	nop
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <SPI_TxByte+0x30>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d1f8      	bne.n	8000bc8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bd6:	1df9      	adds	r1, r7, #7
 8000bd8:	2364      	movs	r3, #100	@ 0x64
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <SPI_TxByte+0x30>)
 8000bde:	f002 f924 	bl	8002e2a <HAL_SPI_Transmit>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000a0 	.word	0x200000a0

08000bf0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bfc:	bf00      	nop
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <SPI_TxBuffer+0x30>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d1f8      	bne.n	8000bfe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c0c:	887a      	ldrh	r2, [r7, #2]
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <SPI_TxBuffer+0x30>)
 8000c14:	f002 f909 	bl	8002e2a <HAL_SPI_Transmit>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c2a:	23ff      	movs	r3, #255	@ 0xff
 8000c2c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c2e:	bf00      	nop
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <SPI_RxByte+0x34>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d1f8      	bne.n	8000c30 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c3e:	1dba      	adds	r2, r7, #6
 8000c40:	1df9      	adds	r1, r7, #7
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <SPI_RxByte+0x34>)
 8000c4a:	f002 fa32 	bl	80030b2 <HAL_SPI_TransmitReceive>

	return data;
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000a0 	.word	0x200000a0

08000c5c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c64:	f7ff ffde 	bl	8000c24 <SPI_RxByte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	701a      	strb	r2, [r3, #0]
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <SD_ReadyWait+0x30>)
 8000c80:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c84:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c86:	f7ff ffcd 	bl	8000c24 <SPI_RxByte>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2bff      	cmp	r3, #255	@ 0xff
 8000c92:	d004      	beq.n	8000c9e <SD_ReadyWait+0x26>
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <SD_ReadyWait+0x30>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f3      	bne.n	8000c86 <SD_ReadyWait+0xe>

	return res;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000d76 	.word	0x20000d76

08000cac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cb2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cb6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cb8:	f7ff ff70 	bl	8000b9c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	e005      	b.n	8000cce <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cc2:	20ff      	movs	r0, #255	@ 0xff
 8000cc4:	f7ff ff7a 	bl	8000bbc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b09      	cmp	r3, #9
 8000cd2:	ddf6      	ble.n	8000cc2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cd4:	f7ff ff52 	bl	8000b7c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cd8:	2340      	movs	r3, #64	@ 0x40
 8000cda:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000cec:	2395      	movs	r3, #149	@ 0x95
 8000cee:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2106      	movs	r1, #6
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff7b 	bl	8000bf0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cfa:	e002      	b.n	8000d02 <SD_PowerOn+0x56>
	{
		cnt--;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d02:	f7ff ff8f 	bl	8000c24 <SPI_RxByte>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d002      	beq.n	8000d12 <SD_PowerOn+0x66>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f4      	bne.n	8000cfc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d12:	f7ff ff43 	bl	8000b9c <DESELECT>
	SPI_TxByte(0XFF);
 8000d16:	20ff      	movs	r0, #255	@ 0xff
 8000d18:	f7ff ff50 	bl	8000bbc <SPI_TxByte>

	PowerFlag = 1;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <SD_PowerOn+0x80>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000009d 	.word	0x2000009d

08000d30 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <SD_PowerOff+0x14>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	2000009d 	.word	0x2000009d

08000d48 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <SD_CheckPower+0x14>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000009d 	.word	0x2000009d

08000d60 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <SD_RxDataBlock+0x5c>)
 8000d6c:	22c8      	movs	r2, #200	@ 0xc8
 8000d6e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d70:	f7ff ff58 	bl	8000c24 <SPI_RxByte>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2bff      	cmp	r3, #255	@ 0xff
 8000d7c:	d104      	bne.n	8000d88 <SD_RxDataBlock+0x28>
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <SD_RxDataBlock+0x5c>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f3      	bne.n	8000d70 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d8c:	d001      	beq.n	8000d92 <SD_RxDataBlock+0x32>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e00f      	b.n	8000db2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5f 	bl	8000c5c <SPI_RxBytePtr>
	} while(len--);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	603a      	str	r2, [r7, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f4      	bne.n	8000d92 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000da8:	f7ff ff3c 	bl	8000c24 <SPI_RxByte>
	SPI_RxByte();
 8000dac:	f7ff ff3a 	bl	8000c24 <SPI_RxByte>

	return TRUE;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000d75 	.word	0x20000d75

08000dc0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dd0:	f7ff ff52 	bl	8000c78 <SD_ReadyWait>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2bff      	cmp	r3, #255	@ 0xff
 8000dd8:	d001      	beq.n	8000dde <SD_TxDataBlock+0x1e>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e02f      	b.n	8000e3e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff feeb 	bl	8000bbc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	2bfd      	cmp	r3, #253	@ 0xfd
 8000dea:	d020      	beq.n	8000e2e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000dec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fefd 	bl	8000bf0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000df6:	f7ff ff15 	bl	8000c24 <SPI_RxByte>
		SPI_RxByte();
 8000dfa:	f7ff ff13 	bl	8000c24 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000dfe:	e00b      	b.n	8000e18 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e00:	f7ff ff10 	bl	8000c24 <SPI_RxByte>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d006      	beq.n	8000e20 <SD_TxDataBlock+0x60>
			i++;
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	2b40      	cmp	r3, #64	@ 0x40
 8000e1c:	d9f0      	bls.n	8000e00 <SD_TxDataBlock+0x40>
 8000e1e:	e000      	b.n	8000e22 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e20:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e22:	bf00      	nop
 8000e24:	f7ff fefe 	bl	8000c24 <SPI_RxByte>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0fa      	beq.n	8000e24 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d101      	bne.n	8000e3c <SD_TxDataBlock+0x7c>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	6039      	str	r1, [r7, #0]
 8000e50:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e52:	f7ff ff11 	bl	8000c78 <SD_ReadyWait>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	@ 0xff
 8000e5a:	d001      	beq.n	8000e60 <SD_SendCmd+0x1a>
 8000e5c:	23ff      	movs	r3, #255	@ 0xff
 8000e5e:	e042      	b.n	8000ee6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff feaa 	bl	8000bbc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	0e1b      	lsrs	r3, r3, #24
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fea4 	bl	8000bbc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fe9e 	bl	8000bbc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe98 	bl	8000bbc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe93 	bl	8000bbc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b40      	cmp	r3, #64	@ 0x40
 8000e9a:	d102      	bne.n	8000ea2 <SD_SendCmd+0x5c>
 8000e9c:	2395      	movs	r3, #149	@ 0x95
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e007      	b.n	8000eb2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b48      	cmp	r3, #72	@ 0x48
 8000ea6:	d102      	bne.n	8000eae <SD_SendCmd+0x68>
 8000ea8:	2387      	movs	r3, #135	@ 0x87
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e001      	b.n	8000eb2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe81 	bl	8000bbc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ebe:	d101      	bne.n	8000ec4 <SD_SendCmd+0x7e>
 8000ec0:	f7ff feb0 	bl	8000c24 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ec8:	f7ff feac 	bl	8000c24 <SPI_RxByte>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ed0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da05      	bge.n	8000ee4 <SD_SendCmd+0x9e>
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	73bb      	strb	r3, [r7, #14]
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f1      	bne.n	8000ec8 <SD_SendCmd+0x82>

	return res;
 8000ee4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SD_disk_initialize+0x14>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0d6      	b.n	80010b2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f04:	4b6d      	ldr	r3, [pc, #436]	@ (80010bc <SD_disk_initialize+0x1cc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <SD_disk_initialize+0x2a>
 8000f12:	4b6a      	ldr	r3, [pc, #424]	@ (80010bc <SD_disk_initialize+0x1cc>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	e0cb      	b.n	80010b2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f1a:	f7ff fec7 	bl	8000cac <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f1e:	f7ff fe2d 	bl	8000b7c <SELECT>

	/* check disk type */
	type = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f26:	2100      	movs	r1, #0
 8000f28:	2040      	movs	r0, #64	@ 0x40
 8000f2a:	f7ff ff8c 	bl	8000e46 <SD_SendCmd>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	f040 80a6 	bne.w	8001082 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f36:	4b62      	ldr	r3, [pc, #392]	@ (80010c0 <SD_disk_initialize+0x1d0>)
 8000f38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f3c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f3e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f42:	2048      	movs	r0, #72	@ 0x48
 8000f44:	f7ff ff7f 	bl	8000e46 <SD_SendCmd>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d158      	bne.n	8001000 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e00c      	b.n	8000f6e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f54:	7bfc      	ldrb	r4, [r7, #15]
 8000f56:	f7ff fe65 	bl	8000c24 <SPI_RxByte>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f104 0310 	add.w	r3, r4, #16
 8000f62:	443b      	add	r3, r7
 8000f64:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d9ef      	bls.n	8000f54 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f74:	7abb      	ldrb	r3, [r7, #10]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	f040 8083 	bne.w	8001082 <SD_disk_initialize+0x192>
 8000f7c:	7afb      	ldrb	r3, [r7, #11]
 8000f7e:	2baa      	cmp	r3, #170	@ 0xaa
 8000f80:	d17f      	bne.n	8001082 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f82:	2100      	movs	r1, #0
 8000f84:	2077      	movs	r0, #119	@ 0x77
 8000f86:	f7ff ff5e 	bl	8000e46 <SD_SendCmd>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d807      	bhi.n	8000fa0 <SD_disk_initialize+0xb0>
 8000f90:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f94:	2069      	movs	r0, #105	@ 0x69
 8000f96:	f7ff ff56 	bl	8000e46 <SD_SendCmd>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000fa0:	4b47      	ldr	r3, [pc, #284]	@ (80010c0 <SD_disk_initialize+0x1d0>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1eb      	bne.n	8000f82 <SD_disk_initialize+0x92>
 8000faa:	e000      	b.n	8000fae <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fac:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fae:	4b44      	ldr	r3, [pc, #272]	@ (80010c0 <SD_disk_initialize+0x1d0>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d064      	beq.n	8001082 <SD_disk_initialize+0x192>
 8000fb8:	2100      	movs	r1, #0
 8000fba:	207a      	movs	r0, #122	@ 0x7a
 8000fbc:	f7ff ff43 	bl	8000e46 <SD_SendCmd>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d15d      	bne.n	8001082 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e00c      	b.n	8000fe6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fcc:	7bfc      	ldrb	r4, [r7, #15]
 8000fce:	f7ff fe29 	bl	8000c24 <SPI_RxByte>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f104 0310 	add.w	r3, r4, #16
 8000fda:	443b      	add	r3, r7
 8000fdc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d9ef      	bls.n	8000fcc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000fec:	7a3b      	ldrb	r3, [r7, #8]
 8000fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SD_disk_initialize+0x10a>
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	e000      	b.n	8000ffc <SD_disk_initialize+0x10c>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	73bb      	strb	r3, [r7, #14]
 8000ffe:	e040      	b.n	8001082 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001000:	2100      	movs	r1, #0
 8001002:	2077      	movs	r0, #119	@ 0x77
 8001004:	f7ff ff1f 	bl	8000e46 <SD_SendCmd>
 8001008:	4603      	mov	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d808      	bhi.n	8001020 <SD_disk_initialize+0x130>
 800100e:	2100      	movs	r1, #0
 8001010:	2069      	movs	r0, #105	@ 0x69
 8001012:	f7ff ff18 	bl	8000e46 <SD_SendCmd>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d801      	bhi.n	8001020 <SD_disk_initialize+0x130>
 800101c:	2302      	movs	r3, #2
 800101e:	e000      	b.n	8001022 <SD_disk_initialize+0x132>
 8001020:	2301      	movs	r3, #1
 8001022:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d10e      	bne.n	8001048 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800102a:	2100      	movs	r1, #0
 800102c:	2077      	movs	r0, #119	@ 0x77
 800102e:	f7ff ff0a 	bl	8000e46 <SD_SendCmd>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d80e      	bhi.n	8001056 <SD_disk_initialize+0x166>
 8001038:	2100      	movs	r1, #0
 800103a:	2069      	movs	r0, #105	@ 0x69
 800103c:	f7ff ff03 	bl	8000e46 <SD_SendCmd>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d107      	bne.n	8001056 <SD_disk_initialize+0x166>
 8001046:	e00d      	b.n	8001064 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001048:	2100      	movs	r1, #0
 800104a:	2041      	movs	r0, #65	@ 0x41
 800104c:	f7ff fefb 	bl	8000e46 <SD_SendCmd>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <SD_disk_initialize+0x1d0>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e1      	bne.n	8001024 <SD_disk_initialize+0x134>
 8001060:	e000      	b.n	8001064 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001062:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <SD_disk_initialize+0x1d0>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <SD_disk_initialize+0x18e>
 800106e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001072:	2050      	movs	r0, #80	@ 0x50
 8001074:	f7ff fee7 	bl	8000e46 <SD_SendCmd>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SD_disk_initialize+0x192>
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <SD_disk_initialize+0x1d4>)
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001088:	f7ff fd88 	bl	8000b9c <DESELECT>
	SPI_RxByte();
 800108c:	f7ff fdca 	bl	8000c24 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <SD_disk_initialize+0x1cc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <SD_disk_initialize+0x1cc>)
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e001      	b.n	80010ac <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010a8:	f7ff fe42 	bl	8000d30 <SD_PowerOff>
	}

	return Stat;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <SD_disk_initialize+0x1cc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000d75 	.word	0x20000d75
 80010c4:	2000009c 	.word	0x2000009c

080010c8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SD_disk_status+0x14>
 80010d8:	2301      	movs	r3, #1
 80010da:	e002      	b.n	80010e2 <SD_disk_status+0x1a>
	return Stat;
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <SD_disk_status+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000

080010f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <SD_disk_read+0x1c>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <SD_disk_read+0x20>
 8001110:	2304      	movs	r3, #4
 8001112:	e051      	b.n	80011b8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <SD_disk_read+0xcc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SD_disk_read+0x32>
 8001122:	2303      	movs	r3, #3
 8001124:	e048      	b.n	80011b8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001126:	4b27      	ldr	r3, [pc, #156]	@ (80011c4 <SD_disk_read+0xd0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <SD_disk_read+0x44>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	607b      	str	r3, [r7, #4]

	SELECT();
 8001138:	f7ff fd20 	bl	8000b7c <SELECT>

	if (count == 1)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d111      	bne.n	8001166 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2051      	movs	r0, #81	@ 0x51
 8001146:	f7ff fe7e 	bl	8000e46 <SD_SendCmd>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d129      	bne.n	80011a4 <SD_disk_read+0xb0>
 8001150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f7ff fe03 	bl	8000d60 <SD_RxDataBlock>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d021      	beq.n	80011a4 <SD_disk_read+0xb0>
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	e01e      	b.n	80011a4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2052      	movs	r0, #82	@ 0x52
 800116a:	f7ff fe6c 	bl	8000e46 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d117      	bne.n	80011a4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f7ff fdf1 	bl	8000d60 <SD_RxDataBlock>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00a      	beq.n	800119a <SD_disk_read+0xa6>
				buff += 512;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800118a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ed      	bne.n	8001174 <SD_disk_read+0x80>
 8001198:	e000      	b.n	800119c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800119a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800119c:	2100      	movs	r1, #0
 800119e:	204c      	movs	r0, #76	@ 0x4c
 80011a0:	f7ff fe51 	bl	8000e46 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011a4:	f7ff fcfa 	bl	8000b9c <DESELECT>
	SPI_RxByte();
 80011a8:	f7ff fd3c 	bl	8000c24 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000000 	.word	0x20000000
 80011c4:	2000009c 	.word	0x2000009c

080011c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <SD_disk_write+0x1c>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <SD_disk_write+0x20>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e06b      	b.n	80012c0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <SD_disk_write+0x100>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SD_disk_write+0x32>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e062      	b.n	80012c0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <SD_disk_write+0x100>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SD_disk_write+0x44>
 8001208:	2302      	movs	r3, #2
 800120a:	e059      	b.n	80012c0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800120c:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <SD_disk_write+0x104>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <SD_disk_write+0x56>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	607b      	str	r3, [r7, #4]

	SELECT();
 800121e:	f7ff fcad 	bl	8000b7c <SELECT>

	if (count == 1)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d110      	bne.n	800124a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	2058      	movs	r0, #88	@ 0x58
 800122c:	f7ff fe0b 	bl	8000e46 <SD_SendCmd>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d13a      	bne.n	80012ac <SD_disk_write+0xe4>
 8001236:	21fe      	movs	r1, #254	@ 0xfe
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff fdc1 	bl	8000dc0 <SD_TxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d033      	beq.n	80012ac <SD_disk_write+0xe4>
			count = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	e030      	b.n	80012ac <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <SD_disk_write+0x104>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001256:	2100      	movs	r1, #0
 8001258:	2077      	movs	r0, #119	@ 0x77
 800125a:	f7ff fdf4 	bl	8000e46 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	2057      	movs	r0, #87	@ 0x57
 8001262:	f7ff fdf0 	bl	8000e46 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2059      	movs	r0, #89	@ 0x59
 800126a:	f7ff fdec 	bl	8000e46 <SD_SendCmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11b      	bne.n	80012ac <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001274:	21fc      	movs	r1, #252	@ 0xfc
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f7ff fda2 	bl	8000dc0 <SD_TxDataBlock>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <SD_disk_write+0xd0>
				buff += 512;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001288:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3b01      	subs	r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ee      	bne.n	8001274 <SD_disk_write+0xac>
 8001296:	e000      	b.n	800129a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001298:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800129a:	21fd      	movs	r1, #253	@ 0xfd
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fd8f 	bl	8000dc0 <SD_TxDataBlock>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <SD_disk_write+0xe4>
			{
				count = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012ac:	f7ff fc76 	bl	8000b9c <DESELECT>
	SPI_RxByte();
 80012b0:	f7ff fcb8 	bl	8000c24 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	2000009c 	.word	0x2000009c

080012d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b08b      	sub	sp, #44	@ 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	603a      	str	r2, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	460b      	mov	r3, r1
 80012de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SD_disk_ioctl+0x1e>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e113      	b.n	8001516 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d124      	bne.n	8001344 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d012      	beq.n	8001328 <SD_disk_ioctl+0x58>
 8001302:	2b02      	cmp	r3, #2
 8001304:	dc1a      	bgt.n	800133c <SD_disk_ioctl+0x6c>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <SD_disk_ioctl+0x40>
 800130a:	2b01      	cmp	r3, #1
 800130c:	d006      	beq.n	800131c <SD_disk_ioctl+0x4c>
 800130e:	e015      	b.n	800133c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001310:	f7ff fd0e 	bl	8000d30 <SD_PowerOff>
			res = RES_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800131a:	e0fa      	b.n	8001512 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800131c:	f7ff fcc6 	bl	8000cac <SD_PowerOn>
			res = RES_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001326:	e0f4      	b.n	8001512 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	1c5c      	adds	r4, r3, #1
 800132c:	f7ff fd0c 	bl	8000d48 <SD_CheckPower>
 8001330:	4603      	mov	r3, r0
 8001332:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800133a:	e0ea      	b.n	8001512 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800133c:	2304      	movs	r3, #4
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001342:	e0e6      	b.n	8001512 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001344:	4b76      	ldr	r3, [pc, #472]	@ (8001520 <SD_disk_ioctl+0x250>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SD_disk_ioctl+0x86>
 8001352:	2303      	movs	r3, #3
 8001354:	e0df      	b.n	8001516 <SD_disk_ioctl+0x246>

		SELECT();
 8001356:	f7ff fc11 	bl	8000b7c <SELECT>

		switch (ctrl)
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b0d      	cmp	r3, #13
 800135e:	f200 80c9 	bhi.w	80014f4 <SD_disk_ioctl+0x224>
 8001362:	a201      	add	r2, pc, #4	@ (adr r2, 8001368 <SD_disk_ioctl+0x98>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	0800145f 	.word	0x0800145f
 800136c:	080013a1 	.word	0x080013a1
 8001370:	0800144f 	.word	0x0800144f
 8001374:	080014f5 	.word	0x080014f5
 8001378:	080014f5 	.word	0x080014f5
 800137c:	080014f5 	.word	0x080014f5
 8001380:	080014f5 	.word	0x080014f5
 8001384:	080014f5 	.word	0x080014f5
 8001388:	080014f5 	.word	0x080014f5
 800138c:	080014f5 	.word	0x080014f5
 8001390:	080014f5 	.word	0x080014f5
 8001394:	08001471 	.word	0x08001471
 8001398:	08001495 	.word	0x08001495
 800139c:	080014b9 	.word	0x080014b9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013a0:	2100      	movs	r1, #0
 80013a2:	2049      	movs	r0, #73	@ 0x49
 80013a4:	f7ff fd4f 	bl	8000e46 <SD_SendCmd>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 80a6 	bne.w	80014fc <SD_disk_ioctl+0x22c>
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2110      	movs	r1, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcd2 	bl	8000d60 <SD_RxDataBlock>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 809c 	beq.w	80014fc <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80013c4:	7b3b      	ldrb	r3, [r7, #12]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10d      	bne.n	80013ea <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ce:	7d7b      	ldrb	r3, [r7, #21]
 80013d0:	461a      	mov	r2, r3
 80013d2:	7d3b      	ldrb	r3, [r7, #20]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	029a      	lsls	r2, r3, #10
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e02d      	b.n	8001446 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013ea:	7c7b      	ldrb	r3, [r7, #17]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	09db      	lsrs	r3, r3, #7
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	7d7b      	ldrb	r3, [r7, #21]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0306 	and.w	r3, r3, #6
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4413      	add	r3, r2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3302      	adds	r3, #2
 800140e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001412:	7d3b      	ldrb	r3, [r7, #20]
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	7cfb      	ldrb	r3, [r7, #19]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	b29b      	uxth	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	7cbb      	ldrb	r3, [r7, #18]
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	b29b      	uxth	r3, r3
 800142a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800142e:	b29b      	uxth	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b29b      	uxth	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001438:	8bfa      	ldrh	r2, [r7, #30]
 800143a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800143e:	3b09      	subs	r3, #9
 8001440:	409a      	lsls	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800144c:	e056      	b.n	80014fc <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001454:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800145c:	e055      	b.n	800150a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800145e:	f7ff fc0b 	bl	8000c78 <SD_ReadyWait>
 8001462:	4603      	mov	r3, r0
 8001464:	2bff      	cmp	r3, #255	@ 0xff
 8001466:	d14b      	bne.n	8001500 <SD_disk_ioctl+0x230>
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800146e:	e047      	b.n	8001500 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001470:	2100      	movs	r1, #0
 8001472:	2049      	movs	r0, #73	@ 0x49
 8001474:	f7ff fce7 	bl	8000e46 <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d142      	bne.n	8001504 <SD_disk_ioctl+0x234>
 800147e:	2110      	movs	r1, #16
 8001480:	6a38      	ldr	r0, [r7, #32]
 8001482:	f7ff fc6d 	bl	8000d60 <SD_RxDataBlock>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03b      	beq.n	8001504 <SD_disk_ioctl+0x234>
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001492:	e037      	b.n	8001504 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001494:	2100      	movs	r1, #0
 8001496:	204a      	movs	r0, #74	@ 0x4a
 8001498:	f7ff fcd5 	bl	8000e46 <SD_SendCmd>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d132      	bne.n	8001508 <SD_disk_ioctl+0x238>
 80014a2:	2110      	movs	r1, #16
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff fc5b 	bl	8000d60 <SD_RxDataBlock>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02b      	beq.n	8001508 <SD_disk_ioctl+0x238>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014b6:	e027      	b.n	8001508 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014b8:	2100      	movs	r1, #0
 80014ba:	207a      	movs	r0, #122	@ 0x7a
 80014bc:	f7ff fcc3 	bl	8000e46 <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014cc:	e00b      	b.n	80014e6 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80014ce:	6a3c      	ldr	r4, [r7, #32]
 80014d0:	1c63      	adds	r3, r4, #1
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	f7ff fba6 	bl	8000c24 <SPI_RxByte>
 80014d8:	4603      	mov	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014e0:	3301      	adds	r3, #1
 80014e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d9ef      	bls.n	80014ce <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80014f4:	2304      	movs	r3, #4
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014fa:	e006      	b.n	800150a <SD_disk_ioctl+0x23a>
			break;
 80014fc:	bf00      	nop
 80014fe:	e004      	b.n	800150a <SD_disk_ioctl+0x23a>
			break;
 8001500:	bf00      	nop
 8001502:	e002      	b.n	800150a <SD_disk_ioctl+0x23a>
			break;
 8001504:	bf00      	nop
 8001506:	e000      	b.n	800150a <SD_disk_ioctl+0x23a>
			break;
 8001508:	bf00      	nop
		}

		DESELECT();
 800150a:	f7ff fb47 	bl	8000b9c <DESELECT>
		SPI_RxByte();
 800150e:	f7ff fb89 	bl	8000c24 <SPI_RxByte>
	}

	return res;
 8001512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001516:	4618      	mov	r0, r3
 8001518:	372c      	adds	r7, #44	@ 0x2c
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000

08001524 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800152c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001530:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800153c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001540:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001544:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800154c:	e000      	b.n	8001550 <ITM_SendChar+0x2c>
    {
      __NOP();
 800154e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001550:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f9      	beq.n	800154e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800155a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <clear_buffer>:

	return i;
}

void clear_buffer(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e007      	b.n	8001590 <clear_buffer+0x1c>
		buffer[i] = '\0';
 8001580:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <clear_buffer+0x34>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001596:	dbf3      	blt.n	8001580 <clear_buffer+0xc>
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000574 	.word	0x20000574

080015ac <_write>:

// <---- --- SWV Print --- ---->
int _write(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e009      	b.n	80015d2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ffac 	bl	8001524 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbf1      	blt.n	80015be <_write+0x12>
	}
	return len;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fc18 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f948 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 f9e4 	bl	80019bc <MX_GPIO_Init>
  MX_SPI2_Init();
 80015f4:	f000 f9ac 	bl	8001950 <MX_SPI2_Init>
  MX_FATFS_Init();
 80015f8:	f001 ffe0 	bl	80035bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  	HAL_Delay (500);
 80015fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001600:	f000 fc7e 	bl	8001f00 <HAL_Delay>

  	fresult = f_mount(&filesystem, "/", 0);
 8001604:	2200      	movs	r2, #0
 8001606:	4981      	ldr	r1, [pc, #516]	@ (800180c <main+0x228>)
 8001608:	4881      	ldr	r0, [pc, #516]	@ (8001810 <main+0x22c>)
 800160a:	f003 fd83 	bl	8005114 <f_mount>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <main+0x230>)
 8001614:	701a      	strb	r2, [r3, #0]
  	if(fresult != FR_OK)
 8001616:	4b7f      	ldr	r3, [pc, #508]	@ (8001814 <main+0x230>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <main+0x48>
  		printf("\t Error! in mounting SD Card... %d \n", fresult);
 800161e:	4b7d      	ldr	r3, [pc, #500]	@ (8001814 <main+0x230>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	487c      	ldr	r0, [pc, #496]	@ (8001818 <main+0x234>)
 8001626:	f004 fd7d 	bl	8006124 <iprintf>
 800162a:	e005      	b.n	8001638 <main+0x54>
  	else
  		printf("\t SD Card mounted successfully... %d \n", fresult);
 800162c:	4b79      	ldr	r3, [pc, #484]	@ (8001814 <main+0x230>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	487a      	ldr	r0, [pc, #488]	@ (800181c <main+0x238>)
 8001634:	f004 fd76 	bl	8006124 <iprintf>

  	// <---- -------------------------- Card capacity details -------------------------- ---->
  	// <---- --- Check free space --- ---->
  	f_getfree("", &fre_clust, &pfs);
 8001638:	4a79      	ldr	r2, [pc, #484]	@ (8001820 <main+0x23c>)
 800163a:	497a      	ldr	r1, [pc, #488]	@ (8001824 <main+0x240>)
 800163c:	487a      	ldr	r0, [pc, #488]	@ (8001828 <main+0x244>)
 800163e:	f004 fac5 	bl	8005bcc <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001642:	4b77      	ldr	r3, [pc, #476]	@ (8001820 <main+0x23c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	3b02      	subs	r3, #2
 800164a:	4a75      	ldr	r2, [pc, #468]	@ (8001820 <main+0x23c>)
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	8952      	ldrh	r2, [r2, #10]
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f87f 	bl	8000758 <__aeabi_ui2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b73      	ldr	r3, [pc, #460]	@ (800182c <main+0x248>)
 8001660:	f7fe fe0e 	bl	8000280 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f8ee 	bl	800084c <__aeabi_d2uiz>
 8001670:	4603      	mov	r3, r0
 8001672:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <main+0x24c>)
 8001674:	6013      	str	r3, [r2, #0]
  	printf("\t SD Card Total Size: \t%lu \n", total);
 8001676:	4b6e      	ldr	r3, [pc, #440]	@ (8001830 <main+0x24c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	486d      	ldr	r0, [pc, #436]	@ (8001834 <main+0x250>)
 800167e:	f004 fd51 	bl	8006124 <iprintf>
  	clear_buffer();
 8001682:	f7ff ff77 	bl	8001574 <clear_buffer>

  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001686:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <main+0x23c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	895b      	ldrh	r3, [r3, #10]
 800168c:	461a      	mov	r2, r3
 800168e:	4b65      	ldr	r3, [pc, #404]	@ (8001824 <main+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f85e 	bl	8000758 <__aeabi_ui2d>
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b62      	ldr	r3, [pc, #392]	@ (800182c <main+0x248>)
 80016a2:	f7fe fded 	bl	8000280 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f8cd 	bl	800084c <__aeabi_d2uiz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a60      	ldr	r2, [pc, #384]	@ (8001838 <main+0x254>)
 80016b6:	6013      	str	r3, [r2, #0]
  	printf("\t SD Card Free Space: \t%lu \n", free_space);
 80016b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <main+0x254>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	485f      	ldr	r0, [pc, #380]	@ (800183c <main+0x258>)
 80016c0:	f004 fd30 	bl	8006124 <iprintf>
  	clear_buffer();
 80016c4:	f7ff ff56 	bl	8001574 <clear_buffer>

  	// <---- -------------------------- The following operation is using PUTS and GETS -------------------------- ---->
  	// <---- --- Open file to write or create if it doesn't exist --- ---->
    fresult = f_open(&file, "/sbzrgn.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016c8:	2213      	movs	r2, #19
 80016ca:	495d      	ldr	r1, [pc, #372]	@ (8001840 <main+0x25c>)
 80016cc:	485d      	ldr	r0, [pc, #372]	@ (8001844 <main+0x260>)
 80016ce:	f003 fd67 	bl	80051a0 <f_open>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <main+0x230>)
 80016d8:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 80016da:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <main+0x230>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <main+0x10c>
  		printf("\t sbzrgn.txt is open and the data is shown below %d \n", fresult);
 80016e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001814 <main+0x230>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4857      	ldr	r0, [pc, #348]	@ (8001848 <main+0x264>)
 80016ea:	f004 fd1b 	bl	8006124 <iprintf>
 80016ee:	e005      	b.n	80016fc <main+0x118>
  	else
  		printf("\t Error! sbzrgn.txt is not open %d \n", fresult);
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <main+0x230>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4855      	ldr	r0, [pc, #340]	@ (800184c <main+0x268>)
 80016f8:	f004 fd14 	bl	8006124 <iprintf>

    // <---- --- Writing text --- ---->
  	f_puts("This data is from the sbzrgn.txt. And it was written using ""f_puts"" ", &file);
 80016fc:	4951      	ldr	r1, [pc, #324]	@ (8001844 <main+0x260>)
 80016fe:	4854      	ldr	r0, [pc, #336]	@ (8001850 <main+0x26c>)
 8001700:	f004 fbce 	bl	8005ea0 <f_puts>

  	// <---- --- Close file --- ---->
  	fresult = f_close(&file);
 8001704:	484f      	ldr	r0, [pc, #316]	@ (8001844 <main+0x260>)
 8001706:	f004 fa37 	bl	8005b78 <f_close>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <main+0x230>)
 8001710:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 8001712:	4b40      	ldr	r3, [pc, #256]	@ (8001814 <main+0x230>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <main+0x144>
  		printf("\t sbzrgn.txt created and the data is written %d \n", fresult);
 800171a:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <main+0x230>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	484c      	ldr	r0, [pc, #304]	@ (8001854 <main+0x270>)
 8001722:	f004 fcff 	bl	8006124 <iprintf>
 8001726:	e005      	b.n	8001734 <main+0x150>
  	else
  		printf("\t Error! sbzrgn.txt not created %d \n", fresult);
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <main+0x230>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	484a      	ldr	r0, [pc, #296]	@ (8001858 <main+0x274>)
 8001730:	f004 fcf8 	bl	8006124 <iprintf>

  	// <---- --- Open file to read --- ---->
  	fresult = f_open(&file, "/sbzrgn.txt", FA_READ);
 8001734:	2201      	movs	r2, #1
 8001736:	4942      	ldr	r1, [pc, #264]	@ (8001840 <main+0x25c>)
 8001738:	4842      	ldr	r0, [pc, #264]	@ (8001844 <main+0x260>)
 800173a:	f003 fd31 	bl	80051a0 <f_open>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <main+0x230>)
 8001744:	701a      	strb	r2, [r3, #0]

  	// <---- --- Read string from the file --- ---->
  	f_gets(buffer, f_size(&file), &file);
 8001746:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <main+0x260>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4a3e      	ldr	r2, [pc, #248]	@ (8001844 <main+0x260>)
 800174c:	4619      	mov	r1, r3
 800174e:	4843      	ldr	r0, [pc, #268]	@ (800185c <main+0x278>)
 8001750:	f004 faf1 	bl	8005d36 <f_gets>
  	printf("\t string is... %s \n", buffer);
 8001754:	4941      	ldr	r1, [pc, #260]	@ (800185c <main+0x278>)
 8001756:	4842      	ldr	r0, [pc, #264]	@ (8001860 <main+0x27c>)
 8001758:	f004 fce4 	bl	8006124 <iprintf>

  	// <---- --- Close file --- ---->
  	f_close(&file);
 800175c:	4839      	ldr	r0, [pc, #228]	@ (8001844 <main+0x260>)
 800175e:	f004 fa0b 	bl	8005b78 <f_close>
  	clear_buffer();
 8001762:	f7ff ff07 	bl	8001574 <clear_buffer>

  	// <---- -------------------------- The following operation is using f_write and f_read -------------------------- ---->
  	// <---- --- Create second file with read write access and open it --- ---->
  	fresult = f_open(&file, "/MRL.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001766:	220a      	movs	r2, #10
 8001768:	493e      	ldr	r1, [pc, #248]	@ (8001864 <main+0x280>)
 800176a:	4836      	ldr	r0, [pc, #216]	@ (8001844 <main+0x260>)
 800176c:	f003 fd18 	bl	80051a0 <f_open>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <main+0x230>)
 8001776:	701a      	strb	r2, [r3, #0]

  	// <---- --- Writing text --- ---->
  	strcpy (buffer, "This is MRL.txt, written using ""f_write"" and it says Hello from MRL \n");
 8001778:	4a38      	ldr	r2, [pc, #224]	@ (800185c <main+0x278>)
 800177a:	4b3b      	ldr	r3, [pc, #236]	@ (8001868 <main+0x284>)
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	2344      	movs	r3, #68	@ 0x44
 8001782:	461a      	mov	r2, r3
 8001784:	f004 fd9f 	bl	80062c6 <memcpy>
  	fresult = f_write(&file, buffer, sizeof(buffer), &bw);
 8001788:	4b38      	ldr	r3, [pc, #224]	@ (800186c <main+0x288>)
 800178a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800178e:	4933      	ldr	r1, [pc, #204]	@ (800185c <main+0x278>)
 8001790:	482c      	ldr	r0, [pc, #176]	@ (8001844 <main+0x260>)
 8001792:	f003 fffe 	bl	8005792 <f_write>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <main+0x230>)
 800179c:	701a      	strb	r2, [r3, #0]
  	printf("\t MRL.txt created and data is written %d \n", fresult);
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <main+0x230>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4832      	ldr	r0, [pc, #200]	@ (8001870 <main+0x28c>)
 80017a6:	f004 fcbd 	bl	8006124 <iprintf>

  	// <---- --- Close file --- ---->
  	f_close(&file);
 80017aa:	4826      	ldr	r0, [pc, #152]	@ (8001844 <main+0x260>)
 80017ac:	f004 f9e4 	bl	8005b78 <f_close>
  	clear_buffer();
 80017b0:	f7ff fee0 	bl	8001574 <clear_buffer>

  	// <---- --- Open second file to read --- ---->
  	fresult = f_open(&file, "/MRL.txt", FA_READ);
 80017b4:	2201      	movs	r2, #1
 80017b6:	492b      	ldr	r1, [pc, #172]	@ (8001864 <main+0x280>)
 80017b8:	4822      	ldr	r0, [pc, #136]	@ (8001844 <main+0x260>)
 80017ba:	f003 fcf1 	bl	80051a0 <f_open>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <main+0x230>)
 80017c4:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <main+0x230>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <main+0x1f8>
  		printf("\t MRL.txt is open and the data is shown below %d \n", fresult);
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <main+0x230>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4827      	ldr	r0, [pc, #156]	@ (8001874 <main+0x290>)
 80017d6:	f004 fca5 	bl	8006124 <iprintf>
 80017da:	e005      	b.n	80017e8 <main+0x204>
  	else
  		printf("\t Error! MRL.txt is not open %d \n", fresult);
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <main+0x230>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4825      	ldr	r0, [pc, #148]	@ (8001878 <main+0x294>)
 80017e4:	f004 fc9e 	bl	8006124 <iprintf>

  	// <---- --- Read data from the file --- ---->
  	f_read (&file, buffer, f_size(&file), &br);
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <main+0x260>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <main+0x298>)
 80017ee:	491b      	ldr	r1, [pc, #108]	@ (800185c <main+0x278>)
 80017f0:	4814      	ldr	r0, [pc, #80]	@ (8001844 <main+0x260>)
 80017f2:	f003 fe8f 	bl	8005514 <f_read>
  	printf("\t string is... %s \n", buffer);
 80017f6:	4919      	ldr	r1, [pc, #100]	@ (800185c <main+0x278>)
 80017f8:	4819      	ldr	r0, [pc, #100]	@ (8001860 <main+0x27c>)
 80017fa:	f004 fc93 	bl	8006124 <iprintf>

  	// <---- --- Close file --- ---->
  	f_close(&file);
 80017fe:	4811      	ldr	r0, [pc, #68]	@ (8001844 <main+0x260>)
 8001800:	f004 f9ba 	bl	8005b78 <f_close>
  	clear_buffer();
 8001804:	f7ff feb6 	bl	8001574 <clear_buffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <main+0x224>
 800180c:	08006e34 	.word	0x08006e34
 8001810:	200000f8 	.word	0x200000f8
 8001814:	20000558 	.word	0x20000558
 8001818:	08006e38 	.word	0x08006e38
 800181c:	08006e60 	.word	0x08006e60
 8001820:	20000564 	.word	0x20000564
 8001824:	20000568 	.word	0x20000568
 8001828:	08006e88 	.word	0x08006e88
 800182c:	3fe00000 	.word	0x3fe00000
 8001830:	2000056c 	.word	0x2000056c
 8001834:	08006e8c 	.word	0x08006e8c
 8001838:	20000570 	.word	0x20000570
 800183c:	08006eac 	.word	0x08006eac
 8001840:	08006ecc 	.word	0x08006ecc
 8001844:	20000328 	.word	0x20000328
 8001848:	08006ed8 	.word	0x08006ed8
 800184c:	08006f10 	.word	0x08006f10
 8001850:	08006f38 	.word	0x08006f38
 8001854:	08006f7c 	.word	0x08006f7c
 8001858:	08006fb0 	.word	0x08006fb0
 800185c:	20000574 	.word	0x20000574
 8001860:	08006fd8 	.word	0x08006fd8
 8001864:	08006fec 	.word	0x08006fec
 8001868:	08006ff8 	.word	0x08006ff8
 800186c:	20000560 	.word	0x20000560
 8001870:	0800703c 	.word	0x0800703c
 8001874:	08007068 	.word	0x08007068
 8001878:	0800709c 	.word	0x0800709c
 800187c:	2000055c 	.word	0x2000055c

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	@ 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	2230      	movs	r2, #48	@ 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f004 fc9d 	bl	80061ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <SystemClock_Config+0xc8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	4a26      	ldr	r2, [pc, #152]	@ (8001948 <SystemClock_Config+0xc8>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b4:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <SystemClock_Config+0xc8>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	4b21      	ldr	r3, [pc, #132]	@ (800194c <SystemClock_Config+0xcc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a20      	ldr	r2, [pc, #128]	@ (800194c <SystemClock_Config+0xcc>)
 80018ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <SystemClock_Config+0xcc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018f4:	2364      	movs	r3, #100	@ 0x64
 80018f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018fc:	2304      	movs	r3, #4
 80018fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fda3 	bl	8002450 <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001910:	f000 f8c2 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001914:	230f      	movs	r3, #15
 8001916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2103      	movs	r1, #3
 8001930:	4618      	mov	r0, r3
 8001932:	f001 f805 	bl	8002940 <HAL_RCC_ClockConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800193c:	f000 f8ac 	bl	8001a98 <Error_Handler>
  }
}
 8001940:	bf00      	nop
 8001942:	3750      	adds	r7, #80	@ 0x50
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001954:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001956:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <MX_SPI2_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_SPI2_Init+0x64>)
 800195c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <MX_SPI2_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_SPI2_Init+0x64>)
 800197c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001980:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001984:	2210      	movs	r2, #16
 8001986:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <MX_SPI2_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <MX_SPI2_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_SPI2_Init+0x64>)
 800199c:	220a      	movs	r2, #10
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <MX_SPI2_Init+0x64>)
 80019a2:	f001 f9b9 	bl	8002d18 <HAL_SPI_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019ac:	f000 f874 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200000a0 	.word	0x200000a0
 80019b8:	40003800 	.word	0x40003800

080019bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a2d      	ldr	r2, [pc, #180]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a1f      	ldr	r2, [pc, #124]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a14:	f043 0310 	orr.w	r3, r3, #16
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <MX_GPIO_Init+0xd4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a64:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <MX_GPIO_Init+0xd8>)
 8001a66:	f000 fcd9 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <MX_GPIO_Init+0xd8>)
 8001a84:	f000 fb46 	bl	8002114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	@ 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40021000 	.word	0x40021000

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	@ (8001bb4 <HAL_SPI_MspInit+0xc0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d14a      	bne.n	8001bac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_SPI_MspInit+0xc4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <HAL_SPI_MspInit+0xc8>)
 8001b86:	f000 fac5 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9c:	2305      	movs	r3, #5
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <HAL_SPI_MspInit+0xcc>)
 8001ba8:	f000 fab4 	bl	8002114 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	@ 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40003800 	.word	0x40003800
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <SDTimer_Handler+0x40>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <SDTimer_Handler+0x1c>
    Timer1--;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <SDTimer_Handler+0x40>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <SDTimer_Handler+0x40>)
 8001bde:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <SDTimer_Handler+0x44>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <SDTimer_Handler+0x34>
    Timer2--;
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <SDTimer_Handler+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SDTimer_Handler+0x44>)
 8001bf6:	701a      	strb	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000d75 	.word	0x20000d75
 8001c08:	20000d76 	.word	0x20000d76

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <NMI_Handler+0x4>

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <MemManage_Handler+0x4>

08001c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCount++;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <SysTick_Handler+0x30>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <SysTick_Handler+0x30>)
 8001c70:	701a      	strb	r2, [r3, #0]
	if(FatFsCount >= 10)
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <SysTick_Handler+0x30>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d904      	bls.n	8001c86 <SysTick_Handler+0x26>
	{
		FatFsCount = 0;
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Handler+0x30>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001c82:	f7ff ff9f 	bl	8001bc4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c86:	f000 f91b 	bl	8001ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000d74 	.word	0x20000d74

08001c94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e00a      	b.n	8001cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca6:	f3af 8000 	nop.w
 8001caa:	4601      	mov	r1, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	b2ca      	uxtb	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf0      	blt.n	8001ca6 <_read+0x12>
  }

  return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f004 fa80 	bl	800626c <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20020000 	.word	0x20020000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	20000d78 	.word	0x20000d78
 8001da0:	20000f08 	.word	0x20000f08

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dcc:	f7ff ffea 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dd2:	490d      	ldr	r1, [pc, #52]	@ (8001e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f004 fa3f 	bl	8006278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfa:	f7ff fbf3 	bl	80015e4 <main>
  bx  lr    
 8001dfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e08:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001e0c:	080071d8 	.word	0x080071d8
  ldr r2, =_sbss
 8001e10:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e14:	20000f08 	.word	0x20000f08

08001e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC_IRQHandler>
	...

08001e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <HAL_Init+0x40>)
 8001e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <HAL_Init+0x40>)
 8001e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a07      	ldr	r2, [pc, #28]	@ (8001e5c <HAL_Init+0x40>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f000 f931 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f000 f808 	bl	8001e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e50:	f7ff fe28 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023c00 	.word	0x40023c00

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_InitTick+0x54>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_InitTick+0x58>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f93b 	bl	80020fa <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00e      	b.n	8001eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d80a      	bhi.n	8001eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f000 f911 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea0:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <HAL_InitTick+0x5c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	2000000c 	.word	0x2000000c
 8001ebc:	20000008 	.word	0x20000008

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	20000d7c 	.word	0x20000d7c

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000d7c 	.word	0x20000d7c

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <__NVIC_SetPriorityGrouping>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_SetPriority>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff47 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff5c 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffb0 	bl	8002068 <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e159      	b.n	80023e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8148 	bne.w	80023de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	2b02      	cmp	r3, #2
 8002164:	d130      	bne.n	80021c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a2 	beq.w	80023de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b57      	ldr	r3, [pc, #348]	@ (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a56      	ldr	r2, [pc, #344]	@ (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <HAL_GPIO_Init+0x2e8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a52      	ldr	r2, [pc, #328]	@ (8002400 <HAL_GPIO_Init+0x2ec>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a49      	ldr	r2, [pc, #292]	@ (8002404 <HAL_GPIO_Init+0x2f0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x202>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a48      	ldr	r2, [pc, #288]	@ (8002408 <HAL_GPIO_Init+0x2f4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x1fe>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a47      	ldr	r2, [pc, #284]	@ (800240c <HAL_GPIO_Init+0x2f8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x1fa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a46      	ldr	r2, [pc, #280]	@ (8002410 <HAL_GPIO_Init+0x2fc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x1f6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a45      	ldr	r2, [pc, #276]	@ (8002414 <HAL_GPIO_Init+0x300>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x1f2>
 8002302:	2304      	movs	r3, #4
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002306:	2307      	movs	r3, #7
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	@ (8002400 <HAL_GPIO_Init+0x2ec>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_GPIO_Init+0x304>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <HAL_GPIO_Init+0x304>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_GPIO_Init+0x304>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a24      	ldr	r2, [pc, #144]	@ (8002418 <HAL_GPIO_Init+0x304>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_GPIO_Init+0x304>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f aea2 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	@ 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002438:	e003      	b.n	8002442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e267      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d075      	beq.n	800255a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00c      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002482:	2b08      	cmp	r3, #8
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b7e      	ldr	r3, [pc, #504]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05b      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d157      	bne.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e242      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x74>
 80024b6:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6d      	ldr	r3, [pc, #436]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6c      	ldr	r2, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024e8:	4b69      	ldr	r3, [pc, #420]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fcee 	bl	8001ee8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fcea 	bl	8001ee8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e207      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b5b      	ldr	r3, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc0>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fcda 	bl	8001ee8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fcd6 	bl	8001ee8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1f3      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b51      	ldr	r3, [pc, #324]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1c7      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4937      	ldr	r1, [pc, #220]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_OscConfig+0x244>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff fc8f 	bl	8001ee8 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff fc8b 	bl	8001ee8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1a8      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4925      	ldr	r1, [pc, #148]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x244>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff fc6e 	bl	8001ee8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff fc6a 	bl	8001ee8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e187      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d036      	beq.n	80026a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_OscConfig+0x248>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7ff fc4e 	bl	8001ee8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fc4a 	bl	8001ee8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e167      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x200>
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_OscConfig+0x248>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fc37 	bl	8001ee8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e00e      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7ff fc33 	bl	8001ee8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d907      	bls.n	800269c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e150      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	42470000 	.word	0x42470000
 8002698:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ea      	bne.n	800267e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8097 	beq.w	80027e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b81      	ldr	r3, [pc, #516]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b7d      	ldr	r3, [pc, #500]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	4a7c      	ldr	r2, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d6:	4b7a      	ldr	r3, [pc, #488]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b77      	ldr	r3, [pc, #476]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b74      	ldr	r3, [pc, #464]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a73      	ldr	r2, [pc, #460]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fbf3 	bl	8001ee8 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7ff fbef 	bl	8001ee8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e10c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x2ea>
 800272c:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a63      	ldr	r2, [pc, #396]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x30c>
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	4a5e      	ldr	r2, [pc, #376]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	@ 0x70
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800275c:	4b58      	ldr	r3, [pc, #352]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a57      	ldr	r2, [pc, #348]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	4b55      	ldr	r3, [pc, #340]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a54      	ldr	r2, [pc, #336]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 0304 	bic.w	r3, r3, #4
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff fbb4 	bl	8001ee8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7ff fbb0 	bl	8001ee8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0cb      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ee      	beq.n	8002784 <HAL_RCC_OscConfig+0x334>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7ff fb9e 	bl	8001ee8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff fb9a 	bl	8001ee8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b5      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ee      	bne.n	80027b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a38      	ldr	r2, [pc, #224]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a1 	beq.w	8002930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d05c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d141      	bne.n	8002886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff fb6e 	bl	8001ee8 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7ff fb6a 	bl	8001ee8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e087      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	491b      	ldr	r1, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7ff fb43 	bl	8001ee8 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7ff fb3f 	bl	8001ee8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e05c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x416>
 8002884:	e054      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff fb2c 	bl	8001ee8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff fb28 	bl	8001ee8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e045      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x444>
 80028b2:	e03d      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e038      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x4ec>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d028      	beq.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d121      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11a      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cc      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b68      	ldr	r3, [pc, #416]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d044      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e067      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4934      	ldr	r1, [pc, #208]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7ff fa5a 	bl	8001ee8 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7ff fa56 	bl	8001ee8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d20c      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f9ba 	bl	8001e60 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08007104 	.word	0x08007104
 8002b04:	20000004 	.word	0x20000004
 8002b08:	20000008 	.word	0x20000008

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b10:	b094      	sub	sp, #80	@ 0x50
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b79      	ldr	r3, [pc, #484]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80e1 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e0db      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b73      	ldr	r3, [pc, #460]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b44:	e0db      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b73      	ldr	r3, [pc, #460]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4a:	e0d8      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b6d      	ldr	r3, [pc, #436]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b7e:	4622      	mov	r2, r4
 8002b80:	462b      	mov	r3, r5
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	0159      	lsls	r1, r3, #5
 8002b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b90:	0150      	lsls	r0, r2, #5
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4621      	mov	r1, r4
 8002b98:	1a51      	subs	r1, r2, r1
 8002b9a:	6139      	str	r1, [r7, #16]
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	018b      	lsls	r3, r1, #6
 8002bb4:	4651      	mov	r1, sl
 8002bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bba:	4651      	mov	r1, sl
 8002bbc:	018a      	lsls	r2, r1, #6
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bde:	4690      	mov	r8, r2
 8002be0:	4699      	mov	r9, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	eb18 0303 	adds.w	r3, r8, r3
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	462b      	mov	r3, r5
 8002bec:	eb49 0303 	adc.w	r3, r9, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	024b      	lsls	r3, r1, #9
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c08:	4621      	mov	r1, r4
 8002c0a:	024a      	lsls	r2, r1, #9
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c1c:	f7fd fe36 	bl	800088c <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c28:	e058      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2a:	4b38      	ldr	r3, [pc, #224]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	2200      	movs	r2, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	4611      	mov	r1, r2
 8002c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	0159      	lsls	r1, r3, #5
 8002c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c56:	0150      	lsls	r0, r2, #5
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c62:	4649      	mov	r1, r9
 8002c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c80:	eb63 050b 	sbc.w	r5, r3, fp
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	00eb      	lsls	r3, r5, #3
 8002c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c92:	00e2      	lsls	r2, r4, #3
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	4643      	mov	r3, r8
 8002c9a:	18e3      	adds	r3, r4, r3
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	eb45 0303 	adc.w	r3, r5, r3
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	61fa      	str	r2, [r7, #28]
 8002ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd0:	f7fd fddc 	bl	800088c <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3750      	adds	r7, #80	@ 0x50
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07b      	b.n	8002e22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d3a:	d009      	beq.n	8002d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
 8002d42:	e005      	b.n	8002d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fec2 	bl	8001af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd4:	ea42 0103 	orr.w	r1, r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0104 	and.w	r1, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	f003 0210 	and.w	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e3a:	f7ff f855 	bl	8001ee8 <HAL_GetTick>
 8002e3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d001      	beq.n	8002e54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
 8002e52:	e12a      	b.n	80030aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x36>
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e122      	b.n	80030aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_SPI_Transmit+0x48>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e11b      	b.n	80030aa <HAL_SPI_Transmit+0x280>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	88fa      	ldrh	r2, [r7, #6]
 8002e92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d007      	beq.n	8002f00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f08:	d152      	bne.n	8002fb0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Transmit+0xee>
 8002f12:	8b7b      	ldrh	r3, [r7, #26]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d145      	bne.n	8002fa4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f3c:	e032      	b.n	8002fa4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d112      	bne.n	8002f72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f70:	e018      	b.n	8002fa4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f72:	f7fe ffb9 	bl	8001ee8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d803      	bhi.n	8002f8a <HAL_SPI_Transmit+0x160>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x166>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e082      	b.n	80030aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1c7      	bne.n	8002f3e <HAL_SPI_Transmit+0x114>
 8002fae:	e053      	b.n	8003058 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0x194>
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d147      	bne.n	800304e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fe4:	e033      	b.n	800304e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d113      	bne.n	800301c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	86da      	strh	r2, [r3, #54]	@ 0x36
 800301a:	e018      	b.n	800304e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800301c:	f7fe ff64 	bl	8001ee8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d803      	bhi.n	8003034 <HAL_SPI_Transmit+0x20a>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d102      	bne.n	800303a <HAL_SPI_Transmit+0x210>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e02d      	b.n	80030aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1c6      	bne.n	8002fe6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa59 	bl	8003514 <SPI_EndRxTxTransaction>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	@ 0x28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030c4:	f7fe ff10 	bl	8001ee8 <HAL_GetTick>
 80030c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030dc:	7ffb      	ldrb	r3, [r7, #31]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d00c      	beq.n	80030fc <HAL_SPI_TransmitReceive+0x4a>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e8:	d106      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x46>
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d001      	beq.n	80030fc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e17f      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_SPI_TransmitReceive+0x5c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_SPI_TransmitReceive+0x5c>
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e174      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x6e>
 800311c:	2302      	movs	r3, #2
 800311e:	e16d      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b04      	cmp	r3, #4
 8003132:	d003      	beq.n	800313c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	887a      	ldrh	r2, [r7, #2]
 800315e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d007      	beq.n	8003190 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003198:	d17e      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0xf6>
 80031a2:	8afb      	ldrh	r3, [r7, #22]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d16c      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031cc:	e059      	b.n	8003282 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11b      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x162>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x162>
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d113      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d119      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x1a4>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d014      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	b292      	uxth	r2, r2
 8003238:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003252:	2301      	movs	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003256:	f7fe fe47 	bl	8001ee8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003262:	429a      	cmp	r2, r3
 8003264:	d80d      	bhi.n	8003282 <HAL_SPI_TransmitReceive+0x1d0>
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d009      	beq.n	8003282 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0bc      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1a0      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x11c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d19b      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x11c>
 8003296:	e082      	b.n	800339e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_TransmitReceive+0x1f4>
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d171      	bne.n	800338a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	7812      	ldrb	r2, [r2, #0]
 80032b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032cc:	e05d      	b.n	800338a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d11c      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x264>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d017      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x264>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d114      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d119      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x2a6>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d014      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003358:	f7fe fdc6 	bl	8001ee8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003364:	429a      	cmp	r2, r3
 8003366:	d803      	bhi.n	8003370 <HAL_SPI_TransmitReceive+0x2be>
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d102      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x2c4>
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e038      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d19c      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x21c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d197      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8b6 	bl	8003514 <SPI_EndRxTxTransaction>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e01d      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	@ 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003414:	f7fe fd68 	bl	8001ee8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	4413      	add	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003424:	f7fe fd60 	bl	8001ee8 <HAL_GetTick>
 8003428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800342a:	4b39      	ldr	r3, [pc, #228]	@ (8003510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	015b      	lsls	r3, r3, #5
 8003430:	0d1b      	lsrs	r3, r3, #20
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343a:	e054      	b.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d050      	beq.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003444:	f7fe fd50 	bl	8001ee8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	429a      	cmp	r2, r3
 8003452:	d902      	bls.n	800345a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d13d      	bne.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003472:	d111      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347c:	d004      	beq.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003486:	d107      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a0:	d10f      	bne.n	80034c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e017      	b.n	8003506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d19b      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000004 	.word	0x20000004

08003514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2201      	movs	r2, #1
 8003528:	2102      	movs	r1, #2
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff ff6a 	bl	8003404 <SPI_WaitFlagStateUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e032      	b.n	80035ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <SPI_EndRxTxTransaction+0xa0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1b      	ldr	r2, [pc, #108]	@ (80035b8 <SPI_EndRxTxTransaction+0xa4>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	0d5b      	lsrs	r3, r3, #21
 8003552:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003564:	d112      	bne.n	800358c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2200      	movs	r2, #0
 800356e:	2180      	movs	r1, #128	@ 0x80
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff ff47 	bl	8003404 <SPI_WaitFlagStateUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d016      	beq.n	80035aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003580:	f043 0220 	orr.w	r2, r3, #32
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e00f      	b.n	80035ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3b01      	subs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b80      	cmp	r3, #128	@ 0x80
 80035a4:	d0f2      	beq.n	800358c <SPI_EndRxTxTransaction+0x78>
 80035a6:	e000      	b.n	80035aa <SPI_EndRxTxTransaction+0x96>
        break;
 80035a8:	bf00      	nop
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000004 	.word	0x20000004
 80035b8:	165e9f81 	.word	0x165e9f81

080035bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035c0:	4904      	ldr	r1, [pc, #16]	@ (80035d4 <MX_FATFS_Init+0x18>)
 80035c2:	4805      	ldr	r0, [pc, #20]	@ (80035d8 <MX_FATFS_Init+0x1c>)
 80035c4:	f002 fcdc 	bl	8005f80 <FATFS_LinkDriver>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b03      	ldr	r3, [pc, #12]	@ (80035dc <MX_FATFS_Init+0x20>)
 80035ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000d84 	.word	0x20000d84
 80035d8:	20000010 	.word	0x20000010
 80035dc:	20000d80 	.word	0x20000d80

080035e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80035e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fc77 	bl	8000ef0 <SD_disk_initialize>
 8003602:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fd55 	bl	80010c8 <SD_disk_status>
 800361e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003638:	7bf8      	ldrb	r0, [r7, #15]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	f7fd fd58 	bl	80010f4 <SD_disk_read>
 8003644:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4603      	mov	r3, r0
 800365c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800365e:	7bf8      	ldrb	r0, [r7, #15]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	f7fd fdaf 	bl	80011c8 <SD_disk_write>
 800366a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	603a      	str	r2, [r7, #0]
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	460b      	mov	r3, r1
 8003682:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003684:	79b9      	ldrb	r1, [r7, #6]
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fe20 	bl	80012d0 <SD_disk_ioctl>
 8003690:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <disk_status+0x30>)
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	79fa      	ldrb	r2, [r7, #7]
 80036b4:	4905      	ldr	r1, [pc, #20]	@ (80036cc <disk_status+0x30>)
 80036b6:	440a      	add	r2, r1
 80036b8:	7a12      	ldrb	r2, [r2, #8]
 80036ba:	4610      	mov	r0, r2
 80036bc:	4798      	blx	r3
 80036be:	4603      	mov	r3, r0
 80036c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000db0 	.word	0x20000db0

080036d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	4a0e      	ldr	r2, [pc, #56]	@ (800371c <disk_initialize+0x4c>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d114      	bne.n	8003712 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <disk_initialize+0x4c>)
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	79fa      	ldrb	r2, [r7, #7]
 80036f6:	4909      	ldr	r1, [pc, #36]	@ (800371c <disk_initialize+0x4c>)
 80036f8:	440a      	add	r2, r1
 80036fa:	7a12      	ldrb	r2, [r2, #8]
 80036fc:	4610      	mov	r0, r2
 80036fe:	4798      	blx	r3
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	4a03      	ldr	r2, [pc, #12]	@ (800371c <disk_initialize+0x4c>)
 800370e:	2101      	movs	r1, #1
 8003710:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000db0 	.word	0x20000db0

08003720 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <disk_read+0x3c>)
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	689c      	ldr	r4, [r3, #8]
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	4a07      	ldr	r2, [pc, #28]	@ (800375c <disk_read+0x3c>)
 8003740:	4413      	add	r3, r2
 8003742:	7a18      	ldrb	r0, [r3, #8]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	47a0      	blx	r4
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}
 800375a:	bf00      	nop
 800375c:	20000db0 	.word	0x20000db0

08003760 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <disk_write+0x3c>)
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68dc      	ldr	r4, [r3, #12]
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	4a07      	ldr	r2, [pc, #28]	@ (800379c <disk_write+0x3c>)
 8003780:	4413      	add	r3, r2
 8003782:	7a18      	ldrb	r0, [r3, #8]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	47a0      	blx	r4
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
}
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}
 800379a:	bf00      	nop
 800379c:	20000db0 	.word	0x20000db0

080037a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	603a      	str	r2, [r7, #0]
 80037aa:	71fb      	strb	r3, [r7, #7]
 80037ac:	460b      	mov	r3, r1
 80037ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	4a09      	ldr	r2, [pc, #36]	@ (80037d8 <disk_ioctl+0x38>)
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	4906      	ldr	r1, [pc, #24]	@ (80037d8 <disk_ioctl+0x38>)
 80037c0:	440a      	add	r2, r1
 80037c2:	7a10      	ldrb	r0, [r2, #8]
 80037c4:	79b9      	ldrb	r1, [r7, #6]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	4798      	blx	r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000db0 	.word	0x20000db0

080037dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80037ec:	89fb      	ldrh	r3, [r7, #14]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	b21a      	sxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80037fe:	89fb      	ldrh	r3, [r7, #14]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3303      	adds	r3, #3
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	3202      	adds	r2, #2
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	3201      	adds	r2, #1
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	7812      	ldrb	r2, [r2, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
	return rv;
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	887a      	ldrh	r2, [r7, #2]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	1c53      	adds	r3, r2, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	6179      	str	r1, [r7, #20]
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3b01      	subs	r3, #1
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f1      	bne.n	80038fa <mem_cpy+0x1a>
	}
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	617a      	str	r2, [r7, #20]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3b01      	subs	r3, #1
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f3      	bne.n	8003932 <mem_set+0x10>
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	@ 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	61fa      	str	r2, [r7, #28]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	61ba      	str	r2, [r7, #24]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	1acb      	subs	r3, r1, r3
 8003984:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3b01      	subs	r3, #1
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <mem_cmp+0x40>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0eb      	beq.n	8003970 <mem_cmp+0x18>

	return r;
 8003998:	697b      	ldr	r3, [r7, #20]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80039b0:	e002      	b.n	80039b8 <chk_chr+0x12>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3301      	adds	r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <chk_chr+0x26>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d1f2      	bne.n	80039b2 <chk_chr+0xc>
	return *str;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	781b      	ldrb	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e029      	b.n	8003a44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80039f0:	4a27      	ldr	r2, [pc, #156]	@ (8003a90 <chk_lock+0xb4>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01d      	beq.n	8003a3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80039fe:	4a24      	ldr	r2, [pc, #144]	@ (8003a90 <chk_lock+0xb4>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d116      	bne.n	8003a3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003a10:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <chk_lock+0xb4>)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4413      	add	r3, r2
 8003a18:	3304      	adds	r3, #4
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d10c      	bne.n	8003a3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a24:	4a1a      	ldr	r2, [pc, #104]	@ (8003a90 <chk_lock+0xb4>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d102      	bne.n	8003a3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a38:	e007      	b.n	8003a4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d9d2      	bls.n	80039f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d109      	bne.n	8003a64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <chk_lock+0x80>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d101      	bne.n	8003a60 <chk_lock+0x84>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e010      	b.n	8003a82 <chk_lock+0xa6>
 8003a60:	2312      	movs	r3, #18
 8003a62:	e00e      	b.n	8003a82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <chk_lock+0xa0>
 8003a6a:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <chk_lock+0xb4>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	4413      	add	r3, r2
 8003a72:	330c      	adds	r3, #12
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7a:	d101      	bne.n	8003a80 <chk_lock+0xa4>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	e000      	b.n	8003a82 <chk_lock+0xa6>
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000d90 	.word	0x20000d90

08003a94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	e002      	b.n	8003aa6 <enq_lock+0x12>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d806      	bhi.n	8003aba <enq_lock+0x26>
 8003aac:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <enq_lock+0x40>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	4413      	add	r3, r2
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f2      	bne.n	8003aa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000d90 	.word	0x20000d90

08003ad8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e01f      	b.n	8003b28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003ae8:	4a41      	ldr	r2, [pc, #260]	@ (8003bf0 <inc_lock+0x118>)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d113      	bne.n	8003b22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003afa:	4a3d      	ldr	r2, [pc, #244]	@ (8003bf0 <inc_lock+0x118>)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d109      	bne.n	8003b22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003b0e:	4a38      	ldr	r2, [pc, #224]	@ (8003bf0 <inc_lock+0x118>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	4413      	add	r3, r2
 8003b16:	3308      	adds	r3, #8
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d006      	beq.n	8003b30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3301      	adds	r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d9dc      	bls.n	8003ae8 <inc_lock+0x10>
 8003b2e:	e000      	b.n	8003b32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003b30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d132      	bne.n	8003b9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <inc_lock+0x6c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d806      	bhi.n	8003b58 <inc_lock+0x80>
 8003b4a:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <inc_lock+0x118>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	4413      	add	r3, r2
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f2      	bne.n	8003b3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d101      	bne.n	8003b62 <inc_lock+0x8a>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e040      	b.n	8003be4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4922      	ldr	r1, [pc, #136]	@ (8003bf0 <inc_lock+0x118>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	440b      	add	r3, r1
 8003b6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	491e      	ldr	r1, [pc, #120]	@ (8003bf0 <inc_lock+0x118>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	491a      	ldr	r1, [pc, #104]	@ (8003bf0 <inc_lock+0x118>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003b90:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <inc_lock+0x118>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	330c      	adds	r3, #12
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <inc_lock+0xe0>
 8003ba4:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <inc_lock+0x118>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	330c      	adds	r3, #12
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <inc_lock+0xe0>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e015      	b.n	8003be4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <inc_lock+0xf8>
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf0 <inc_lock+0x118>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	4413      	add	r3, r2
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	e001      	b.n	8003bd4 <inc_lock+0xfc>
 8003bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bd4:	4906      	ldr	r1, [pc, #24]	@ (8003bf0 <inc_lock+0x118>)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	440b      	add	r3, r1
 8003bdc:	330c      	adds	r3, #12
 8003bde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	20000d90 	.word	0x20000d90

08003bf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d825      	bhi.n	8003c54 <dec_lock+0x60>
		n = Files[i].ctr;
 8003c08:	4a17      	ldr	r2, [pc, #92]	@ (8003c68 <dec_lock+0x74>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	4413      	add	r3, r2
 8003c10:	330c      	adds	r3, #12
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003c16:	89fb      	ldrh	r3, [r7, #14]
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1c:	d101      	bne.n	8003c22 <dec_lock+0x2e>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003c22:	89fb      	ldrh	r3, [r7, #14]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <dec_lock+0x3a>
 8003c28:	89fb      	ldrh	r3, [r7, #14]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c68 <dec_lock+0x74>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	4413      	add	r3, r2
 8003c36:	330c      	adds	r3, #12
 8003c38:	89fa      	ldrh	r2, [r7, #14]
 8003c3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <dec_lock+0x5a>
 8003c42:	4a09      	ldr	r2, [pc, #36]	@ (8003c68 <dec_lock+0x74>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	737b      	strb	r3, [r7, #13]
 8003c52:	e001      	b.n	8003c58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003c54:	2302      	movs	r3, #2
 8003c56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003c58:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000d90 	.word	0x20000d90

08003c6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e010      	b.n	8003c9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <clear_lock+0x44>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4413      	add	r3, r2
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d105      	bne.n	8003c96 <clear_lock+0x2a>
 8003c8a:	4a09      	ldr	r2, [pc, #36]	@ (8003cb0 <clear_lock+0x44>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d9eb      	bls.n	8003c7a <clear_lock+0xe>
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	20000d90 	.word	0x20000d90

08003cb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d034      	beq.n	8003d32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7858      	ldrb	r0, [r3, #1]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003cd8:	2301      	movs	r3, #1
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	f7ff fd40 	bl	8003760 <disk_write>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <sync_window+0x38>
			res = FR_DISK_ERR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e022      	b.n	8003d32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d217      	bcs.n	8003d32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	789b      	ldrb	r3, [r3, #2]
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e010      	b.n	8003d2c <sync_window+0x78>
					wsect += fs->fsize;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4413      	add	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7858      	ldrb	r0, [r3, #1]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003d1e:	2301      	movs	r3, #1
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	f7ff fd1d 	bl	8003760 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d8eb      	bhi.n	8003d0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d01b      	beq.n	8003d8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ffad 	bl	8003cb4 <sync_window>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d113      	bne.n	8003d8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7858      	ldrb	r0, [r3, #1]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003d6e:	2301      	movs	r3, #1
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f7ff fcd5 	bl	8003720 <disk_read>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff87 	bl	8003cb4 <sync_window>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d158      	bne.n	8003e62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d148      	bne.n	8003e4a <sync_fs+0xb2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d144      	bne.n	8003e4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3330      	adds	r3, #48	@ 0x30
 8003dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fda9 	bl	8003922 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3330      	adds	r3, #48	@ 0x30
 8003dd4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003dd8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fd38 	bl	8003852 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3330      	adds	r3, #48	@ 0x30
 8003de6:	4921      	ldr	r1, [pc, #132]	@ (8003e6c <sync_fs+0xd4>)
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fd4d 	bl	8003888 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3330      	adds	r3, #48	@ 0x30
 8003df2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003df6:	491e      	ldr	r1, [pc, #120]	@ (8003e70 <sync_fs+0xd8>)
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fd45 	bl	8003888 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3330      	adds	r3, #48	@ 0x30
 8003e02:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f7ff fd3b 	bl	8003888 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3330      	adds	r3, #48	@ 0x30
 8003e16:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7ff fd31 	bl	8003888 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7858      	ldrb	r0, [r3, #1]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f7ff fc8e 	bl	8003760 <disk_write>
			fs->fsi_flag = 0;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	785b      	ldrb	r3, [r3, #1]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fca4 	bl	80037a0 <disk_ioctl>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <sync_fs+0xca>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	41615252 	.word	0x41615252
 8003e70:	61417272 	.word	0x61417272

08003e74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3b02      	subs	r3, #2
 8003e82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	3b02      	subs	r3, #2
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d301      	bcc.n	8003e94 <clust2sect+0x20>
 8003e90:	2300      	movs	r3, #0
 8003e92:	e008      	b.n	8003ea6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	895b      	ldrh	r3, [r3, #10]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	fb03 f202 	mul.w	r2, r3, r2
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	4413      	add	r3, r2
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d904      	bls.n	8003ed2 <get_fat+0x20>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e08e      	b.n	8003ff6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d061      	beq.n	8003faa <get_fat+0xf8>
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	dc7b      	bgt.n	8003fe2 <get_fat+0x130>
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d002      	beq.n	8003ef4 <get_fat+0x42>
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d041      	beq.n	8003f76 <get_fat+0xc4>
 8003ef2:	e076      	b.n	8003fe2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	0a5b      	lsrs	r3, r3, #9
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6938      	ldr	r0, [r7, #16]
 8003f10:	f7ff ff14 	bl	8003d3c <move_window>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d166      	bne.n	8003fe8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	60fa      	str	r2, [r7, #12]
 8003f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0a5b      	lsrs	r3, r3, #9
 8003f36:	4413      	add	r3, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6938      	ldr	r0, [r7, #16]
 8003f3c:	f7ff fefe 	bl	8003d3c <move_window>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d152      	bne.n	8003fec <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <get_fat+0xba>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	e002      	b.n	8003f72 <get_fat+0xc0>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f72:	617b      	str	r3, [r7, #20]
			break;
 8003f74:	e03f      	b.n	8003ff6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	4413      	add	r3, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f7ff feda 	bl	8003d3c <move_window>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d130      	bne.n	8003ff0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fc1c 	bl	80037dc <ld_word>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	617b      	str	r3, [r7, #20]
			break;
 8003fa8:	e025      	b.n	8003ff6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	09db      	lsrs	r3, r3, #7
 8003fb2:	4413      	add	r3, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6938      	ldr	r0, [r7, #16]
 8003fb8:	f7ff fec0 	bl	8003d3c <move_window>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003fd0:	4413      	add	r3, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fc1a 	bl	800380c <ld_dword>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003fde:	617b      	str	r3, [r7, #20]
			break;
 8003fe0:	e009      	b.n	8003ff6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e006      	b.n	8003ff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fe8:	bf00      	nop
 8003fea:	e004      	b.n	8003ff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fec:	bf00      	nop
 8003fee:	e002      	b.n	8003ff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ff0:	bf00      	nop
 8003ff2:	e000      	b.n	8003ff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ff4:	bf00      	nop
		}
	}

	return val;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b089      	sub	sp, #36	@ 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800400c:	2302      	movs	r3, #2
 800400e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b01      	cmp	r3, #1
 8004014:	f240 80d9 	bls.w	80041ca <put_fat+0x1ca>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	f080 80d3 	bcs.w	80041ca <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b03      	cmp	r3, #3
 800402a:	f000 8096 	beq.w	800415a <put_fat+0x15a>
 800402e:	2b03      	cmp	r3, #3
 8004030:	f300 80cb 	bgt.w	80041ca <put_fat+0x1ca>
 8004034:	2b01      	cmp	r3, #1
 8004036:	d002      	beq.n	800403e <put_fat+0x3e>
 8004038:	2b02      	cmp	r3, #2
 800403a:	d06e      	beq.n	800411a <put_fat+0x11a>
 800403c:	e0c5      	b.n	80041ca <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	4413      	add	r3, r2
 8004056:	4619      	mov	r1, r3
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7ff fe6f 	bl	8003d3c <move_window>
 800405e:	4603      	mov	r3, r0
 8004060:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004062:	7ffb      	ldrb	r3, [r7, #31]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 80a9 	bne.w	80041bc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1c59      	adds	r1, r3, #1
 8004074:	61b9      	str	r1, [r7, #24]
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	4413      	add	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <put_fat+0xa4>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	b25a      	sxtb	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	b25b      	sxtb	r3, r3
 800409c:	4313      	orrs	r3, r2
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e001      	b.n	80040a8 <put_fat+0xa8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	0a5b      	lsrs	r3, r3, #9
 80040ba:	4413      	add	r3, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff fe3c 	bl	8003d3c <move_window>
 80040c4:	4603      	mov	r3, r0
 80040c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d178      	bne.n	80041c0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	4413      	add	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <put_fat+0xf0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e00e      	b.n	800410e <put_fat+0x10e>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	f023 030f 	bic.w	r3, r3, #15
 80040fa:	b25a      	sxtb	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	b25b      	sxtb	r3, r3
 8004108:	4313      	orrs	r3, r2
 800410a:	b25b      	sxtb	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	70da      	strb	r2, [r3, #3]
			break;
 8004118:	e057      	b.n	80041ca <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1a      	ldr	r2, [r3, #32]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	4413      	add	r3, r2
 8004124:	4619      	mov	r1, r3
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fe08 	bl	8003d3c <move_window>
 800412c:	4603      	mov	r3, r0
 800412e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004130:	7ffb      	ldrb	r3, [r7, #31]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d146      	bne.n	80041c4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004144:	4413      	add	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	b292      	uxth	r2, r2
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fb80 	bl	8003852 <st_word>
			fs->wflag = 1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	70da      	strb	r2, [r3, #3]
			break;
 8004158:	e037      	b.n	80041ca <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	09db      	lsrs	r3, r3, #7
 8004162:	4413      	add	r3, r2
 8004164:	4619      	mov	r1, r3
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff fde8 	bl	8003d3c <move_window>
 800416c:	4603      	mov	r3, r0
 800416e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d128      	bne.n	80041c8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800418a:	4413      	add	r3, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fb3d 	bl	800380c <ld_dword>
 8004192:	4603      	mov	r3, r0
 8004194:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004198:	4323      	orrs	r3, r4
 800419a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80041aa:	4413      	add	r3, r2
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fb6a 	bl	8003888 <st_dword>
			fs->wflag = 1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	70da      	strb	r2, [r3, #3]
			break;
 80041ba:	e006      	b.n	80041ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80041bc:	bf00      	nop
 80041be:	e004      	b.n	80041ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80041c8:	bf00      	nop
		}
	}
	return res;
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3724      	adds	r7, #36	@ 0x24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}

080041d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d904      	bls.n	80041fa <remove_chain+0x26>
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d301      	bcc.n	80041fe <remove_chain+0x2a>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e04b      	b.n	8004296 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	69b8      	ldr	r0, [r7, #24]
 800420c:	f7ff fef8 	bl	8004000 <put_fat>
 8004210:	4603      	mov	r3, r0
 8004212:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004214:	7ffb      	ldrb	r3, [r7, #31]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <remove_chain+0x4a>
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	e03b      	b.n	8004296 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fe46 	bl	8003eb2 <get_fat>
 8004226:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d031      	beq.n	8004292 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <remove_chain+0x64>
 8004234:	2302      	movs	r3, #2
 8004236:	e02e      	b.n	8004296 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d101      	bne.n	8004244 <remove_chain+0x70>
 8004240:	2301      	movs	r3, #1
 8004242:	e028      	b.n	8004296 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004244:	2200      	movs	r2, #0
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	69b8      	ldr	r0, [r7, #24]
 800424a:	f7ff fed9 	bl	8004000 <put_fat>
 800424e:	4603      	mov	r3, r0
 8004250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004252:	7ffb      	ldrb	r3, [r7, #31]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <remove_chain+0x88>
 8004258:	7ffb      	ldrb	r3, [r7, #31]
 800425a:	e01c      	b.n	8004296 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	3b02      	subs	r3, #2
 8004266:	429a      	cmp	r2, r3
 8004268:	d20b      	bcs.n	8004282 <remove_chain+0xae>
			fs->free_clst++;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d3c6      	bcc.n	800421e <remove_chain+0x4a>
 8004290:	e000      	b.n	8004294 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004292:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b088      	sub	sp, #32
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <create_chain+0x2c>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d31b      	bcc.n	8004302 <create_chain+0x64>
 80042ca:	2301      	movs	r3, #1
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e018      	b.n	8004302 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fded 	bl	8003eb2 <get_fat>
 80042d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d801      	bhi.n	80042e4 <create_chain+0x46>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e070      	b.n	80043c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d101      	bne.n	80042f0 <create_chain+0x52>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	e06a      	b.n	80043c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d201      	bcs.n	80042fe <create_chain+0x60>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	e063      	b.n	80043c6 <create_chain+0x128>
		scl = clst;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3301      	adds	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	429a      	cmp	r2, r3
 8004314:	d307      	bcc.n	8004326 <create_chain+0x88>
				ncl = 2;
 8004316:	2302      	movs	r3, #2
 8004318:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d901      	bls.n	8004326 <create_chain+0x88>
 8004322:	2300      	movs	r3, #0
 8004324:	e04f      	b.n	80043c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004326:	69f9      	ldr	r1, [r7, #28]
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fdc2 	bl	8003eb2 <get_fat>
 800432e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d003      	beq.n	8004344 <create_chain+0xa6>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d101      	bne.n	8004348 <create_chain+0xaa>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	e03e      	b.n	80043c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	429a      	cmp	r2, r3
 800434e:	d1da      	bne.n	8004306 <create_chain+0x68>
 8004350:	2300      	movs	r3, #0
 8004352:	e038      	b.n	80043c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004354:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	69f9      	ldr	r1, [r7, #28]
 800435c:	6938      	ldr	r0, [r7, #16]
 800435e:	f7ff fe4f 	bl	8004000 <put_fat>
 8004362:	4603      	mov	r3, r0
 8004364:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <create_chain+0xe2>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	6938      	ldr	r0, [r7, #16]
 8004378:	f7ff fe42 	bl	8004000 <put_fat>
 800437c:	4603      	mov	r3, r0
 800437e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	3b02      	subs	r3, #2
 8004396:	429a      	cmp	r2, r3
 8004398:	d804      	bhi.n	80043a4 <create_chain+0x106>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	711a      	strb	r2, [r3, #4]
 80043b2:	e007      	b.n	80043c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d102      	bne.n	80043c0 <create_chain+0x122>
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	e000      	b.n	80043c2 <create_chain+0x124>
 80043c0:	2301      	movs	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80043c4:	69fb      	ldr	r3, [r7, #28]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	3304      	adds	r3, #4
 80043e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	0a5b      	lsrs	r3, r3, #9
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	8952      	ldrh	r2, [r2, #10]
 80043ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1d1a      	adds	r2, r3, #4
 80043f8:	613a      	str	r2, [r7, #16]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <clmt_clust+0x3a>
 8004404:	2300      	movs	r3, #0
 8004406:	e010      	b.n	800442a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d307      	bcc.n	8004420 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3304      	adds	r3, #4
 800441c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800441e:	e7e9      	b.n	80043f4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004420:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800444c:	d204      	bcs.n	8004458 <dir_sdi+0x22>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <dir_sdi+0x26>
		return FR_INT_ERR;
 8004458:	2302      	movs	r3, #2
 800445a:	e063      	b.n	8004524 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <dir_sdi+0x46>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d902      	bls.n	800447c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	8912      	ldrh	r2, [r2, #8]
 800448a:	4293      	cmp	r3, r2
 800448c:	d301      	bcc.n	8004492 <dir_sdi+0x5c>
 800448e:	2302      	movs	r3, #2
 8004490:	e048      	b.n	8004524 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	61da      	str	r2, [r3, #28]
 800449a:	e029      	b.n	80044f0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	895b      	ldrh	r3, [r3, #10]
 80044a0:	025b      	lsls	r3, r3, #9
 80044a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80044a4:	e019      	b.n	80044da <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fd01 	bl	8003eb2 <get_fat>
 80044b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d101      	bne.n	80044be <dir_sdi+0x88>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e032      	b.n	8004524 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d904      	bls.n	80044ce <dir_sdi+0x98>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d301      	bcc.n	80044d2 <dir_sdi+0x9c>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e028      	b.n	8004524 <dir_sdi+0xee>
			ofs -= csz;
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d2e1      	bcs.n	80044a6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80044e2:	6979      	ldr	r1, [r7, #20]
 80044e4:	6938      	ldr	r0, [r7, #16]
 80044e6:	f7ff fcc5 	bl	8003e74 <clust2sect>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <dir_sdi+0xcc>
 80044fe:	2302      	movs	r3, #2
 8004500:	e010      	b.n	8004524 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	441a      	add	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	3320      	adds	r3, #32
 8004542:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <dir_next+0x28>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004552:	d301      	bcc.n	8004558 <dir_next+0x2c>
 8004554:	2304      	movs	r3, #4
 8004556:	e0aa      	b.n	80046ae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 8098 	bne.w	8004694 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	8912      	ldrh	r2, [r2, #8]
 800457e:	4293      	cmp	r3, r2
 8004580:	f0c0 8088 	bcc.w	8004694 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	61da      	str	r2, [r3, #28]
 800458a:	2304      	movs	r3, #4
 800458c:	e08f      	b.n	80046ae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	8952      	ldrh	r2, [r2, #10]
 8004596:	3a01      	subs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d17a      	bne.n	8004694 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7ff fc83 	bl	8003eb2 <get_fat>
 80045ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d801      	bhi.n	80045b8 <dir_next+0x8c>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e07a      	b.n	80046ae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d101      	bne.n	80045c4 <dir_next+0x98>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e074      	b.n	80046ae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d358      	bcc.n	8004680 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
 80045da:	2304      	movs	r3, #4
 80045dc:	e067      	b.n	80046ae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7ff fe59 	bl	800429e <create_chain>
 80045ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <dir_next+0xcc>
 80045f4:	2307      	movs	r3, #7
 80045f6:	e05a      	b.n	80046ae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <dir_next+0xd6>
 80045fe:	2302      	movs	r3, #2
 8004600:	e055      	b.n	80046ae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d101      	bne.n	800460e <dir_next+0xe2>
 800460a:	2301      	movs	r3, #1
 800460c:	e04f      	b.n	80046ae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff fb50 	bl	8003cb4 <sync_window>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <dir_next+0xf2>
 800461a:	2301      	movs	r3, #1
 800461c:	e047      	b.n	80046ae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3330      	adds	r3, #48	@ 0x30
 8004622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff f97a 	bl	8003922 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fc1d 	bl	8003e74 <clust2sect>
 800463a:	4602      	mov	r2, r0
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004640:	e012      	b.n	8004668 <dir_next+0x13c>
						fs->wflag = 1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fb33 	bl	8003cb4 <sync_window>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <dir_next+0x12c>
 8004654:	2301      	movs	r3, #1
 8004656:	e02a      	b.n	80046ae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3301      	adds	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	895b      	ldrh	r3, [r3, #10]
 800466c:	461a      	mov	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4293      	cmp	r3, r2
 8004672:	d3e6      	bcc.n	8004642 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fbf3 	bl	8003e74 <clust2sect>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80046c6:	2100      	movs	r1, #0
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff feb4 	bl	8004436 <dir_sdi>
 80046ce:	4603      	mov	r3, r0
 80046d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d12b      	bne.n	8004730 <dir_alloc+0x7a>
		n = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4619      	mov	r1, r3
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fb2a 	bl	8003d3c <move_window>
 80046e8:	4603      	mov	r3, r0
 80046ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11d      	bne.n	800472e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2be5      	cmp	r3, #229	@ 0xe5
 80046fa:	d004      	beq.n	8004706 <dir_alloc+0x50>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d107      	bne.n	8004716 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	3301      	adds	r3, #1
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d102      	bne.n	800471a <dir_alloc+0x64>
 8004714:	e00c      	b.n	8004730 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800471a:	2101      	movs	r1, #1
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ff05 	bl	800452c <dir_next>
 8004722:	4603      	mov	r3, r0
 8004724:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0d7      	beq.n	80046dc <dir_alloc+0x26>
 800472c:	e000      	b.n	8004730 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800472e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d101      	bne.n	800473a <dir_alloc+0x84>
 8004736:	2307      	movs	r3, #7
 8004738:	75fb      	strb	r3, [r7, #23]
	return res;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	331a      	adds	r3, #26
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff f842 	bl	80037dc <ld_word>
 8004758:	4603      	mov	r3, r0
 800475a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d109      	bne.n	8004778 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff f837 	bl	80037dc <ld_word>
 800476e:	4603      	mov	r3, r0
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004778:	68fb      	ldr	r3, [r7, #12]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	331a      	adds	r3, #26
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	b292      	uxth	r2, r2
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f85a 	bl	8003852 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d109      	bne.n	80047ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f103 0214 	add.w	r2, r3, #20
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7ff f84c 	bl	8003852 <st_word>
	}
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80047d0:	2100      	movs	r1, #0
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fe2f 	bl	8004436 <dir_sdi>
 80047d8:	4603      	mov	r3, r0
 80047da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <dir_find+0x24>
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
 80047e4:	e03e      	b.n	8004864 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	4619      	mov	r1, r3
 80047ec:	6938      	ldr	r0, [r7, #16]
 80047ee:	f7ff faa5 	bl	8003d3c <move_window>
 80047f2:	4603      	mov	r3, r0
 80047f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d12f      	bne.n	800485c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <dir_find+0x4e>
 800480a:	2304      	movs	r3, #4
 800480c:	75fb      	strb	r3, [r7, #23]
 800480e:	e028      	b.n	8004862 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	330b      	adds	r3, #11
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481c:	b2da      	uxtb	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	330b      	adds	r3, #11
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <dir_find+0x86>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a18      	ldr	r0, [r3, #32]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3324      	adds	r3, #36	@ 0x24
 800483a:	220b      	movs	r2, #11
 800483c:	4619      	mov	r1, r3
 800483e:	f7ff f88b 	bl	8003958 <mem_cmp>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004848:	2100      	movs	r1, #0
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fe6e 	bl	800452c <dir_next>
 8004850:	4603      	mov	r3, r0
 8004852:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0c5      	beq.n	80047e6 <dir_find+0x24>
 800485a:	e002      	b.n	8004862 <dir_find+0xa0>
		if (res != FR_OK) break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004860:	bf00      	nop

	return res;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800487a:	2101      	movs	r1, #1
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff1a 	bl	80046b6 <dir_alloc>
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11c      	bne.n	80048c6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4619      	mov	r1, r3
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7ff fa52 	bl	8003d3c <move_window>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d111      	bne.n	80048c6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	2220      	movs	r2, #32
 80048a8:	2100      	movs	r1, #0
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff f839 	bl	8003922 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a18      	ldr	r0, [r3, #32]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3324      	adds	r3, #36	@ 0x24
 80048b8:	220b      	movs	r2, #11
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7ff f810 	bl	80038e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2201      	movs	r2, #1
 80048c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3324      	adds	r3, #36	@ 0x24
 80048e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80048e6:	220b      	movs	r2, #11
 80048e8:	2120      	movs	r1, #32
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff f819 	bl	8003922 <mem_set>
	si = i = 0; ni = 8;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	2308      	movs	r3, #8
 80048fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	61fa      	str	r2, [r7, #28]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800490a:	7efb      	ldrb	r3, [r7, #27]
 800490c:	2b20      	cmp	r3, #32
 800490e:	d94e      	bls.n	80049ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004910:	7efb      	ldrb	r3, [r7, #27]
 8004912:	2b2f      	cmp	r3, #47	@ 0x2f
 8004914:	d006      	beq.n	8004924 <create_name+0x54>
 8004916:	7efb      	ldrb	r3, [r7, #27]
 8004918:	2b5c      	cmp	r3, #92	@ 0x5c
 800491a:	d110      	bne.n	800493e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800491c:	e002      	b.n	8004924 <create_name+0x54>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3301      	adds	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b2f      	cmp	r3, #47	@ 0x2f
 800492e:	d0f6      	beq.n	800491e <create_name+0x4e>
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b5c      	cmp	r3, #92	@ 0x5c
 800493a:	d0f0      	beq.n	800491e <create_name+0x4e>
			break;
 800493c:	e038      	b.n	80049b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800493e:	7efb      	ldrb	r3, [r7, #27]
 8004940:	2b2e      	cmp	r3, #46	@ 0x2e
 8004942:	d003      	beq.n	800494c <create_name+0x7c>
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	429a      	cmp	r2, r3
 800494a:	d30c      	bcc.n	8004966 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b0b      	cmp	r3, #11
 8004950:	d002      	beq.n	8004958 <create_name+0x88>
 8004952:	7efb      	ldrb	r3, [r7, #27]
 8004954:	2b2e      	cmp	r3, #46	@ 0x2e
 8004956:	d001      	beq.n	800495c <create_name+0x8c>
 8004958:	2306      	movs	r3, #6
 800495a:	e044      	b.n	80049e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800495c:	2308      	movs	r3, #8
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	230b      	movs	r3, #11
 8004962:	617b      	str	r3, [r7, #20]
			continue;
 8004964:	e022      	b.n	80049ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004966:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800496a:	2b00      	cmp	r3, #0
 800496c:	da04      	bge.n	8004978 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800496e:	7efb      	ldrb	r3, [r7, #27]
 8004970:	3b80      	subs	r3, #128	@ 0x80
 8004972:	4a1f      	ldr	r2, [pc, #124]	@ (80049f0 <create_name+0x120>)
 8004974:	5cd3      	ldrb	r3, [r2, r3]
 8004976:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004978:	7efb      	ldrb	r3, [r7, #27]
 800497a:	4619      	mov	r1, r3
 800497c:	481d      	ldr	r0, [pc, #116]	@ (80049f4 <create_name+0x124>)
 800497e:	f7ff f812 	bl	80039a6 <chk_chr>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <create_name+0xbc>
 8004988:	2306      	movs	r3, #6
 800498a:	e02c      	b.n	80049e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	2b60      	cmp	r3, #96	@ 0x60
 8004990:	d905      	bls.n	800499e <create_name+0xce>
 8004992:	7efb      	ldrb	r3, [r7, #27]
 8004994:	2b7a      	cmp	r3, #122	@ 0x7a
 8004996:	d802      	bhi.n	800499e <create_name+0xce>
 8004998:	7efb      	ldrb	r3, [r7, #27]
 800499a:	3b20      	subs	r3, #32
 800499c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	613a      	str	r2, [r7, #16]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4413      	add	r3, r2
 80049a8:	7efa      	ldrb	r2, [r7, #27]
 80049aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80049ac:	e7a6      	b.n	80048fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80049ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	441a      	add	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <create_name+0xf4>
 80049c0:	2306      	movs	r3, #6
 80049c2:	e010      	b.n	80049e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2be5      	cmp	r3, #229	@ 0xe5
 80049ca:	d102      	bne.n	80049d2 <create_name+0x102>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2205      	movs	r2, #5
 80049d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d801      	bhi.n	80049dc <create_name+0x10c>
 80049d8:	2204      	movs	r2, #4
 80049da:	e000      	b.n	80049de <create_name+0x10e>
 80049dc:	2200      	movs	r2, #0
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	330b      	adds	r3, #11
 80049e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80049e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	08007114 	.word	0x08007114
 80049f4:	080070c0 	.word	0x080070c0

080049f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004a0c:	e002      	b.n	8004a14 <follow_path+0x1c>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b2f      	cmp	r3, #47	@ 0x2f
 8004a1a:	d0f8      	beq.n	8004a0e <follow_path+0x16>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a22:	d0f4      	beq.n	8004a0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b1f      	cmp	r3, #31
 8004a30:	d80a      	bhi.n	8004a48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2280      	movs	r2, #128	@ 0x80
 8004a36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff fcfa 	bl	8004436 <dir_sdi>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]
 8004a46:	e043      	b.n	8004ad0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a48:	463b      	mov	r3, r7
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff ff3f 	bl	80048d0 <create_name>
 8004a52:	4603      	mov	r3, r0
 8004a54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d134      	bne.n	8004ac6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff feb0 	bl	80047c2 <dir_find>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004a6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d127      	bne.n	8004aca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d122      	bne.n	8004aca <follow_path+0xd2>
 8004a84:	2305      	movs	r3, #5
 8004a86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004a88:	e01f      	b.n	8004aca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11c      	bne.n	8004ace <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	799b      	ldrb	r3, [r3, #6]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004aa0:	2305      	movs	r3, #5
 8004aa2:	75fb      	strb	r3, [r7, #23]
 8004aa4:	e014      	b.n	8004ad0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab4:	4413      	add	r3, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff fe43 	bl	8004744 <ld_clust>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004ac4:	e7c0      	b.n	8004a48 <follow_path+0x50>
			if (res != FR_OK) break;
 8004ac6:	bf00      	nop
 8004ac8:	e002      	b.n	8004ad0 <follow_path+0xd8>
				break;
 8004aca:	bf00      	nop
 8004acc:	e000      	b.n	8004ad0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ace:	bf00      	nop
			}
		}
	}

	return res;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d031      	beq.n	8004b54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e002      	b.n	8004afe <get_ldnumber+0x24>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3301      	adds	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d903      	bls.n	8004b0e <get_ldnumber+0x34>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004b0c:	d1f4      	bne.n	8004af8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b3a      	cmp	r3, #58	@ 0x3a
 8004b14:	d11c      	bne.n	8004b50 <get_ldnumber+0x76>
			tp = *path;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	60fa      	str	r2, [r7, #12]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	3b30      	subs	r3, #48	@ 0x30
 8004b26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b09      	cmp	r3, #9
 8004b2c:	d80e      	bhi.n	8004b4c <get_ldnumber+0x72>
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d10a      	bne.n	8004b4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <get_ldnumber+0x72>
					vol = (int)i;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3301      	adds	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	e002      	b.n	8004b56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004b54:	693b      	ldr	r3, [r7, #16]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	70da      	strb	r2, [r3, #3]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff f8dc 	bl	8003d3c <move_window>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <check_fs+0x2a>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e038      	b.n	8004c00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3330      	adds	r3, #48	@ 0x30
 8004b92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fe20 	bl	80037dc <ld_word>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <check_fs+0x48>
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e029      	b.n	8004c00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bb2:	2be9      	cmp	r3, #233	@ 0xe9
 8004bb4:	d009      	beq.n	8004bca <check_fs+0x66>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bbc:	2beb      	cmp	r3, #235	@ 0xeb
 8004bbe:	d11e      	bne.n	8004bfe <check_fs+0x9a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004bc6:	2b90      	cmp	r3, #144	@ 0x90
 8004bc8:	d119      	bne.n	8004bfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3330      	adds	r3, #48	@ 0x30
 8004bce:	3336      	adds	r3, #54	@ 0x36
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fe1b 	bl	800380c <ld_dword>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <check_fs+0xa4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <check_fs+0x82>
 8004be2:	2300      	movs	r3, #0
 8004be4:	e00c      	b.n	8004c00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3330      	adds	r3, #48	@ 0x30
 8004bea:	3352      	adds	r3, #82	@ 0x52
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fe0d 	bl	800380c <ld_dword>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a05      	ldr	r2, [pc, #20]	@ (8004c0c <check_fs+0xa8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <check_fs+0x9a>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004bfe:	2302      	movs	r3, #2
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	00544146 	.word	0x00544146
 8004c0c:	33544146 	.word	0x33544146

08004c10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b096      	sub	sp, #88	@ 0x58
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff ff58 	bl	8004ada <get_ldnumber>
 8004c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da01      	bge.n	8004c36 <find_volume+0x26>
 8004c32:	230b      	movs	r3, #11
 8004c34:	e22d      	b.n	8005092 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004c36:	4aa1      	ldr	r2, [pc, #644]	@ (8004ebc <find_volume+0x2ac>)
 8004c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <find_volume+0x3a>
 8004c46:	230c      	movs	r3, #12
 8004c48:	e223      	b.n	8005092 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01a      	beq.n	8004c96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe fd19 	bl	800369c <disk_status>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004c70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10c      	bne.n	8004c96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <find_volume+0x82>
 8004c82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004c8e:	230a      	movs	r3, #10
 8004c90:	e1ff      	b.n	8005092 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004c92:	2300      	movs	r3, #0
 8004c94:	e1fd      	b.n	8005092 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fd11 	bl	80036d0 <disk_initialize>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1e6      	b.n	8005092 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <find_volume+0xca>
 8004cca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e1db      	b.n	8005092 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ce0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ce2:	f7ff ff3f 	bl	8004b64 <check_fs>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004cec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d149      	bne.n	8004d88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf8:	e01e      	b.n	8004d38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004d08:	4413      	add	r3, r2
 8004d0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	3304      	adds	r3, #4
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <find_volume+0x114>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	3308      	adds	r3, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fd76 	bl	800380c <ld_dword>
 8004d20:	4602      	mov	r2, r0
 8004d22:	e000      	b.n	8004d26 <find_volume+0x116>
 8004d24:	2200      	movs	r2, #0
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	3358      	adds	r3, #88	@ 0x58
 8004d2c:	443b      	add	r3, r7
 8004d2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	3301      	adds	r3, #1
 8004d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d9dd      	bls.n	8004cfa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004d3e:	2300      	movs	r3, #0
 8004d40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <find_volume+0x13e>
 8004d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	3358      	adds	r3, #88	@ 0x58
 8004d54:	443b      	add	r3, r7
 8004d56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004d5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <find_volume+0x15e>
 8004d62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d66:	f7ff fefd 	bl	8004b64 <check_fs>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	e000      	b.n	8004d70 <find_volume+0x160>
 8004d6e:	2303      	movs	r3, #3
 8004d70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004d74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d905      	bls.n	8004d88 <find_volume+0x178>
 8004d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d7e:	3301      	adds	r3, #1
 8004d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d9e2      	bls.n	8004d4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004d88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d101      	bne.n	8004d94 <find_volume+0x184>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e17e      	b.n	8005092 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004d94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d901      	bls.n	8004da0 <find_volume+0x190>
 8004d9c:	230d      	movs	r3, #13
 8004d9e:	e178      	b.n	8005092 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da2:	3330      	adds	r3, #48	@ 0x30
 8004da4:	330b      	adds	r3, #11
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fd18 	bl	80037dc <ld_word>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db2:	d001      	beq.n	8004db8 <find_volume+0x1a8>
 8004db4:	230d      	movs	r3, #13
 8004db6:	e16c      	b.n	8005092 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dba:	3330      	adds	r3, #48	@ 0x30
 8004dbc:	3316      	adds	r3, #22
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fd0c 	bl	80037dc <ld_word>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <find_volume+0x1cc>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd0:	3330      	adds	r3, #48	@ 0x30
 8004dd2:	3324      	adds	r3, #36	@ 0x24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fe fd19 	bl	800380c <ld_dword>
 8004dda:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004de0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	789b      	ldrb	r3, [r3, #2]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d005      	beq.n	8004e00 <find_volume+0x1f0>
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	789b      	ldrb	r3, [r3, #2]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d001      	beq.n	8004e00 <find_volume+0x1f0>
 8004dfc:	230d      	movs	r3, #13
 8004dfe:	e148      	b.n	8005092 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	789b      	ldrb	r3, [r3, #2]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e14:	461a      	mov	r2, r3
 8004e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1c:	895b      	ldrh	r3, [r3, #10]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <find_volume+0x224>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	895b      	ldrh	r3, [r3, #10]
 8004e26:	461a      	mov	r2, r3
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	895b      	ldrh	r3, [r3, #10]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <find_volume+0x228>
 8004e34:	230d      	movs	r3, #13
 8004e36:	e12c      	b.n	8005092 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3a:	3330      	adds	r3, #48	@ 0x30
 8004e3c:	3311      	adds	r3, #17
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fccc 	bl	80037dc <ld_word>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	891b      	ldrh	r3, [r3, #8]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <find_volume+0x24e>
 8004e5a:	230d      	movs	r3, #13
 8004e5c:	e119      	b.n	8005092 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	3330      	adds	r3, #48	@ 0x30
 8004e62:	3313      	adds	r3, #19
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fcb9 	bl	80037dc <ld_word>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <find_volume+0x272>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e76:	3330      	adds	r3, #48	@ 0x30
 8004e78:	3320      	adds	r3, #32
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fcc6 	bl	800380c <ld_dword>
 8004e80:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	3330      	adds	r3, #48	@ 0x30
 8004e86:	330e      	adds	r3, #14
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe fca7 	bl	80037dc <ld_word>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004e92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <find_volume+0x28c>
 8004e98:	230d      	movs	r3, #13
 8004e9a:	e0fa      	b.n	8005092 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004e9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea0:	4413      	add	r3, r2
 8004ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ea4:	8912      	ldrh	r2, [r2, #8]
 8004ea6:	0912      	lsrs	r2, r2, #4
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	4413      	add	r3, r2
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004eae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d204      	bcs.n	8004ec0 <find_volume+0x2b0>
 8004eb6:	230d      	movs	r3, #13
 8004eb8:	e0eb      	b.n	8005092 <find_volume+0x482>
 8004eba:	bf00      	nop
 8004ebc:	20000d88 	.word	0x20000d88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ec8:	8952      	ldrh	r2, [r2, #10]
 8004eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <find_volume+0x2ca>
 8004ed6:	230d      	movs	r3, #13
 8004ed8:	e0db      	b.n	8005092 <find_volume+0x482>
		fmt = FS_FAT32;
 8004eda:	2303      	movs	r3, #3
 8004edc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d802      	bhi.n	8004ef0 <find_volume+0x2e0>
 8004eea:	2302      	movs	r3, #2
 8004eec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d802      	bhi.n	8004f00 <find_volume+0x2f0>
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f0c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004f0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f12:	441a      	add	r2, r3
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	441a      	add	r2, r3
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f20:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004f22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d11e      	bne.n	8004f68 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	332a      	adds	r3, #42	@ 0x2a
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fc53 	bl	80037dc <ld_word>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <find_volume+0x330>
 8004f3c:	230d      	movs	r3, #13
 8004f3e:	e0a8      	b.n	8005092 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	891b      	ldrh	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <find_volume+0x33c>
 8004f48:	230d      	movs	r3, #13
 8004f4a:	e0a2      	b.n	8005092 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4e:	3330      	adds	r3, #48	@ 0x30
 8004f50:	332c      	adds	r3, #44	@ 0x2c
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fc5a 	bl	800380c <ld_dword>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f66:	e01f      	b.n	8004fa8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	891b      	ldrh	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <find_volume+0x364>
 8004f70:	230d      	movs	r3, #13
 8004f72:	e08e      	b.n	8005092 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f7a:	441a      	add	r2, r3
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004f80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d103      	bne.n	8004f90 <find_volume+0x380>
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	e00a      	b.n	8004fa6 <find_volume+0x396>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	085a      	lsrs	r2, r3, #1
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004fa6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fae:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004fb2:	0a5b      	lsrs	r3, r3, #9
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d201      	bcs.n	8004fbc <find_volume+0x3ac>
 8004fb8:	230d      	movs	r3, #13
 8004fba:	e06a      	b.n	8005092 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	611a      	str	r2, [r3, #16]
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fce:	2280      	movs	r2, #128	@ 0x80
 8004fd0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d149      	bne.n	800506e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fdc:	3330      	adds	r3, #48	@ 0x30
 8004fde:	3330      	adds	r3, #48	@ 0x30
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe fbfb 	bl	80037dc <ld_word>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d140      	bne.n	800506e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ff4:	f7fe fea2 	bl	8003d3c <move_window>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d137      	bne.n	800506e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	2200      	movs	r2, #0
 8005002:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	3330      	adds	r3, #48	@ 0x30
 8005008:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fbe5 	bl	80037dc <ld_word>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800501a:	429a      	cmp	r2, r3
 800501c:	d127      	bne.n	800506e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800501e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005020:	3330      	adds	r3, #48	@ 0x30
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fbf2 	bl	800380c <ld_dword>
 8005028:	4603      	mov	r3, r0
 800502a:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <find_volume+0x48c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d11e      	bne.n	800506e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	3330      	adds	r3, #48	@ 0x30
 8005034:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fbe7 	bl	800380c <ld_dword>
 800503e:	4603      	mov	r3, r0
 8005040:	4a17      	ldr	r2, [pc, #92]	@ (80050a0 <find_volume+0x490>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d113      	bne.n	800506e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005048:	3330      	adds	r3, #48	@ 0x30
 800504a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fbdc 	bl	800380c <ld_dword>
 8005054:	4602      	mov	r2, r0
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005058:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	3330      	adds	r3, #48	@ 0x30
 800505e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fbd2 	bl	800380c <ld_dword>
 8005068:	4602      	mov	r2, r0
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005074:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <find_volume+0x494>)
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	3301      	adds	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <find_volume+0x494>)
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	4b08      	ldr	r3, [pc, #32]	@ (80050a4 <find_volume+0x494>)
 8005084:	881a      	ldrh	r2, [r3, #0]
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800508a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800508c:	f7fe fdee 	bl	8003c6c <clear_lock>
#endif
	return FR_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3758      	adds	r7, #88	@ 0x58
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	41615252 	.word	0x41615252
 80050a0:	61417272 	.word	0x61417272
 80050a4:	20000d8c 	.word	0x20000d8c

080050a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80050b2:	2309      	movs	r3, #9
 80050b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01c      	beq.n	80050f6 <validate+0x4e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d018      	beq.n	80050f6 <validate+0x4e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d013      	beq.n	80050f6 <validate+0x4e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	889a      	ldrh	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	88db      	ldrh	r3, [r3, #6]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d10c      	bne.n	80050f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fada 	bl	800369c <disk_status>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <validate+0x4e>
			res = FR_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <validate+0x5a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	e000      	b.n	8005104 <validate+0x5c>
 8005102:	2300      	movs	r3, #0
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	6013      	str	r3, [r2, #0]
	return res;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005126:	f107 0310 	add.w	r3, r7, #16
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fcd5 	bl	8004ada <get_ldnumber>
 8005130:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	da01      	bge.n	800513c <f_mount+0x28>
 8005138:	230b      	movs	r3, #11
 800513a:	e02b      	b.n	8005194 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800513c:	4a17      	ldr	r2, [pc, #92]	@ (800519c <f_mount+0x88>)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005144:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800514c:	69b8      	ldr	r0, [r7, #24]
 800514e:	f7fe fd8d 	bl	8003c6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	490d      	ldr	r1, [pc, #52]	@ (800519c <f_mount+0x88>)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <f_mount+0x66>
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <f_mount+0x6a>
 800517a:	2300      	movs	r3, #0
 800517c:	e00a      	b.n	8005194 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800517e:	f107 010c 	add.w	r1, r7, #12
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	2200      	movs	r2, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fd41 	bl	8004c10 <find_volume>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005192:	7dfb      	ldrb	r3, [r7, #23]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000d88 	.word	0x20000d88

080051a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b098      	sub	sp, #96	@ 0x60
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <f_open+0x18>
 80051b4:	2309      	movs	r3, #9
 80051b6:	e1a9      	b.n	800550c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80051c0:	79fa      	ldrb	r2, [r7, #7]
 80051c2:	f107 0110 	add.w	r1, r7, #16
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fd20 	bl	8004c10 <find_volume>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80051d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 818d 	bne.w	80054fa <f_open+0x35a>
		dj.obj.fs = fs;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	f107 0314 	add.w	r3, r7, #20
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fc03 	bl	80049f8 <follow_path>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80051f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d118      	bne.n	8005232 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005200:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005204:	b25b      	sxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	da03      	bge.n	8005212 <f_open+0x72>
				res = FR_INVALID_NAME;
 800520a:	2306      	movs	r3, #6
 800520c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005210:	e00f      	b.n	8005232 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf8c      	ite	hi
 8005218:	2301      	movhi	r3, #1
 800521a:	2300      	movls	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fbd8 	bl	80039dc <chk_lock>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	f003 031c 	and.w	r3, r3, #28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d07f      	beq.n	800533c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800523c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005244:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005248:	2b04      	cmp	r3, #4
 800524a:	d10e      	bne.n	800526a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800524c:	f7fe fc22 	bl	8003a94 <enq_lock>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <f_open+0xc4>
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fb06 	bl	800486c <dir_register>
 8005260:	4603      	mov	r3, r0
 8005262:	e000      	b.n	8005266 <f_open+0xc6>
 8005264:	2312      	movs	r3, #18
 8005266:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	f043 0308 	orr.w	r3, r3, #8
 8005270:	71fb      	strb	r3, [r7, #7]
 8005272:	e010      	b.n	8005296 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005274:	7ebb      	ldrb	r3, [r7, #26]
 8005276:	f003 0311 	and.w	r3, r3, #17
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <f_open+0xe6>
					res = FR_DENIED;
 800527e:	2307      	movs	r3, #7
 8005280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005284:	e007      	b.n	8005296 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <f_open+0xf6>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005296:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800529a:	2b00      	cmp	r3, #0
 800529c:	d168      	bne.n	8005370 <f_open+0x1d0>
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d063      	beq.n	8005370 <f_open+0x1d0>
				dw = GET_FATTIME();
 80052a8:	f7fe f99a 	bl	80035e0 <get_fattime>
 80052ac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	330e      	adds	r3, #14
 80052b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fae7 	bl	8003888 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80052ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052bc:	3316      	adds	r3, #22
 80052be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe fae1 	bl	8003888 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80052c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c8:	330b      	adds	r3, #11
 80052ca:	2220      	movs	r2, #32
 80052cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fa35 	bl	8004744 <ld_clust>
 80052da:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80052e0:	2200      	movs	r2, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fa4d 	bl	8004782 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	331c      	adds	r3, #28
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe faca 	bl	8003888 <st_dword>
					fs->wflag = 1;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2201      	movs	r2, #1
 80052f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80052fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d037      	beq.n	8005370 <f_open+0x1d0>
						dw = fs->winsect;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	2200      	movs	r2, #0
 800530c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe ff60 	bl	80041d4 <remove_chain>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800531a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800531e:	2b00      	cmp	r3, #0
 8005320:	d126      	bne.n	8005370 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fd08 	bl	8003d3c <move_window>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005336:	3a01      	subs	r2, #1
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e019      	b.n	8005370 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800533c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005340:	2b00      	cmp	r3, #0
 8005342:	d115      	bne.n	8005370 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005344:	7ebb      	ldrb	r3, [r7, #26]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <f_open+0x1b6>
					res = FR_NO_FILE;
 800534e:	2304      	movs	r3, #4
 8005350:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005354:	e00c      	b.n	8005370 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <f_open+0x1d0>
 8005360:	7ebb      	ldrb	r3, [r7, #26]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <f_open+0x1d0>
						res = FR_DENIED;
 800536a:	2307      	movs	r3, #7
 800536c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005374:	2b00      	cmp	r3, #0
 8005376:	d126      	bne.n	80053c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005388:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b01      	cmp	r3, #1
 800539c:	bf8c      	ite	hi
 800539e:	2301      	movhi	r3, #1
 80053a0:	2300      	movls	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fb93 	bl	8003ad8 <inc_lock>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <f_open+0x226>
 80053c0:	2302      	movs	r3, #2
 80053c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80053c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 8095 	bne.w	80054fa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff f9b4 	bl	8004744 <ld_clust>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	331c      	adds	r3, #28
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fa10 	bl	800380c <ld_dword>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	88da      	ldrh	r2, [r3, #6]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	79fa      	ldrb	r2, [r7, #7]
 800540a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3330      	adds	r3, #48	@ 0x30
 8005422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fa7a 	bl	8003922 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d060      	beq.n	80054fa <f_open+0x35a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05c      	beq.n	80054fa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	895b      	ldrh	r3, [r3, #10]
 800544c:	025b      	lsls	r3, r3, #9
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	657b      	str	r3, [r7, #84]	@ 0x54
 800545c:	e016      	b.n	800548c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fd25 	bl	8003eb2 <get_fat>
 8005468:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800546a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800546c:	2b01      	cmp	r3, #1
 800546e:	d802      	bhi.n	8005476 <f_open+0x2d6>
 8005470:	2302      	movs	r3, #2
 8005472:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d102      	bne.n	8005484 <f_open+0x2e4>
 800547e:	2301      	movs	r3, #1
 8005480:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005484:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	657b      	str	r3, [r7, #84]	@ 0x54
 800548c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <f_open+0x2fc>
 8005494:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005498:	429a      	cmp	r2, r3
 800549a:	d8e0      	bhi.n	800545e <f_open+0x2be>
				}
				fp->clust = clst;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80054a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d127      	bne.n	80054fa <f_open+0x35a>
 80054aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d022      	beq.n	80054fa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fcdb 	bl	8003e74 <clust2sect>
 80054be:	6478      	str	r0, [r7, #68]	@ 0x44
 80054c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <f_open+0x32e>
						res = FR_INT_ERR;
 80054c6:	2302      	movs	r3, #2
 80054c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80054cc:	e015      	b.n	80054fa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80054ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d0:	0a5a      	lsrs	r2, r3, #9
 80054d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	7858      	ldrb	r0, [r3, #1]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	2301      	movs	r3, #1
 80054ea:	f7fe f919 	bl	8003720 <disk_read>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <f_open+0x35a>
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80054fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <f_open+0x368>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005508:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800550c:	4618      	mov	r0, r3
 800550e:	3760      	adds	r7, #96	@ 0x60
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08e      	sub	sp, #56	@ 0x38
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f107 0214 	add.w	r2, r7, #20
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fdb7 	bl	80050a8 <validate>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005540:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <f_read+0x44>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	7d5b      	ldrb	r3, [r3, #21]
 800554c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <f_read+0x4a>
 8005558:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800555c:	e115      	b.n	800578a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	7d1b      	ldrb	r3, [r3, #20]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <f_read+0x5a>
 800556a:	2307      	movs	r3, #7
 800556c:	e10d      	b.n	800578a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	429a      	cmp	r2, r3
 8005580:	f240 80fe 	bls.w	8005780 <f_read+0x26c>
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005588:	e0fa      	b.n	8005780 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 80c6 	bne.w	8005724 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	0a5b      	lsrs	r3, r3, #9
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	8952      	ldrh	r2, [r2, #10]
 80055a2:	3a01      	subs	r2, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12f      	bne.n	800560e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80055bc:	e013      	b.n	80055e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	4619      	mov	r1, r3
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7fe fefe 	bl	80043ce <clmt_clust>
 80055d2:	6338      	str	r0, [r7, #48]	@ 0x30
 80055d4:	e007      	b.n	80055e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fc67 	bl	8003eb2 <get_fat>
 80055e4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d804      	bhi.n	80055f6 <f_read+0xe2>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2202      	movs	r2, #2
 80055f0:	755a      	strb	r2, [r3, #21]
 80055f2:	2302      	movs	r3, #2
 80055f4:	e0c9      	b.n	800578a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d104      	bne.n	8005608 <f_read+0xf4>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	755a      	strb	r2, [r3, #21]
 8005604:	2301      	movs	r3, #1
 8005606:	e0c0      	b.n	800578a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800560c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f7fe fc2c 	bl	8003e74 <clust2sect>
 800561c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <f_read+0x11a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2202      	movs	r2, #2
 8005628:	755a      	strb	r2, [r3, #21]
 800562a:	2302      	movs	r3, #2
 800562c:	e0ad      	b.n	800578a <f_read+0x276>
			sect += csect;
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0a5b      	lsrs	r3, r3, #9
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d039      	beq.n	80056b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	4413      	add	r3, r2
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	8952      	ldrh	r2, [r2, #10]
 800564c:	4293      	cmp	r3, r2
 800564e:	d905      	bls.n	800565c <f_read+0x148>
					cc = fs->csize - csect;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	895b      	ldrh	r3, [r3, #10]
 8005654:	461a      	mov	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	7858      	ldrb	r0, [r3, #1]
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005666:	f7fe f85b 	bl	8003720 <disk_read>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <f_read+0x166>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	755a      	strb	r2, [r3, #21]
 8005676:	2301      	movs	r3, #1
 8005678:	e087      	b.n	800578a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	7d1b      	ldrb	r3, [r3, #20]
 800567e:	b25b      	sxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	da14      	bge.n	80056ae <f_read+0x19a>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800568e:	429a      	cmp	r2, r3
 8005690:	d90d      	bls.n	80056ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	025b      	lsls	r3, r3, #9
 800569c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800569e:	18d0      	adds	r0, r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3330      	adds	r3, #48	@ 0x30
 80056a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7fe f919 	bl	80038e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80056ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b0:	025b      	lsls	r3, r3, #9
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80056b4:	e050      	b.n	8005758 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d02e      	beq.n	800571e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	7d1b      	ldrb	r3, [r3, #20]
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da18      	bge.n	80056fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	7858      	ldrb	r0, [r3, #1]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	2301      	movs	r3, #1
 80056da:	f7fe f841 	bl	8003760 <disk_write>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <f_read+0x1da>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	755a      	strb	r2, [r3, #21]
 80056ea:	2301      	movs	r3, #1
 80056ec:	e04d      	b.n	800578a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	7d1b      	ldrb	r3, [r3, #20]
 80056f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	7858      	ldrb	r0, [r3, #1]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005706:	2301      	movs	r3, #1
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	f7fe f809 	bl	8003720 <disk_read>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <f_read+0x20a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	755a      	strb	r2, [r3, #21]
 800571a:	2301      	movs	r3, #1
 800571c:	e035      	b.n	800578a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d901      	bls.n	800573e <f_read+0x22a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574c:	4413      	add	r3, r2
 800574e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005750:	4619      	mov	r1, r3
 8005752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005754:	f7fe f8c4 	bl	80038e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	4413      	add	r3, r2
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	619a      	str	r2, [r3, #24]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005772:	441a      	add	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f47f af01 	bne.w	800558a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3738      	adds	r7, #56	@ 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b08c      	sub	sp, #48	@ 0x30
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f107 0210 	add.w	r2, r7, #16
 80057b0:	4611      	mov	r1, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fc78 	bl	80050a8 <validate>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80057be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <f_write+0x44>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	7d5b      	ldrb	r3, [r3, #21]
 80057ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80057ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <f_write+0x4a>
 80057d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057da:	e14b      	b.n	8005a74 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	7d1b      	ldrb	r3, [r3, #20]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <f_write+0x5a>
 80057e8:	2307      	movs	r3, #7
 80057ea:	e143      	b.n	8005a74 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	441a      	add	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	f080 812d 	bcs.w	8005a58 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	43db      	mvns	r3, r3
 8005804:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005806:	e127      	b.n	8005a58 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005810:	2b00      	cmp	r3, #0
 8005812:	f040 80e3 	bne.w	80059dc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	0a5b      	lsrs	r3, r3, #9
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	8952      	ldrh	r2, [r2, #10]
 8005820:	3a01      	subs	r2, #1
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d143      	bne.n	80058b4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10c      	bne.n	800584e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11a      	bne.n	8005876 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe fd2a 	bl	800429e <create_chain>
 800584a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800584c:	e013      	b.n	8005876 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	4619      	mov	r1, r3
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7fe fdb6 	bl	80043ce <clmt_clust>
 8005862:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005864:	e007      	b.n	8005876 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fe fd15 	bl	800429e <create_chain>
 8005874:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80f2 	beq.w	8005a62 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	2b01      	cmp	r3, #1
 8005882:	d104      	bne.n	800588e <f_write+0xfc>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2202      	movs	r2, #2
 8005888:	755a      	strb	r2, [r3, #21]
 800588a:	2302      	movs	r3, #2
 800588c:	e0f2      	b.n	8005a74 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800588e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d104      	bne.n	80058a0 <f_write+0x10e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	755a      	strb	r2, [r3, #21]
 800589c:	2301      	movs	r3, #1
 800589e:	e0e9      	b.n	8005a74 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <f_write+0x122>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	7d1b      	ldrb	r3, [r3, #20]
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da18      	bge.n	80058f0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	7858      	ldrb	r0, [r3, #1]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1a      	ldr	r2, [r3, #32]
 80058cc:	2301      	movs	r3, #1
 80058ce:	f7fd ff47 	bl	8003760 <disk_write>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <f_write+0x150>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	755a      	strb	r2, [r3, #21]
 80058de:	2301      	movs	r3, #1
 80058e0:	e0c8      	b.n	8005a74 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	7d1b      	ldrb	r3, [r3, #20]
 80058e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe fabb 	bl	8003e74 <clust2sect>
 80058fe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <f_write+0x17e>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2202      	movs	r2, #2
 800590a:	755a      	strb	r2, [r3, #21]
 800590c:	2302      	movs	r3, #2
 800590e:	e0b1      	b.n	8005a74 <f_write+0x2e2>
			sect += csect;
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4413      	add	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	0a5b      	lsrs	r3, r3, #9
 800591c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d03c      	beq.n	800599e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	4413      	add	r3, r2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	8952      	ldrh	r2, [r2, #10]
 800592e:	4293      	cmp	r3, r2
 8005930:	d905      	bls.n	800593e <f_write+0x1ac>
					cc = fs->csize - csect;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	895b      	ldrh	r3, [r3, #10]
 8005936:	461a      	mov	r2, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	7858      	ldrb	r0, [r3, #1]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	69f9      	ldr	r1, [r7, #28]
 8005948:	f7fd ff0a 	bl	8003760 <disk_write>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <f_write+0x1ca>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	755a      	strb	r2, [r3, #21]
 8005958:	2301      	movs	r3, #1
 800595a:	e08b      	b.n	8005a74 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	429a      	cmp	r2, r3
 8005968:	d915      	bls.n	8005996 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	025b      	lsls	r3, r3, #9
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005982:	4619      	mov	r1, r3
 8005984:	f7fd ffac 	bl	80038e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	7d1b      	ldrb	r3, [r3, #20]
 800598c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800599c:	e03f      	b.n	8005a1e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d016      	beq.n	80059d6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d210      	bcs.n	80059d6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	7858      	ldrb	r0, [r3, #1]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80059be:	2301      	movs	r3, #1
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	f7fd fead 	bl	8003720 <disk_read>
 80059c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	755a      	strb	r2, [r3, #21]
 80059d2:	2301      	movs	r3, #1
 80059d4:	e04e      	b.n	8005a74 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80059ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d901      	bls.n	80059f6 <f_write+0x264>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a04:	4413      	add	r3, r2
 8005a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a08:	69f9      	ldr	r1, [r7, #28]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd ff68 	bl	80038e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	7d1b      	ldrb	r3, [r3, #20]
 8005a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	4413      	add	r3, r2
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	619a      	str	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	bf38      	it	cc
 8005a3e:	461a      	movcc	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	441a      	add	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f47f aed4 	bne.w	8005808 <f_write+0x76>
 8005a60:	e000      	b.n	8005a64 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a62:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	7d1b      	ldrb	r3, [r3, #20]
 8005a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	@ 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f107 0208 	add.w	r2, r7, #8
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fb0b 	bl	80050a8 <validate>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d168      	bne.n	8005b6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	7d1b      	ldrb	r3, [r3, #20]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d062      	beq.n	8005b6e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7d1b      	ldrb	r3, [r3, #20]
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da15      	bge.n	8005ade <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	7858      	ldrb	r0, [r3, #1]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f7fd fe4d 	bl	8003760 <disk_write>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <f_sync+0x54>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e04f      	b.n	8005b70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	7d1b      	ldrb	r3, [r3, #20]
 8005ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005ade:	f7fd fd7f 	bl	80035e0 <get_fattime>
 8005ae2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f7fe f925 	bl	8003d3c <move_window>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d138      	bne.n	8005b6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	330b      	adds	r3, #11
 8005b06:	781a      	ldrb	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	330b      	adds	r3, #11
 8005b0c:	f042 0220 	orr.w	r2, r2, #32
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f7fe fe2f 	bl	8004782 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f103 021c 	add.w	r2, r3, #28
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7fd fea9 	bl	8003888 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3316      	adds	r3, #22
 8005b3a:	6939      	ldr	r1, [r7, #16]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fd fea3 	bl	8003888 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3312      	adds	r3, #18
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd fe82 	bl	8003852 <st_word>
					fs->wflag = 1;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2201      	movs	r2, #1
 8005b52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe f91e 	bl	8003d98 <sync_fs>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7d1b      	ldrb	r3, [r3, #20]
 8005b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ff7b 	bl	8005a7c <f_sync>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d118      	bne.n	8005bc2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f107 0208 	add.w	r2, r7, #8
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fa85 	bl	80050a8 <validate>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe f821 	bl	8003bf4 <dec_lock>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b092      	sub	sp, #72	@ 0x48
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005bd8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	2200      	movs	r2, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f814 	bl	8004c10 <find_volume>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8005bee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 8099 	bne.w	8005d2a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	3b02      	subs	r3, #2
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d804      	bhi.n	8005c16 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e089      	b.n	8005d2a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d128      	bne.n	8005c74 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005c22:	2302      	movs	r3, #2
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c28:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005c2a:	f107 0314 	add.w	r3, r7, #20
 8005c2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f93e 	bl	8003eb2 <get_fat>
 8005c36:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	d103      	bne.n	8005c48 <f_getfree+0x7c>
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005c46:	e063      	b.n	8005d10 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d103      	bne.n	8005c56 <f_getfree+0x8a>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005c54:	e05c      	b.n	8005d10 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <f_getfree+0x96>
 8005c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5e:	3301      	adds	r3, #1
 8005c60:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8005c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c64:	3301      	adds	r3, #1
 8005c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3db      	bcc.n	8005c2a <f_getfree+0x5e>
 8005c72:	e04d      	b.n	8005d10 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c84:	2300      	movs	r3, #0
 8005c86:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8005c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d113      	bne.n	8005cb6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005c96:	4619      	mov	r1, r3
 8005c98:	f7fe f850 	bl	8003d3c <move_window>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8005ca2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d131      	bne.n	8005d0e <f_getfree+0x142>
							p = fs->win;
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	3330      	adds	r3, #48	@ 0x30
 8005cae:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8005cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d10f      	bne.n	8005cde <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cc0:	f7fd fd8c 	bl	80037dc <ld_word>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <f_getfree+0x104>
 8005cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ccc:	3301      	adds	r3, #1
 8005cce:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd8:	3b02      	subs	r3, #2
 8005cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cdc:	e010      	b.n	8005d00 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005cde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ce0:	f7fd fd94 	bl	800380c <ld_dword>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <f_getfree+0x128>
 8005cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	3b04      	subs	r3, #4
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8005d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d02:	3b01      	subs	r3, #1
 8005d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1bd      	bne.n	8005c88 <f_getfree+0xbc>
 8005d0c:	e000      	b.n	8005d10 <f_getfree+0x144>
							if (res != FR_OK) break;
 8005d0e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d14:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d1a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1e:	791a      	ldrb	r2, [r3, #4]
 8005d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005d2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3748      	adds	r7, #72	@ 0x48
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b088      	sub	sp, #32
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005d4a:	e01c      	b.n	8005d86 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005d4c:	f107 0310 	add.w	r3, r7, #16
 8005d50:	f107 0114 	add.w	r1, r7, #20
 8005d54:	2201      	movs	r2, #1
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fbdc 	bl	8005514 <f_read>
		if (rc != 1) break;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d117      	bne.n	8005d92 <f_gets+0x5c>
		c = s[0];
 8005d62:	7d3b      	ldrb	r3, [r7, #20]
 8005d64:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b0d      	cmp	r3, #13
 8005d6a:	d00b      	beq.n	8005d84 <f_gets+0x4e>
		*p++ = c;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	61ba      	str	r2, [r7, #24]
 8005d72:	7dfa      	ldrb	r2, [r7, #23]
 8005d74:	701a      	strb	r2, [r3, #0]
		n++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b0a      	cmp	r3, #10
 8005d80:	d009      	beq.n	8005d96 <f_gets+0x60>
 8005d82:	e000      	b.n	8005d86 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005d84:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	dbdd      	blt.n	8005d4c <f_gets+0x16>
 8005d90:	e002      	b.n	8005d98 <f_gets+0x62>
		if (rc != 1) break;
 8005d92:	bf00      	nop
 8005d94:	e000      	b.n	8005d98 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005d96:	bf00      	nop
	}
	*p = 0;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <f_gets+0x72>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	e000      	b.n	8005daa <f_gets+0x74>
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	2b0a      	cmp	r3, #10
 8005dc2:	d103      	bne.n	8005dcc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005dc4:	210d      	movs	r1, #13
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fff3 	bl	8005db2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db25      	blt.n	8005e24 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	60fa      	str	r2, [r7, #12]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	78fa      	ldrb	r2, [r7, #3]
 8005de4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b3c      	cmp	r3, #60	@ 0x3c
 8005dea:	dd12      	ble.n	8005e12 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f103 010c 	add.w	r1, r3, #12
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	f7ff fcc9 	bl	8005792 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d101      	bne.n	8005e0c <putc_bfd+0x5a>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e001      	b.n	8005e10 <putc_bfd+0x5e>
 8005e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e10:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	e000      	b.n	8005e26 <putc_bfd+0x74>
	if (i < 0) return;
 8005e24:	bf00      	nop
}
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db16      	blt.n	8005e6a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f103 010c 	add.w	r1, r3, #12
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f107 030c 	add.w	r3, r7, #12
 8005e50:	f7ff fc9f 	bl	8005792 <f_write>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d102      	bne.n	8005e6a <putc_flush+0x3e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	e001      	b.n	8005e6e <putc_flush+0x42>
	return EOF;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b096      	sub	sp, #88	@ 0x58
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff ffe0 	bl	8005e76 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005eb6:	e009      	b.n	8005ecc <f_puts+0x2c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ff73 	bl	8005db2 <putc_bfd>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f1      	bne.n	8005eb8 <f_puts+0x18>
	return putc_flush(&pb);
 8005ed4:	f107 030c 	add.w	r3, r7, #12
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ffa7 	bl	8005e2c <putc_flush>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3758      	adds	r7, #88	@ 0x58
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005efe:	4b1f      	ldr	r3, [pc, #124]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f00:	7a5b      	ldrb	r3, [r3, #9]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d131      	bne.n	8005f6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005f08:	4b1c      	ldr	r3, [pc, #112]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f0a:	7a5b      	ldrb	r3, [r3, #9]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b1a      	ldr	r3, [pc, #104]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f12:	2100      	movs	r1, #0
 8005f14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005f16:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f18:	7a5b      	ldrb	r3, [r3, #9]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4a17      	ldr	r2, [pc, #92]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005f26:	4b15      	ldr	r3, [pc, #84]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f28:	7a5b      	ldrb	r3, [r3, #9]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4b13      	ldr	r3, [pc, #76]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f30:	4413      	add	r3, r2
 8005f32:	79fa      	ldrb	r2, [r7, #7]
 8005f34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005f36:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f38:	7a5b      	ldrb	r3, [r3, #9]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	b2d1      	uxtb	r1, r2
 8005f40:	4a0e      	ldr	r2, [pc, #56]	@ (8005f7c <FATFS_LinkDriverEx+0x94>)
 8005f42:	7251      	strb	r1, [r2, #9]
 8005f44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005f46:	7dbb      	ldrb	r3, [r7, #22]
 8005f48:	3330      	adds	r3, #48	@ 0x30
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	3301      	adds	r3, #1
 8005f54:	223a      	movs	r2, #58	@ 0x3a
 8005f56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	222f      	movs	r2, #47	@ 0x2f
 8005f5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3303      	adds	r3, #3
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000db0 	.word	0x20000db0

08005f80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ffaa 	bl	8005ee8 <FATFS_LinkDriverEx>
 8005f94:	4603      	mov	r3, r0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <std>:
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8005faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fae:	6083      	str	r3, [r0, #8]
 8005fb0:	8181      	strh	r1, [r0, #12]
 8005fb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fb4:	81c2      	strh	r2, [r0, #14]
 8005fb6:	6183      	str	r3, [r0, #24]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	2208      	movs	r2, #8
 8005fbc:	305c      	adds	r0, #92	@ 0x5c
 8005fbe:	f000 f906 	bl	80061ce <memset>
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff8 <std+0x58>)
 8005fc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <std+0x5c>)
 8005fc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <std+0x60>)
 8005fcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <std+0x64>)
 8005fd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <std+0x68>)
 8005fd4:	6224      	str	r4, [r4, #32]
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	d006      	beq.n	8005fe8 <std+0x48>
 8005fda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fde:	4294      	cmp	r4, r2
 8005fe0:	d002      	beq.n	8005fe8 <std+0x48>
 8005fe2:	33d0      	adds	r3, #208	@ 0xd0
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	d105      	bne.n	8005ff4 <std+0x54>
 8005fe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff0:	f000 b966 	b.w	80062c0 <__retarget_lock_init_recursive>
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	08006149 	.word	0x08006149
 8005ffc:	0800616b 	.word	0x0800616b
 8006000:	080061a3 	.word	0x080061a3
 8006004:	080061c7 	.word	0x080061c7
 8006008:	20000dbc 	.word	0x20000dbc

0800600c <stdio_exit_handler>:
 800600c:	4a02      	ldr	r2, [pc, #8]	@ (8006018 <stdio_exit_handler+0xc>)
 800600e:	4903      	ldr	r1, [pc, #12]	@ (800601c <stdio_exit_handler+0x10>)
 8006010:	4803      	ldr	r0, [pc, #12]	@ (8006020 <stdio_exit_handler+0x14>)
 8006012:	f000 b869 	b.w	80060e8 <_fwalk_sglue>
 8006016:	bf00      	nop
 8006018:	20000024 	.word	0x20000024
 800601c:	08006b7d 	.word	0x08006b7d
 8006020:	20000034 	.word	0x20000034

08006024 <cleanup_stdio>:
 8006024:	6841      	ldr	r1, [r0, #4]
 8006026:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <cleanup_stdio+0x34>)
 8006028:	4299      	cmp	r1, r3
 800602a:	b510      	push	{r4, lr}
 800602c:	4604      	mov	r4, r0
 800602e:	d001      	beq.n	8006034 <cleanup_stdio+0x10>
 8006030:	f000 fda4 	bl	8006b7c <_fflush_r>
 8006034:	68a1      	ldr	r1, [r4, #8]
 8006036:	4b09      	ldr	r3, [pc, #36]	@ (800605c <cleanup_stdio+0x38>)
 8006038:	4299      	cmp	r1, r3
 800603a:	d002      	beq.n	8006042 <cleanup_stdio+0x1e>
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fd9d 	bl	8006b7c <_fflush_r>
 8006042:	68e1      	ldr	r1, [r4, #12]
 8006044:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <cleanup_stdio+0x3c>)
 8006046:	4299      	cmp	r1, r3
 8006048:	d004      	beq.n	8006054 <cleanup_stdio+0x30>
 800604a:	4620      	mov	r0, r4
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	f000 bd94 	b.w	8006b7c <_fflush_r>
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	20000dbc 	.word	0x20000dbc
 800605c:	20000e24 	.word	0x20000e24
 8006060:	20000e8c 	.word	0x20000e8c

08006064 <global_stdio_init.part.0>:
 8006064:	b510      	push	{r4, lr}
 8006066:	4b0b      	ldr	r3, [pc, #44]	@ (8006094 <global_stdio_init.part.0+0x30>)
 8006068:	4c0b      	ldr	r4, [pc, #44]	@ (8006098 <global_stdio_init.part.0+0x34>)
 800606a:	4a0c      	ldr	r2, [pc, #48]	@ (800609c <global_stdio_init.part.0+0x38>)
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	4620      	mov	r0, r4
 8006070:	2200      	movs	r2, #0
 8006072:	2104      	movs	r1, #4
 8006074:	f7ff ff94 	bl	8005fa0 <std>
 8006078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800607c:	2201      	movs	r2, #1
 800607e:	2109      	movs	r1, #9
 8006080:	f7ff ff8e 	bl	8005fa0 <std>
 8006084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006088:	2202      	movs	r2, #2
 800608a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608e:	2112      	movs	r1, #18
 8006090:	f7ff bf86 	b.w	8005fa0 <std>
 8006094:	20000ef4 	.word	0x20000ef4
 8006098:	20000dbc 	.word	0x20000dbc
 800609c:	0800600d 	.word	0x0800600d

080060a0 <__sfp_lock_acquire>:
 80060a0:	4801      	ldr	r0, [pc, #4]	@ (80060a8 <__sfp_lock_acquire+0x8>)
 80060a2:	f000 b90e 	b.w	80062c2 <__retarget_lock_acquire_recursive>
 80060a6:	bf00      	nop
 80060a8:	20000efd 	.word	0x20000efd

080060ac <__sfp_lock_release>:
 80060ac:	4801      	ldr	r0, [pc, #4]	@ (80060b4 <__sfp_lock_release+0x8>)
 80060ae:	f000 b909 	b.w	80062c4 <__retarget_lock_release_recursive>
 80060b2:	bf00      	nop
 80060b4:	20000efd 	.word	0x20000efd

080060b8 <__sinit>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4604      	mov	r4, r0
 80060bc:	f7ff fff0 	bl	80060a0 <__sfp_lock_acquire>
 80060c0:	6a23      	ldr	r3, [r4, #32]
 80060c2:	b11b      	cbz	r3, 80060cc <__sinit+0x14>
 80060c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c8:	f7ff bff0 	b.w	80060ac <__sfp_lock_release>
 80060cc:	4b04      	ldr	r3, [pc, #16]	@ (80060e0 <__sinit+0x28>)
 80060ce:	6223      	str	r3, [r4, #32]
 80060d0:	4b04      	ldr	r3, [pc, #16]	@ (80060e4 <__sinit+0x2c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f5      	bne.n	80060c4 <__sinit+0xc>
 80060d8:	f7ff ffc4 	bl	8006064 <global_stdio_init.part.0>
 80060dc:	e7f2      	b.n	80060c4 <__sinit+0xc>
 80060de:	bf00      	nop
 80060e0:	08006025 	.word	0x08006025
 80060e4:	20000ef4 	.word	0x20000ef4

080060e8 <_fwalk_sglue>:
 80060e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ec:	4607      	mov	r7, r0
 80060ee:	4688      	mov	r8, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	2600      	movs	r6, #0
 80060f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060f8:	f1b9 0901 	subs.w	r9, r9, #1
 80060fc:	d505      	bpl.n	800610a <_fwalk_sglue+0x22>
 80060fe:	6824      	ldr	r4, [r4, #0]
 8006100:	2c00      	cmp	r4, #0
 8006102:	d1f7      	bne.n	80060f4 <_fwalk_sglue+0xc>
 8006104:	4630      	mov	r0, r6
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d907      	bls.n	8006120 <_fwalk_sglue+0x38>
 8006110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006114:	3301      	adds	r3, #1
 8006116:	d003      	beq.n	8006120 <_fwalk_sglue+0x38>
 8006118:	4629      	mov	r1, r5
 800611a:	4638      	mov	r0, r7
 800611c:	47c0      	blx	r8
 800611e:	4306      	orrs	r6, r0
 8006120:	3568      	adds	r5, #104	@ 0x68
 8006122:	e7e9      	b.n	80060f8 <_fwalk_sglue+0x10>

08006124 <iprintf>:
 8006124:	b40f      	push	{r0, r1, r2, r3}
 8006126:	b507      	push	{r0, r1, r2, lr}
 8006128:	4906      	ldr	r1, [pc, #24]	@ (8006144 <iprintf+0x20>)
 800612a:	ab04      	add	r3, sp, #16
 800612c:	6808      	ldr	r0, [r1, #0]
 800612e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006132:	6881      	ldr	r1, [r0, #8]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	f000 f9f7 	bl	8006528 <_vfiprintf_r>
 800613a:	b003      	add	sp, #12
 800613c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006140:	b004      	add	sp, #16
 8006142:	4770      	bx	lr
 8006144:	20000030 	.word	0x20000030

08006148 <__sread>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	f000 f868 	bl	8006224 <_read_r>
 8006154:	2800      	cmp	r0, #0
 8006156:	bfab      	itete	ge
 8006158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800615a:	89a3      	ldrhlt	r3, [r4, #12]
 800615c:	181b      	addge	r3, r3, r0
 800615e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006162:	bfac      	ite	ge
 8006164:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006166:	81a3      	strhlt	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__swrite>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	461f      	mov	r7, r3
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d505      	bpl.n	8006188 <__swrite+0x1e>
 800617c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006180:	2302      	movs	r3, #2
 8006182:	2200      	movs	r2, #0
 8006184:	f000 f83c 	bl	8006200 <_lseek_r>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	4628      	mov	r0, r5
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f000 b853 	b.w	8006248 <_write_r>

080061a2 <__sseek>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 f829 	bl	8006200 <_lseek_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	bf15      	itete	ne
 80061b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061be:	81a3      	strheq	r3, [r4, #12]
 80061c0:	bf18      	it	ne
 80061c2:	81a3      	strhne	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__sclose>:
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 b809 	b.w	80061e0 <_close_r>

080061ce <memset>:
 80061ce:	4402      	add	r2, r0
 80061d0:	4603      	mov	r3, r0
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d100      	bne.n	80061d8 <memset+0xa>
 80061d6:	4770      	bx	lr
 80061d8:	f803 1b01 	strb.w	r1, [r3], #1
 80061dc:	e7f9      	b.n	80061d2 <memset+0x4>
	...

080061e0 <_close_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d06      	ldr	r5, [pc, #24]	@ (80061fc <_close_r+0x1c>)
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fb fd6f 	bl	8001cce <_close>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_close_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_close_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20000ef8 	.word	0x20000ef8

08006200 <_lseek_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d07      	ldr	r5, [pc, #28]	@ (8006220 <_lseek_r+0x20>)
 8006204:	4604      	mov	r4, r0
 8006206:	4608      	mov	r0, r1
 8006208:	4611      	mov	r1, r2
 800620a:	2200      	movs	r2, #0
 800620c:	602a      	str	r2, [r5, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	f7fb fd84 	bl	8001d1c <_lseek>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_lseek_r+0x1e>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_lseek_r+0x1e>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	20000ef8 	.word	0x20000ef8

08006224 <_read_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	@ (8006244 <_read_r+0x20>)
 8006228:	4604      	mov	r4, r0
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f7fb fd2e 	bl	8001c94 <_read>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_read_r+0x1e>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_read_r+0x1e>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000ef8 	.word	0x20000ef8

08006248 <_write_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	@ (8006268 <_write_r+0x20>)
 800624c:	4604      	mov	r4, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fb f9a8 	bl	80015ac <_write>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_write_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_write_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000ef8 	.word	0x20000ef8

0800626c <__errno>:
 800626c:	4b01      	ldr	r3, [pc, #4]	@ (8006274 <__errno+0x8>)
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000030 	.word	0x20000030

08006278 <__libc_init_array>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	4d0d      	ldr	r5, [pc, #52]	@ (80062b0 <__libc_init_array+0x38>)
 800627c:	4c0d      	ldr	r4, [pc, #52]	@ (80062b4 <__libc_init_array+0x3c>)
 800627e:	1b64      	subs	r4, r4, r5
 8006280:	10a4      	asrs	r4, r4, #2
 8006282:	2600      	movs	r6, #0
 8006284:	42a6      	cmp	r6, r4
 8006286:	d109      	bne.n	800629c <__libc_init_array+0x24>
 8006288:	4d0b      	ldr	r5, [pc, #44]	@ (80062b8 <__libc_init_array+0x40>)
 800628a:	4c0c      	ldr	r4, [pc, #48]	@ (80062bc <__libc_init_array+0x44>)
 800628c:	f000 fdc6 	bl	8006e1c <_init>
 8006290:	1b64      	subs	r4, r4, r5
 8006292:	10a4      	asrs	r4, r4, #2
 8006294:	2600      	movs	r6, #0
 8006296:	42a6      	cmp	r6, r4
 8006298:	d105      	bne.n	80062a6 <__libc_init_array+0x2e>
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a0:	4798      	blx	r3
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7ee      	b.n	8006284 <__libc_init_array+0xc>
 80062a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062aa:	4798      	blx	r3
 80062ac:	3601      	adds	r6, #1
 80062ae:	e7f2      	b.n	8006296 <__libc_init_array+0x1e>
 80062b0:	080071d0 	.word	0x080071d0
 80062b4:	080071d0 	.word	0x080071d0
 80062b8:	080071d0 	.word	0x080071d0
 80062bc:	080071d4 	.word	0x080071d4

080062c0 <__retarget_lock_init_recursive>:
 80062c0:	4770      	bx	lr

080062c2 <__retarget_lock_acquire_recursive>:
 80062c2:	4770      	bx	lr

080062c4 <__retarget_lock_release_recursive>:
 80062c4:	4770      	bx	lr

080062c6 <memcpy>:
 80062c6:	440a      	add	r2, r1
 80062c8:	4291      	cmp	r1, r2
 80062ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ce:	d100      	bne.n	80062d2 <memcpy+0xc>
 80062d0:	4770      	bx	lr
 80062d2:	b510      	push	{r4, lr}
 80062d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062dc:	4291      	cmp	r1, r2
 80062de:	d1f9      	bne.n	80062d4 <memcpy+0xe>
 80062e0:	bd10      	pop	{r4, pc}
	...

080062e4 <_free_r>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4605      	mov	r5, r0
 80062e8:	2900      	cmp	r1, #0
 80062ea:	d041      	beq.n	8006370 <_free_r+0x8c>
 80062ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f0:	1f0c      	subs	r4, r1, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bfb8      	it	lt
 80062f6:	18e4      	addlt	r4, r4, r3
 80062f8:	f000 f8e0 	bl	80064bc <__malloc_lock>
 80062fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006374 <_free_r+0x90>)
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	b933      	cbnz	r3, 8006310 <_free_r+0x2c>
 8006302:	6063      	str	r3, [r4, #4]
 8006304:	6014      	str	r4, [r2, #0]
 8006306:	4628      	mov	r0, r5
 8006308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630c:	f000 b8dc 	b.w	80064c8 <__malloc_unlock>
 8006310:	42a3      	cmp	r3, r4
 8006312:	d908      	bls.n	8006326 <_free_r+0x42>
 8006314:	6820      	ldr	r0, [r4, #0]
 8006316:	1821      	adds	r1, r4, r0
 8006318:	428b      	cmp	r3, r1
 800631a:	bf01      	itttt	eq
 800631c:	6819      	ldreq	r1, [r3, #0]
 800631e:	685b      	ldreq	r3, [r3, #4]
 8006320:	1809      	addeq	r1, r1, r0
 8006322:	6021      	streq	r1, [r4, #0]
 8006324:	e7ed      	b.n	8006302 <_free_r+0x1e>
 8006326:	461a      	mov	r2, r3
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	b10b      	cbz	r3, 8006330 <_free_r+0x4c>
 800632c:	42a3      	cmp	r3, r4
 800632e:	d9fa      	bls.n	8006326 <_free_r+0x42>
 8006330:	6811      	ldr	r1, [r2, #0]
 8006332:	1850      	adds	r0, r2, r1
 8006334:	42a0      	cmp	r0, r4
 8006336:	d10b      	bne.n	8006350 <_free_r+0x6c>
 8006338:	6820      	ldr	r0, [r4, #0]
 800633a:	4401      	add	r1, r0
 800633c:	1850      	adds	r0, r2, r1
 800633e:	4283      	cmp	r3, r0
 8006340:	6011      	str	r1, [r2, #0]
 8006342:	d1e0      	bne.n	8006306 <_free_r+0x22>
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	6053      	str	r3, [r2, #4]
 800634a:	4408      	add	r0, r1
 800634c:	6010      	str	r0, [r2, #0]
 800634e:	e7da      	b.n	8006306 <_free_r+0x22>
 8006350:	d902      	bls.n	8006358 <_free_r+0x74>
 8006352:	230c      	movs	r3, #12
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	e7d6      	b.n	8006306 <_free_r+0x22>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	1821      	adds	r1, r4, r0
 800635c:	428b      	cmp	r3, r1
 800635e:	bf04      	itt	eq
 8006360:	6819      	ldreq	r1, [r3, #0]
 8006362:	685b      	ldreq	r3, [r3, #4]
 8006364:	6063      	str	r3, [r4, #4]
 8006366:	bf04      	itt	eq
 8006368:	1809      	addeq	r1, r1, r0
 800636a:	6021      	streq	r1, [r4, #0]
 800636c:	6054      	str	r4, [r2, #4]
 800636e:	e7ca      	b.n	8006306 <_free_r+0x22>
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop
 8006374:	20000f04 	.word	0x20000f04

08006378 <sbrk_aligned>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4e0f      	ldr	r6, [pc, #60]	@ (80063b8 <sbrk_aligned+0x40>)
 800637c:	460c      	mov	r4, r1
 800637e:	6831      	ldr	r1, [r6, #0]
 8006380:	4605      	mov	r5, r0
 8006382:	b911      	cbnz	r1, 800638a <sbrk_aligned+0x12>
 8006384:	f000 fcb6 	bl	8006cf4 <_sbrk_r>
 8006388:	6030      	str	r0, [r6, #0]
 800638a:	4621      	mov	r1, r4
 800638c:	4628      	mov	r0, r5
 800638e:	f000 fcb1 	bl	8006cf4 <_sbrk_r>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d103      	bne.n	800639e <sbrk_aligned+0x26>
 8006396:	f04f 34ff 	mov.w	r4, #4294967295
 800639a:	4620      	mov	r0, r4
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	1cc4      	adds	r4, r0, #3
 80063a0:	f024 0403 	bic.w	r4, r4, #3
 80063a4:	42a0      	cmp	r0, r4
 80063a6:	d0f8      	beq.n	800639a <sbrk_aligned+0x22>
 80063a8:	1a21      	subs	r1, r4, r0
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 fca2 	bl	8006cf4 <_sbrk_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d1f2      	bne.n	800639a <sbrk_aligned+0x22>
 80063b4:	e7ef      	b.n	8006396 <sbrk_aligned+0x1e>
 80063b6:	bf00      	nop
 80063b8:	20000f00 	.word	0x20000f00

080063bc <_malloc_r>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	1ccd      	adds	r5, r1, #3
 80063c2:	f025 0503 	bic.w	r5, r5, #3
 80063c6:	3508      	adds	r5, #8
 80063c8:	2d0c      	cmp	r5, #12
 80063ca:	bf38      	it	cc
 80063cc:	250c      	movcc	r5, #12
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	4606      	mov	r6, r0
 80063d2:	db01      	blt.n	80063d8 <_malloc_r+0x1c>
 80063d4:	42a9      	cmp	r1, r5
 80063d6:	d904      	bls.n	80063e2 <_malloc_r+0x26>
 80063d8:	230c      	movs	r3, #12
 80063da:	6033      	str	r3, [r6, #0]
 80063dc:	2000      	movs	r0, #0
 80063de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064b8 <_malloc_r+0xfc>
 80063e6:	f000 f869 	bl	80064bc <__malloc_lock>
 80063ea:	f8d8 3000 	ldr.w	r3, [r8]
 80063ee:	461c      	mov	r4, r3
 80063f0:	bb44      	cbnz	r4, 8006444 <_malloc_r+0x88>
 80063f2:	4629      	mov	r1, r5
 80063f4:	4630      	mov	r0, r6
 80063f6:	f7ff ffbf 	bl	8006378 <sbrk_aligned>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	4604      	mov	r4, r0
 80063fe:	d158      	bne.n	80064b2 <_malloc_r+0xf6>
 8006400:	f8d8 4000 	ldr.w	r4, [r8]
 8006404:	4627      	mov	r7, r4
 8006406:	2f00      	cmp	r7, #0
 8006408:	d143      	bne.n	8006492 <_malloc_r+0xd6>
 800640a:	2c00      	cmp	r4, #0
 800640c:	d04b      	beq.n	80064a6 <_malloc_r+0xea>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	4639      	mov	r1, r7
 8006412:	4630      	mov	r0, r6
 8006414:	eb04 0903 	add.w	r9, r4, r3
 8006418:	f000 fc6c 	bl	8006cf4 <_sbrk_r>
 800641c:	4581      	cmp	r9, r0
 800641e:	d142      	bne.n	80064a6 <_malloc_r+0xea>
 8006420:	6821      	ldr	r1, [r4, #0]
 8006422:	1a6d      	subs	r5, r5, r1
 8006424:	4629      	mov	r1, r5
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffa6 	bl	8006378 <sbrk_aligned>
 800642c:	3001      	adds	r0, #1
 800642e:	d03a      	beq.n	80064a6 <_malloc_r+0xea>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	442b      	add	r3, r5
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	f8d8 3000 	ldr.w	r3, [r8]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	bb62      	cbnz	r2, 8006498 <_malloc_r+0xdc>
 800643e:	f8c8 7000 	str.w	r7, [r8]
 8006442:	e00f      	b.n	8006464 <_malloc_r+0xa8>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	1b52      	subs	r2, r2, r5
 8006448:	d420      	bmi.n	800648c <_malloc_r+0xd0>
 800644a:	2a0b      	cmp	r2, #11
 800644c:	d917      	bls.n	800647e <_malloc_r+0xc2>
 800644e:	1961      	adds	r1, r4, r5
 8006450:	42a3      	cmp	r3, r4
 8006452:	6025      	str	r5, [r4, #0]
 8006454:	bf18      	it	ne
 8006456:	6059      	strne	r1, [r3, #4]
 8006458:	6863      	ldr	r3, [r4, #4]
 800645a:	bf08      	it	eq
 800645c:	f8c8 1000 	streq.w	r1, [r8]
 8006460:	5162      	str	r2, [r4, r5]
 8006462:	604b      	str	r3, [r1, #4]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f82f 	bl	80064c8 <__malloc_unlock>
 800646a:	f104 000b 	add.w	r0, r4, #11
 800646e:	1d23      	adds	r3, r4, #4
 8006470:	f020 0007 	bic.w	r0, r0, #7
 8006474:	1ac2      	subs	r2, r0, r3
 8006476:	bf1c      	itt	ne
 8006478:	1a1b      	subne	r3, r3, r0
 800647a:	50a3      	strne	r3, [r4, r2]
 800647c:	e7af      	b.n	80063de <_malloc_r+0x22>
 800647e:	6862      	ldr	r2, [r4, #4]
 8006480:	42a3      	cmp	r3, r4
 8006482:	bf0c      	ite	eq
 8006484:	f8c8 2000 	streq.w	r2, [r8]
 8006488:	605a      	strne	r2, [r3, #4]
 800648a:	e7eb      	b.n	8006464 <_malloc_r+0xa8>
 800648c:	4623      	mov	r3, r4
 800648e:	6864      	ldr	r4, [r4, #4]
 8006490:	e7ae      	b.n	80063f0 <_malloc_r+0x34>
 8006492:	463c      	mov	r4, r7
 8006494:	687f      	ldr	r7, [r7, #4]
 8006496:	e7b6      	b.n	8006406 <_malloc_r+0x4a>
 8006498:	461a      	mov	r2, r3
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	42a3      	cmp	r3, r4
 800649e:	d1fb      	bne.n	8006498 <_malloc_r+0xdc>
 80064a0:	2300      	movs	r3, #0
 80064a2:	6053      	str	r3, [r2, #4]
 80064a4:	e7de      	b.n	8006464 <_malloc_r+0xa8>
 80064a6:	230c      	movs	r3, #12
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	4630      	mov	r0, r6
 80064ac:	f000 f80c 	bl	80064c8 <__malloc_unlock>
 80064b0:	e794      	b.n	80063dc <_malloc_r+0x20>
 80064b2:	6005      	str	r5, [r0, #0]
 80064b4:	e7d6      	b.n	8006464 <_malloc_r+0xa8>
 80064b6:	bf00      	nop
 80064b8:	20000f04 	.word	0x20000f04

080064bc <__malloc_lock>:
 80064bc:	4801      	ldr	r0, [pc, #4]	@ (80064c4 <__malloc_lock+0x8>)
 80064be:	f7ff bf00 	b.w	80062c2 <__retarget_lock_acquire_recursive>
 80064c2:	bf00      	nop
 80064c4:	20000efc 	.word	0x20000efc

080064c8 <__malloc_unlock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	@ (80064d0 <__malloc_unlock+0x8>)
 80064ca:	f7ff befb 	b.w	80062c4 <__retarget_lock_release_recursive>
 80064ce:	bf00      	nop
 80064d0:	20000efc 	.word	0x20000efc

080064d4 <__sfputc_r>:
 80064d4:	6893      	ldr	r3, [r2, #8]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	b410      	push	{r4}
 80064dc:	6093      	str	r3, [r2, #8]
 80064de:	da08      	bge.n	80064f2 <__sfputc_r+0x1e>
 80064e0:	6994      	ldr	r4, [r2, #24]
 80064e2:	42a3      	cmp	r3, r4
 80064e4:	db01      	blt.n	80064ea <__sfputc_r+0x16>
 80064e6:	290a      	cmp	r1, #10
 80064e8:	d103      	bne.n	80064f2 <__sfputc_r+0x1e>
 80064ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ee:	f000 bb6d 	b.w	8006bcc <__swbuf_r>
 80064f2:	6813      	ldr	r3, [r2, #0]
 80064f4:	1c58      	adds	r0, r3, #1
 80064f6:	6010      	str	r0, [r2, #0]
 80064f8:	7019      	strb	r1, [r3, #0]
 80064fa:	4608      	mov	r0, r1
 80064fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006500:	4770      	bx	lr

08006502 <__sfputs_r>:
 8006502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006504:	4606      	mov	r6, r0
 8006506:	460f      	mov	r7, r1
 8006508:	4614      	mov	r4, r2
 800650a:	18d5      	adds	r5, r2, r3
 800650c:	42ac      	cmp	r4, r5
 800650e:	d101      	bne.n	8006514 <__sfputs_r+0x12>
 8006510:	2000      	movs	r0, #0
 8006512:	e007      	b.n	8006524 <__sfputs_r+0x22>
 8006514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006518:	463a      	mov	r2, r7
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff ffda 	bl	80064d4 <__sfputc_r>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d1f3      	bne.n	800650c <__sfputs_r+0xa>
 8006524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006528 <_vfiprintf_r>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	460d      	mov	r5, r1
 800652e:	b09d      	sub	sp, #116	@ 0x74
 8006530:	4614      	mov	r4, r2
 8006532:	4698      	mov	r8, r3
 8006534:	4606      	mov	r6, r0
 8006536:	b118      	cbz	r0, 8006540 <_vfiprintf_r+0x18>
 8006538:	6a03      	ldr	r3, [r0, #32]
 800653a:	b90b      	cbnz	r3, 8006540 <_vfiprintf_r+0x18>
 800653c:	f7ff fdbc 	bl	80060b8 <__sinit>
 8006540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006542:	07d9      	lsls	r1, r3, #31
 8006544:	d405      	bmi.n	8006552 <_vfiprintf_r+0x2a>
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	059a      	lsls	r2, r3, #22
 800654a:	d402      	bmi.n	8006552 <_vfiprintf_r+0x2a>
 800654c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800654e:	f7ff feb8 	bl	80062c2 <__retarget_lock_acquire_recursive>
 8006552:	89ab      	ldrh	r3, [r5, #12]
 8006554:	071b      	lsls	r3, r3, #28
 8006556:	d501      	bpl.n	800655c <_vfiprintf_r+0x34>
 8006558:	692b      	ldr	r3, [r5, #16]
 800655a:	b99b      	cbnz	r3, 8006584 <_vfiprintf_r+0x5c>
 800655c:	4629      	mov	r1, r5
 800655e:	4630      	mov	r0, r6
 8006560:	f000 fb72 	bl	8006c48 <__swsetup_r>
 8006564:	b170      	cbz	r0, 8006584 <_vfiprintf_r+0x5c>
 8006566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006568:	07dc      	lsls	r4, r3, #31
 800656a:	d504      	bpl.n	8006576 <_vfiprintf_r+0x4e>
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	b01d      	add	sp, #116	@ 0x74
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	89ab      	ldrh	r3, [r5, #12]
 8006578:	0598      	lsls	r0, r3, #22
 800657a:	d4f7      	bmi.n	800656c <_vfiprintf_r+0x44>
 800657c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800657e:	f7ff fea1 	bl	80062c4 <__retarget_lock_release_recursive>
 8006582:	e7f3      	b.n	800656c <_vfiprintf_r+0x44>
 8006584:	2300      	movs	r3, #0
 8006586:	9309      	str	r3, [sp, #36]	@ 0x24
 8006588:	2320      	movs	r3, #32
 800658a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800658e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006592:	2330      	movs	r3, #48	@ 0x30
 8006594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006744 <_vfiprintf_r+0x21c>
 8006598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800659c:	f04f 0901 	mov.w	r9, #1
 80065a0:	4623      	mov	r3, r4
 80065a2:	469a      	mov	sl, r3
 80065a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a8:	b10a      	cbz	r2, 80065ae <_vfiprintf_r+0x86>
 80065aa:	2a25      	cmp	r2, #37	@ 0x25
 80065ac:	d1f9      	bne.n	80065a2 <_vfiprintf_r+0x7a>
 80065ae:	ebba 0b04 	subs.w	fp, sl, r4
 80065b2:	d00b      	beq.n	80065cc <_vfiprintf_r+0xa4>
 80065b4:	465b      	mov	r3, fp
 80065b6:	4622      	mov	r2, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ffa1 	bl	8006502 <__sfputs_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	f000 80a7 	beq.w	8006714 <_vfiprintf_r+0x1ec>
 80065c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c8:	445a      	add	r2, fp
 80065ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80065cc:	f89a 3000 	ldrb.w	r3, [sl]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 809f 	beq.w	8006714 <_vfiprintf_r+0x1ec>
 80065d6:	2300      	movs	r3, #0
 80065d8:	f04f 32ff 	mov.w	r2, #4294967295
 80065dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e0:	f10a 0a01 	add.w	sl, sl, #1
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	9307      	str	r3, [sp, #28]
 80065e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ee:	4654      	mov	r4, sl
 80065f0:	2205      	movs	r2, #5
 80065f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f6:	4853      	ldr	r0, [pc, #332]	@ (8006744 <_vfiprintf_r+0x21c>)
 80065f8:	f7f9 fdf2 	bl	80001e0 <memchr>
 80065fc:	9a04      	ldr	r2, [sp, #16]
 80065fe:	b9d8      	cbnz	r0, 8006638 <_vfiprintf_r+0x110>
 8006600:	06d1      	lsls	r1, r2, #27
 8006602:	bf44      	itt	mi
 8006604:	2320      	movmi	r3, #32
 8006606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800660a:	0713      	lsls	r3, r2, #28
 800660c:	bf44      	itt	mi
 800660e:	232b      	movmi	r3, #43	@ 0x2b
 8006610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006614:	f89a 3000 	ldrb.w	r3, [sl]
 8006618:	2b2a      	cmp	r3, #42	@ 0x2a
 800661a:	d015      	beq.n	8006648 <_vfiprintf_r+0x120>
 800661c:	9a07      	ldr	r2, [sp, #28]
 800661e:	4654      	mov	r4, sl
 8006620:	2000      	movs	r0, #0
 8006622:	f04f 0c0a 	mov.w	ip, #10
 8006626:	4621      	mov	r1, r4
 8006628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662c:	3b30      	subs	r3, #48	@ 0x30
 800662e:	2b09      	cmp	r3, #9
 8006630:	d94b      	bls.n	80066ca <_vfiprintf_r+0x1a2>
 8006632:	b1b0      	cbz	r0, 8006662 <_vfiprintf_r+0x13a>
 8006634:	9207      	str	r2, [sp, #28]
 8006636:	e014      	b.n	8006662 <_vfiprintf_r+0x13a>
 8006638:	eba0 0308 	sub.w	r3, r0, r8
 800663c:	fa09 f303 	lsl.w	r3, r9, r3
 8006640:	4313      	orrs	r3, r2
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	46a2      	mov	sl, r4
 8006646:	e7d2      	b.n	80065ee <_vfiprintf_r+0xc6>
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	1d19      	adds	r1, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	9103      	str	r1, [sp, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	bfbb      	ittet	lt
 8006654:	425b      	neglt	r3, r3
 8006656:	f042 0202 	orrlt.w	r2, r2, #2
 800665a:	9307      	strge	r3, [sp, #28]
 800665c:	9307      	strlt	r3, [sp, #28]
 800665e:	bfb8      	it	lt
 8006660:	9204      	strlt	r2, [sp, #16]
 8006662:	7823      	ldrb	r3, [r4, #0]
 8006664:	2b2e      	cmp	r3, #46	@ 0x2e
 8006666:	d10a      	bne.n	800667e <_vfiprintf_r+0x156>
 8006668:	7863      	ldrb	r3, [r4, #1]
 800666a:	2b2a      	cmp	r3, #42	@ 0x2a
 800666c:	d132      	bne.n	80066d4 <_vfiprintf_r+0x1ac>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	1d1a      	adds	r2, r3, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	9203      	str	r2, [sp, #12]
 8006676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800667a:	3402      	adds	r4, #2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006754 <_vfiprintf_r+0x22c>
 8006682:	7821      	ldrb	r1, [r4, #0]
 8006684:	2203      	movs	r2, #3
 8006686:	4650      	mov	r0, sl
 8006688:	f7f9 fdaa 	bl	80001e0 <memchr>
 800668c:	b138      	cbz	r0, 800669e <_vfiprintf_r+0x176>
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	eba0 000a 	sub.w	r0, r0, sl
 8006694:	2240      	movs	r2, #64	@ 0x40
 8006696:	4082      	lsls	r2, r0
 8006698:	4313      	orrs	r3, r2
 800669a:	3401      	adds	r4, #1
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a2:	4829      	ldr	r0, [pc, #164]	@ (8006748 <_vfiprintf_r+0x220>)
 80066a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066a8:	2206      	movs	r2, #6
 80066aa:	f7f9 fd99 	bl	80001e0 <memchr>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d03f      	beq.n	8006732 <_vfiprintf_r+0x20a>
 80066b2:	4b26      	ldr	r3, [pc, #152]	@ (800674c <_vfiprintf_r+0x224>)
 80066b4:	bb1b      	cbnz	r3, 80066fe <_vfiprintf_r+0x1d6>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	3307      	adds	r3, #7
 80066ba:	f023 0307 	bic.w	r3, r3, #7
 80066be:	3308      	adds	r3, #8
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c4:	443b      	add	r3, r7
 80066c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c8:	e76a      	b.n	80065a0 <_vfiprintf_r+0x78>
 80066ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ce:	460c      	mov	r4, r1
 80066d0:	2001      	movs	r0, #1
 80066d2:	e7a8      	b.n	8006626 <_vfiprintf_r+0xfe>
 80066d4:	2300      	movs	r3, #0
 80066d6:	3401      	adds	r4, #1
 80066d8:	9305      	str	r3, [sp, #20]
 80066da:	4619      	mov	r1, r3
 80066dc:	f04f 0c0a 	mov.w	ip, #10
 80066e0:	4620      	mov	r0, r4
 80066e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e6:	3a30      	subs	r2, #48	@ 0x30
 80066e8:	2a09      	cmp	r2, #9
 80066ea:	d903      	bls.n	80066f4 <_vfiprintf_r+0x1cc>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0c6      	beq.n	800667e <_vfiprintf_r+0x156>
 80066f0:	9105      	str	r1, [sp, #20]
 80066f2:	e7c4      	b.n	800667e <_vfiprintf_r+0x156>
 80066f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f8:	4604      	mov	r4, r0
 80066fa:	2301      	movs	r3, #1
 80066fc:	e7f0      	b.n	80066e0 <_vfiprintf_r+0x1b8>
 80066fe:	ab03      	add	r3, sp, #12
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	462a      	mov	r2, r5
 8006704:	4b12      	ldr	r3, [pc, #72]	@ (8006750 <_vfiprintf_r+0x228>)
 8006706:	a904      	add	r1, sp, #16
 8006708:	4630      	mov	r0, r6
 800670a:	f3af 8000 	nop.w
 800670e:	4607      	mov	r7, r0
 8006710:	1c78      	adds	r0, r7, #1
 8006712:	d1d6      	bne.n	80066c2 <_vfiprintf_r+0x19a>
 8006714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	d405      	bmi.n	8006726 <_vfiprintf_r+0x1fe>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	059a      	lsls	r2, r3, #22
 800671e:	d402      	bmi.n	8006726 <_vfiprintf_r+0x1fe>
 8006720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006722:	f7ff fdcf 	bl	80062c4 <__retarget_lock_release_recursive>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	065b      	lsls	r3, r3, #25
 800672a:	f53f af1f 	bmi.w	800656c <_vfiprintf_r+0x44>
 800672e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006730:	e71e      	b.n	8006570 <_vfiprintf_r+0x48>
 8006732:	ab03      	add	r3, sp, #12
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	462a      	mov	r2, r5
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <_vfiprintf_r+0x228>)
 800673a:	a904      	add	r1, sp, #16
 800673c:	4630      	mov	r0, r6
 800673e:	f000 f879 	bl	8006834 <_printf_i>
 8006742:	e7e4      	b.n	800670e <_vfiprintf_r+0x1e6>
 8006744:	08007194 	.word	0x08007194
 8006748:	0800719e 	.word	0x0800719e
 800674c:	00000000 	.word	0x00000000
 8006750:	08006503 	.word	0x08006503
 8006754:	0800719a 	.word	0x0800719a

08006758 <_printf_common>:
 8006758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	4616      	mov	r6, r2
 800675e:	4698      	mov	r8, r3
 8006760:	688a      	ldr	r2, [r1, #8]
 8006762:	690b      	ldr	r3, [r1, #16]
 8006764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006768:	4293      	cmp	r3, r2
 800676a:	bfb8      	it	lt
 800676c:	4613      	movlt	r3, r2
 800676e:	6033      	str	r3, [r6, #0]
 8006770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006774:	4607      	mov	r7, r0
 8006776:	460c      	mov	r4, r1
 8006778:	b10a      	cbz	r2, 800677e <_printf_common+0x26>
 800677a:	3301      	adds	r3, #1
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	0699      	lsls	r1, r3, #26
 8006782:	bf42      	ittt	mi
 8006784:	6833      	ldrmi	r3, [r6, #0]
 8006786:	3302      	addmi	r3, #2
 8006788:	6033      	strmi	r3, [r6, #0]
 800678a:	6825      	ldr	r5, [r4, #0]
 800678c:	f015 0506 	ands.w	r5, r5, #6
 8006790:	d106      	bne.n	80067a0 <_printf_common+0x48>
 8006792:	f104 0a19 	add.w	sl, r4, #25
 8006796:	68e3      	ldr	r3, [r4, #12]
 8006798:	6832      	ldr	r2, [r6, #0]
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	42ab      	cmp	r3, r5
 800679e:	dc26      	bgt.n	80067ee <_printf_common+0x96>
 80067a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	3b00      	subs	r3, #0
 80067a8:	bf18      	it	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	0692      	lsls	r2, r2, #26
 80067ae:	d42b      	bmi.n	8006808 <_printf_common+0xb0>
 80067b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067b4:	4641      	mov	r1, r8
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c8      	blx	r9
 80067ba:	3001      	adds	r0, #1
 80067bc:	d01e      	beq.n	80067fc <_printf_common+0xa4>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	6922      	ldr	r2, [r4, #16]
 80067c2:	f003 0306 	and.w	r3, r3, #6
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	bf02      	ittt	eq
 80067ca:	68e5      	ldreq	r5, [r4, #12]
 80067cc:	6833      	ldreq	r3, [r6, #0]
 80067ce:	1aed      	subeq	r5, r5, r3
 80067d0:	68a3      	ldr	r3, [r4, #8]
 80067d2:	bf0c      	ite	eq
 80067d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d8:	2500      	movne	r5, #0
 80067da:	4293      	cmp	r3, r2
 80067dc:	bfc4      	itt	gt
 80067de:	1a9b      	subgt	r3, r3, r2
 80067e0:	18ed      	addgt	r5, r5, r3
 80067e2:	2600      	movs	r6, #0
 80067e4:	341a      	adds	r4, #26
 80067e6:	42b5      	cmp	r5, r6
 80067e8:	d11a      	bne.n	8006820 <_printf_common+0xc8>
 80067ea:	2000      	movs	r0, #0
 80067ec:	e008      	b.n	8006800 <_printf_common+0xa8>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4641      	mov	r1, r8
 80067f4:	4638      	mov	r0, r7
 80067f6:	47c8      	blx	r9
 80067f8:	3001      	adds	r0, #1
 80067fa:	d103      	bne.n	8006804 <_printf_common+0xac>
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006804:	3501      	adds	r5, #1
 8006806:	e7c6      	b.n	8006796 <_printf_common+0x3e>
 8006808:	18e1      	adds	r1, r4, r3
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	2030      	movs	r0, #48	@ 0x30
 800680e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006812:	4422      	add	r2, r4
 8006814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800681c:	3302      	adds	r3, #2
 800681e:	e7c7      	b.n	80067b0 <_printf_common+0x58>
 8006820:	2301      	movs	r3, #1
 8006822:	4622      	mov	r2, r4
 8006824:	4641      	mov	r1, r8
 8006826:	4638      	mov	r0, r7
 8006828:	47c8      	blx	r9
 800682a:	3001      	adds	r0, #1
 800682c:	d0e6      	beq.n	80067fc <_printf_common+0xa4>
 800682e:	3601      	adds	r6, #1
 8006830:	e7d9      	b.n	80067e6 <_printf_common+0x8e>
	...

08006834 <_printf_i>:
 8006834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	7e0f      	ldrb	r7, [r1, #24]
 800683a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800683c:	2f78      	cmp	r7, #120	@ 0x78
 800683e:	4691      	mov	r9, r2
 8006840:	4680      	mov	r8, r0
 8006842:	460c      	mov	r4, r1
 8006844:	469a      	mov	sl, r3
 8006846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800684a:	d807      	bhi.n	800685c <_printf_i+0x28>
 800684c:	2f62      	cmp	r7, #98	@ 0x62
 800684e:	d80a      	bhi.n	8006866 <_printf_i+0x32>
 8006850:	2f00      	cmp	r7, #0
 8006852:	f000 80d2 	beq.w	80069fa <_printf_i+0x1c6>
 8006856:	2f58      	cmp	r7, #88	@ 0x58
 8006858:	f000 80b9 	beq.w	80069ce <_printf_i+0x19a>
 800685c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006864:	e03a      	b.n	80068dc <_printf_i+0xa8>
 8006866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800686a:	2b15      	cmp	r3, #21
 800686c:	d8f6      	bhi.n	800685c <_printf_i+0x28>
 800686e:	a101      	add	r1, pc, #4	@ (adr r1, 8006874 <_printf_i+0x40>)
 8006870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006874:	080068cd 	.word	0x080068cd
 8006878:	080068e1 	.word	0x080068e1
 800687c:	0800685d 	.word	0x0800685d
 8006880:	0800685d 	.word	0x0800685d
 8006884:	0800685d 	.word	0x0800685d
 8006888:	0800685d 	.word	0x0800685d
 800688c:	080068e1 	.word	0x080068e1
 8006890:	0800685d 	.word	0x0800685d
 8006894:	0800685d 	.word	0x0800685d
 8006898:	0800685d 	.word	0x0800685d
 800689c:	0800685d 	.word	0x0800685d
 80068a0:	080069e1 	.word	0x080069e1
 80068a4:	0800690b 	.word	0x0800690b
 80068a8:	0800699b 	.word	0x0800699b
 80068ac:	0800685d 	.word	0x0800685d
 80068b0:	0800685d 	.word	0x0800685d
 80068b4:	08006a03 	.word	0x08006a03
 80068b8:	0800685d 	.word	0x0800685d
 80068bc:	0800690b 	.word	0x0800690b
 80068c0:	0800685d 	.word	0x0800685d
 80068c4:	0800685d 	.word	0x0800685d
 80068c8:	080069a3 	.word	0x080069a3
 80068cc:	6833      	ldr	r3, [r6, #0]
 80068ce:	1d1a      	adds	r2, r3, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6032      	str	r2, [r6, #0]
 80068d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068dc:	2301      	movs	r3, #1
 80068de:	e09d      	b.n	8006a1c <_printf_i+0x1e8>
 80068e0:	6833      	ldr	r3, [r6, #0]
 80068e2:	6820      	ldr	r0, [r4, #0]
 80068e4:	1d19      	adds	r1, r3, #4
 80068e6:	6031      	str	r1, [r6, #0]
 80068e8:	0606      	lsls	r6, r0, #24
 80068ea:	d501      	bpl.n	80068f0 <_printf_i+0xbc>
 80068ec:	681d      	ldr	r5, [r3, #0]
 80068ee:	e003      	b.n	80068f8 <_printf_i+0xc4>
 80068f0:	0645      	lsls	r5, r0, #25
 80068f2:	d5fb      	bpl.n	80068ec <_printf_i+0xb8>
 80068f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	da03      	bge.n	8006904 <_printf_i+0xd0>
 80068fc:	232d      	movs	r3, #45	@ 0x2d
 80068fe:	426d      	negs	r5, r5
 8006900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006904:	4859      	ldr	r0, [pc, #356]	@ (8006a6c <_printf_i+0x238>)
 8006906:	230a      	movs	r3, #10
 8006908:	e011      	b.n	800692e <_printf_i+0xfa>
 800690a:	6821      	ldr	r1, [r4, #0]
 800690c:	6833      	ldr	r3, [r6, #0]
 800690e:	0608      	lsls	r0, r1, #24
 8006910:	f853 5b04 	ldr.w	r5, [r3], #4
 8006914:	d402      	bmi.n	800691c <_printf_i+0xe8>
 8006916:	0649      	lsls	r1, r1, #25
 8006918:	bf48      	it	mi
 800691a:	b2ad      	uxthmi	r5, r5
 800691c:	2f6f      	cmp	r7, #111	@ 0x6f
 800691e:	4853      	ldr	r0, [pc, #332]	@ (8006a6c <_printf_i+0x238>)
 8006920:	6033      	str	r3, [r6, #0]
 8006922:	bf14      	ite	ne
 8006924:	230a      	movne	r3, #10
 8006926:	2308      	moveq	r3, #8
 8006928:	2100      	movs	r1, #0
 800692a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800692e:	6866      	ldr	r6, [r4, #4]
 8006930:	60a6      	str	r6, [r4, #8]
 8006932:	2e00      	cmp	r6, #0
 8006934:	bfa2      	ittt	ge
 8006936:	6821      	ldrge	r1, [r4, #0]
 8006938:	f021 0104 	bicge.w	r1, r1, #4
 800693c:	6021      	strge	r1, [r4, #0]
 800693e:	b90d      	cbnz	r5, 8006944 <_printf_i+0x110>
 8006940:	2e00      	cmp	r6, #0
 8006942:	d04b      	beq.n	80069dc <_printf_i+0x1a8>
 8006944:	4616      	mov	r6, r2
 8006946:	fbb5 f1f3 	udiv	r1, r5, r3
 800694a:	fb03 5711 	mls	r7, r3, r1, r5
 800694e:	5dc7      	ldrb	r7, [r0, r7]
 8006950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006954:	462f      	mov	r7, r5
 8006956:	42bb      	cmp	r3, r7
 8006958:	460d      	mov	r5, r1
 800695a:	d9f4      	bls.n	8006946 <_printf_i+0x112>
 800695c:	2b08      	cmp	r3, #8
 800695e:	d10b      	bne.n	8006978 <_printf_i+0x144>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	07df      	lsls	r7, r3, #31
 8006964:	d508      	bpl.n	8006978 <_printf_i+0x144>
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6861      	ldr	r1, [r4, #4]
 800696a:	4299      	cmp	r1, r3
 800696c:	bfde      	ittt	le
 800696e:	2330      	movle	r3, #48	@ 0x30
 8006970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006974:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006978:	1b92      	subs	r2, r2, r6
 800697a:	6122      	str	r2, [r4, #16]
 800697c:	f8cd a000 	str.w	sl, [sp]
 8006980:	464b      	mov	r3, r9
 8006982:	aa03      	add	r2, sp, #12
 8006984:	4621      	mov	r1, r4
 8006986:	4640      	mov	r0, r8
 8006988:	f7ff fee6 	bl	8006758 <_printf_common>
 800698c:	3001      	adds	r0, #1
 800698e:	d14a      	bne.n	8006a26 <_printf_i+0x1f2>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	b004      	add	sp, #16
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	f043 0320 	orr.w	r3, r3, #32
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	4833      	ldr	r0, [pc, #204]	@ (8006a70 <_printf_i+0x23c>)
 80069a4:	2778      	movs	r7, #120	@ 0x78
 80069a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	6831      	ldr	r1, [r6, #0]
 80069ae:	061f      	lsls	r7, r3, #24
 80069b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80069b4:	d402      	bmi.n	80069bc <_printf_i+0x188>
 80069b6:	065f      	lsls	r7, r3, #25
 80069b8:	bf48      	it	mi
 80069ba:	b2ad      	uxthmi	r5, r5
 80069bc:	6031      	str	r1, [r6, #0]
 80069be:	07d9      	lsls	r1, r3, #31
 80069c0:	bf44      	itt	mi
 80069c2:	f043 0320 	orrmi.w	r3, r3, #32
 80069c6:	6023      	strmi	r3, [r4, #0]
 80069c8:	b11d      	cbz	r5, 80069d2 <_printf_i+0x19e>
 80069ca:	2310      	movs	r3, #16
 80069cc:	e7ac      	b.n	8006928 <_printf_i+0xf4>
 80069ce:	4827      	ldr	r0, [pc, #156]	@ (8006a6c <_printf_i+0x238>)
 80069d0:	e7e9      	b.n	80069a6 <_printf_i+0x172>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f023 0320 	bic.w	r3, r3, #32
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	e7f6      	b.n	80069ca <_printf_i+0x196>
 80069dc:	4616      	mov	r6, r2
 80069de:	e7bd      	b.n	800695c <_printf_i+0x128>
 80069e0:	6833      	ldr	r3, [r6, #0]
 80069e2:	6825      	ldr	r5, [r4, #0]
 80069e4:	6961      	ldr	r1, [r4, #20]
 80069e6:	1d18      	adds	r0, r3, #4
 80069e8:	6030      	str	r0, [r6, #0]
 80069ea:	062e      	lsls	r6, r5, #24
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	d501      	bpl.n	80069f4 <_printf_i+0x1c0>
 80069f0:	6019      	str	r1, [r3, #0]
 80069f2:	e002      	b.n	80069fa <_printf_i+0x1c6>
 80069f4:	0668      	lsls	r0, r5, #25
 80069f6:	d5fb      	bpl.n	80069f0 <_printf_i+0x1bc>
 80069f8:	8019      	strh	r1, [r3, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	4616      	mov	r6, r2
 8006a00:	e7bc      	b.n	800697c <_printf_i+0x148>
 8006a02:	6833      	ldr	r3, [r6, #0]
 8006a04:	1d1a      	adds	r2, r3, #4
 8006a06:	6032      	str	r2, [r6, #0]
 8006a08:	681e      	ldr	r6, [r3, #0]
 8006a0a:	6862      	ldr	r2, [r4, #4]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7f9 fbe6 	bl	80001e0 <memchr>
 8006a14:	b108      	cbz	r0, 8006a1a <_printf_i+0x1e6>
 8006a16:	1b80      	subs	r0, r0, r6
 8006a18:	6060      	str	r0, [r4, #4]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a24:	e7aa      	b.n	800697c <_printf_i+0x148>
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	4632      	mov	r2, r6
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	47d0      	blx	sl
 8006a30:	3001      	adds	r0, #1
 8006a32:	d0ad      	beq.n	8006990 <_printf_i+0x15c>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	079b      	lsls	r3, r3, #30
 8006a38:	d413      	bmi.n	8006a62 <_printf_i+0x22e>
 8006a3a:	68e0      	ldr	r0, [r4, #12]
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	4298      	cmp	r0, r3
 8006a40:	bfb8      	it	lt
 8006a42:	4618      	movlt	r0, r3
 8006a44:	e7a6      	b.n	8006994 <_printf_i+0x160>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	47d0      	blx	sl
 8006a50:	3001      	adds	r0, #1
 8006a52:	d09d      	beq.n	8006990 <_printf_i+0x15c>
 8006a54:	3501      	adds	r5, #1
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	9903      	ldr	r1, [sp, #12]
 8006a5a:	1a5b      	subs	r3, r3, r1
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dcf2      	bgt.n	8006a46 <_printf_i+0x212>
 8006a60:	e7eb      	b.n	8006a3a <_printf_i+0x206>
 8006a62:	2500      	movs	r5, #0
 8006a64:	f104 0619 	add.w	r6, r4, #25
 8006a68:	e7f5      	b.n	8006a56 <_printf_i+0x222>
 8006a6a:	bf00      	nop
 8006a6c:	080071a5 	.word	0x080071a5
 8006a70:	080071b6 	.word	0x080071b6

08006a74 <__sflush_r>:
 8006a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	0716      	lsls	r6, r2, #28
 8006a7e:	4605      	mov	r5, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	d454      	bmi.n	8006b2e <__sflush_r+0xba>
 8006a84:	684b      	ldr	r3, [r1, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	dc02      	bgt.n	8006a90 <__sflush_r+0x1c>
 8006a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dd48      	ble.n	8006b22 <__sflush_r+0xae>
 8006a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a92:	2e00      	cmp	r6, #0
 8006a94:	d045      	beq.n	8006b22 <__sflush_r+0xae>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a9c:	682f      	ldr	r7, [r5, #0]
 8006a9e:	6a21      	ldr	r1, [r4, #32]
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	d030      	beq.n	8006b06 <__sflush_r+0x92>
 8006aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	0759      	lsls	r1, r3, #29
 8006aaa:	d505      	bpl.n	8006ab8 <__sflush_r+0x44>
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	1ad2      	subs	r2, r2, r3
 8006ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ab2:	b10b      	cbz	r3, 8006ab8 <__sflush_r+0x44>
 8006ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ab6:	1ad2      	subs	r2, r2, r3
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006abc:	6a21      	ldr	r1, [r4, #32]
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b0      	blx	r6
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	d106      	bne.n	8006ad6 <__sflush_r+0x62>
 8006ac8:	6829      	ldr	r1, [r5, #0]
 8006aca:	291d      	cmp	r1, #29
 8006acc:	d82b      	bhi.n	8006b26 <__sflush_r+0xb2>
 8006ace:	4a2a      	ldr	r2, [pc, #168]	@ (8006b78 <__sflush_r+0x104>)
 8006ad0:	410a      	asrs	r2, r1
 8006ad2:	07d6      	lsls	r6, r2, #31
 8006ad4:	d427      	bmi.n	8006b26 <__sflush_r+0xb2>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	6062      	str	r2, [r4, #4]
 8006ada:	04d9      	lsls	r1, r3, #19
 8006adc:	6922      	ldr	r2, [r4, #16]
 8006ade:	6022      	str	r2, [r4, #0]
 8006ae0:	d504      	bpl.n	8006aec <__sflush_r+0x78>
 8006ae2:	1c42      	adds	r2, r0, #1
 8006ae4:	d101      	bne.n	8006aea <__sflush_r+0x76>
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	b903      	cbnz	r3, 8006aec <__sflush_r+0x78>
 8006aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8006aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aee:	602f      	str	r7, [r5, #0]
 8006af0:	b1b9      	cbz	r1, 8006b22 <__sflush_r+0xae>
 8006af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006af6:	4299      	cmp	r1, r3
 8006af8:	d002      	beq.n	8006b00 <__sflush_r+0x8c>
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7ff fbf2 	bl	80062e4 <_free_r>
 8006b00:	2300      	movs	r3, #0
 8006b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b04:	e00d      	b.n	8006b22 <__sflush_r+0xae>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b0      	blx	r6
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	1c50      	adds	r0, r2, #1
 8006b10:	d1c9      	bne.n	8006aa6 <__sflush_r+0x32>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0c6      	beq.n	8006aa6 <__sflush_r+0x32>
 8006b18:	2b1d      	cmp	r3, #29
 8006b1a:	d001      	beq.n	8006b20 <__sflush_r+0xac>
 8006b1c:	2b16      	cmp	r3, #22
 8006b1e:	d11e      	bne.n	8006b5e <__sflush_r+0xea>
 8006b20:	602f      	str	r7, [r5, #0]
 8006b22:	2000      	movs	r0, #0
 8006b24:	e022      	b.n	8006b6c <__sflush_r+0xf8>
 8006b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	e01b      	b.n	8006b66 <__sflush_r+0xf2>
 8006b2e:	690f      	ldr	r7, [r1, #16]
 8006b30:	2f00      	cmp	r7, #0
 8006b32:	d0f6      	beq.n	8006b22 <__sflush_r+0xae>
 8006b34:	0793      	lsls	r3, r2, #30
 8006b36:	680e      	ldr	r6, [r1, #0]
 8006b38:	bf08      	it	eq
 8006b3a:	694b      	ldreq	r3, [r1, #20]
 8006b3c:	600f      	str	r7, [r1, #0]
 8006b3e:	bf18      	it	ne
 8006b40:	2300      	movne	r3, #0
 8006b42:	eba6 0807 	sub.w	r8, r6, r7
 8006b46:	608b      	str	r3, [r1, #8]
 8006b48:	f1b8 0f00 	cmp.w	r8, #0
 8006b4c:	dde9      	ble.n	8006b22 <__sflush_r+0xae>
 8006b4e:	6a21      	ldr	r1, [r4, #32]
 8006b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b52:	4643      	mov	r3, r8
 8006b54:	463a      	mov	r2, r7
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b0      	blx	r6
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dc08      	bgt.n	8006b70 <__sflush_r+0xfc>
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	4407      	add	r7, r0
 8006b72:	eba8 0800 	sub.w	r8, r8, r0
 8006b76:	e7e7      	b.n	8006b48 <__sflush_r+0xd4>
 8006b78:	dfbffffe 	.word	0xdfbffffe

08006b7c <_fflush_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	690b      	ldr	r3, [r1, #16]
 8006b80:	4605      	mov	r5, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	b913      	cbnz	r3, 8006b8c <_fflush_r+0x10>
 8006b86:	2500      	movs	r5, #0
 8006b88:	4628      	mov	r0, r5
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	b118      	cbz	r0, 8006b96 <_fflush_r+0x1a>
 8006b8e:	6a03      	ldr	r3, [r0, #32]
 8006b90:	b90b      	cbnz	r3, 8006b96 <_fflush_r+0x1a>
 8006b92:	f7ff fa91 	bl	80060b8 <__sinit>
 8006b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f3      	beq.n	8006b86 <_fflush_r+0xa>
 8006b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ba0:	07d0      	lsls	r0, r2, #31
 8006ba2:	d404      	bmi.n	8006bae <_fflush_r+0x32>
 8006ba4:	0599      	lsls	r1, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_fflush_r+0x32>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006baa:	f7ff fb8a 	bl	80062c2 <__retarget_lock_acquire_recursive>
 8006bae:	4628      	mov	r0, r5
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	f7ff ff5f 	bl	8006a74 <__sflush_r>
 8006bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bb8:	07da      	lsls	r2, r3, #31
 8006bba:	4605      	mov	r5, r0
 8006bbc:	d4e4      	bmi.n	8006b88 <_fflush_r+0xc>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	059b      	lsls	r3, r3, #22
 8006bc2:	d4e1      	bmi.n	8006b88 <_fflush_r+0xc>
 8006bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bc6:	f7ff fb7d 	bl	80062c4 <__retarget_lock_release_recursive>
 8006bca:	e7dd      	b.n	8006b88 <_fflush_r+0xc>

08006bcc <__swbuf_r>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	460e      	mov	r6, r1
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	b118      	cbz	r0, 8006bde <__swbuf_r+0x12>
 8006bd6:	6a03      	ldr	r3, [r0, #32]
 8006bd8:	b90b      	cbnz	r3, 8006bde <__swbuf_r+0x12>
 8006bda:	f7ff fa6d 	bl	80060b8 <__sinit>
 8006bde:	69a3      	ldr	r3, [r4, #24]
 8006be0:	60a3      	str	r3, [r4, #8]
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	071a      	lsls	r2, r3, #28
 8006be6:	d501      	bpl.n	8006bec <__swbuf_r+0x20>
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	b943      	cbnz	r3, 8006bfe <__swbuf_r+0x32>
 8006bec:	4621      	mov	r1, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 f82a 	bl	8006c48 <__swsetup_r>
 8006bf4:	b118      	cbz	r0, 8006bfe <__swbuf_r+0x32>
 8006bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	6922      	ldr	r2, [r4, #16]
 8006c02:	1a98      	subs	r0, r3, r2
 8006c04:	6963      	ldr	r3, [r4, #20]
 8006c06:	b2f6      	uxtb	r6, r6
 8006c08:	4283      	cmp	r3, r0
 8006c0a:	4637      	mov	r7, r6
 8006c0c:	dc05      	bgt.n	8006c1a <__swbuf_r+0x4e>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f7ff ffb3 	bl	8006b7c <_fflush_r>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d1ed      	bne.n	8006bf6 <__swbuf_r+0x2a>
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	60a3      	str	r3, [r4, #8]
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	701e      	strb	r6, [r3, #0]
 8006c28:	6962      	ldr	r2, [r4, #20]
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d004      	beq.n	8006c3a <__swbuf_r+0x6e>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d5e1      	bpl.n	8006bfa <__swbuf_r+0x2e>
 8006c36:	2e0a      	cmp	r6, #10
 8006c38:	d1df      	bne.n	8006bfa <__swbuf_r+0x2e>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f7ff ff9d 	bl	8006b7c <_fflush_r>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0d9      	beq.n	8006bfa <__swbuf_r+0x2e>
 8006c46:	e7d6      	b.n	8006bf6 <__swbuf_r+0x2a>

08006c48 <__swsetup_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4b29      	ldr	r3, [pc, #164]	@ (8006cf0 <__swsetup_r+0xa8>)
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	460c      	mov	r4, r1
 8006c52:	b118      	cbz	r0, 8006c5c <__swsetup_r+0x14>
 8006c54:	6a03      	ldr	r3, [r0, #32]
 8006c56:	b90b      	cbnz	r3, 8006c5c <__swsetup_r+0x14>
 8006c58:	f7ff fa2e 	bl	80060b8 <__sinit>
 8006c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c60:	0719      	lsls	r1, r3, #28
 8006c62:	d422      	bmi.n	8006caa <__swsetup_r+0x62>
 8006c64:	06da      	lsls	r2, r3, #27
 8006c66:	d407      	bmi.n	8006c78 <__swsetup_r+0x30>
 8006c68:	2209      	movs	r2, #9
 8006c6a:	602a      	str	r2, [r5, #0]
 8006c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	f04f 30ff 	mov.w	r0, #4294967295
 8006c76:	e033      	b.n	8006ce0 <__swsetup_r+0x98>
 8006c78:	0758      	lsls	r0, r3, #29
 8006c7a:	d512      	bpl.n	8006ca2 <__swsetup_r+0x5a>
 8006c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c7e:	b141      	cbz	r1, 8006c92 <__swsetup_r+0x4a>
 8006c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c84:	4299      	cmp	r1, r3
 8006c86:	d002      	beq.n	8006c8e <__swsetup_r+0x46>
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f7ff fb2b 	bl	80062e4 <_free_r>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f043 0308 	orr.w	r3, r3, #8
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	b94b      	cbnz	r3, 8006cc2 <__swsetup_r+0x7a>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb8:	d003      	beq.n	8006cc2 <__swsetup_r+0x7a>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f84f 	bl	8006d60 <__smakebuf_r>
 8006cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc6:	f013 0201 	ands.w	r2, r3, #1
 8006cca:	d00a      	beq.n	8006ce2 <__swsetup_r+0x9a>
 8006ccc:	2200      	movs	r2, #0
 8006cce:	60a2      	str	r2, [r4, #8]
 8006cd0:	6962      	ldr	r2, [r4, #20]
 8006cd2:	4252      	negs	r2, r2
 8006cd4:	61a2      	str	r2, [r4, #24]
 8006cd6:	6922      	ldr	r2, [r4, #16]
 8006cd8:	b942      	cbnz	r2, 8006cec <__swsetup_r+0xa4>
 8006cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cde:	d1c5      	bne.n	8006c6c <__swsetup_r+0x24>
 8006ce0:	bd38      	pop	{r3, r4, r5, pc}
 8006ce2:	0799      	lsls	r1, r3, #30
 8006ce4:	bf58      	it	pl
 8006ce6:	6962      	ldrpl	r2, [r4, #20]
 8006ce8:	60a2      	str	r2, [r4, #8]
 8006cea:	e7f4      	b.n	8006cd6 <__swsetup_r+0x8e>
 8006cec:	2000      	movs	r0, #0
 8006cee:	e7f7      	b.n	8006ce0 <__swsetup_r+0x98>
 8006cf0:	20000030 	.word	0x20000030

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d06      	ldr	r5, [pc, #24]	@ (8006d10 <_sbrk_r+0x1c>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	f7fb f81a 	bl	8001d38 <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_sbrk_r+0x1a>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_sbrk_r+0x1a>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000ef8 	.word	0x20000ef8

08006d14 <__swhatbuf_r>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	460c      	mov	r4, r1
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	b096      	sub	sp, #88	@ 0x58
 8006d20:	4615      	mov	r5, r2
 8006d22:	461e      	mov	r6, r3
 8006d24:	da0d      	bge.n	8006d42 <__swhatbuf_r+0x2e>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d2c:	f04f 0100 	mov.w	r1, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2340      	movne	r3, #64	@ 0x40
 8006d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d38:	2000      	movs	r0, #0
 8006d3a:	6031      	str	r1, [r6, #0]
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	b016      	add	sp, #88	@ 0x58
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
 8006d42:	466a      	mov	r2, sp
 8006d44:	f000 f848 	bl	8006dd8 <_fstat_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	dbec      	blt.n	8006d26 <__swhatbuf_r+0x12>
 8006d4c:	9901      	ldr	r1, [sp, #4]
 8006d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d56:	4259      	negs	r1, r3
 8006d58:	4159      	adcs	r1, r3
 8006d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d5e:	e7eb      	b.n	8006d38 <__swhatbuf_r+0x24>

08006d60 <__smakebuf_r>:
 8006d60:	898b      	ldrh	r3, [r1, #12]
 8006d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d64:	079d      	lsls	r5, r3, #30
 8006d66:	4606      	mov	r6, r0
 8006d68:	460c      	mov	r4, r1
 8006d6a:	d507      	bpl.n	8006d7c <__smakebuf_r+0x1c>
 8006d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	2301      	movs	r3, #1
 8006d76:	6163      	str	r3, [r4, #20]
 8006d78:	b003      	add	sp, #12
 8006d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7c:	ab01      	add	r3, sp, #4
 8006d7e:	466a      	mov	r2, sp
 8006d80:	f7ff ffc8 	bl	8006d14 <__swhatbuf_r>
 8006d84:	9f00      	ldr	r7, [sp, #0]
 8006d86:	4605      	mov	r5, r0
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff fb16 	bl	80063bc <_malloc_r>
 8006d90:	b948      	cbnz	r0, 8006da6 <__smakebuf_r+0x46>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	059a      	lsls	r2, r3, #22
 8006d98:	d4ee      	bmi.n	8006d78 <__smakebuf_r+0x18>
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	f043 0302 	orr.w	r3, r3, #2
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	e7e2      	b.n	8006d6c <__smakebuf_r+0xc>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	6020      	str	r0, [r4, #0]
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006db6:	b15b      	cbz	r3, 8006dd0 <__smakebuf_r+0x70>
 8006db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f000 f81d 	bl	8006dfc <_isatty_r>
 8006dc2:	b128      	cbz	r0, 8006dd0 <__smakebuf_r+0x70>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	431d      	orrs	r5, r3
 8006dd4:	81a5      	strh	r5, [r4, #12]
 8006dd6:	e7cf      	b.n	8006d78 <__smakebuf_r+0x18>

08006dd8 <_fstat_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	@ (8006df8 <_fstat_r+0x20>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	f7fa ff7e 	bl	8001ce6 <_fstat>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d102      	bne.n	8006df4 <_fstat_r+0x1c>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	b103      	cbz	r3, 8006df4 <_fstat_r+0x1c>
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	20000ef8 	.word	0x20000ef8

08006dfc <_isatty_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d06      	ldr	r5, [pc, #24]	@ (8006e18 <_isatty_r+0x1c>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7fa ff7d 	bl	8001d06 <_isatty>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_isatty_r+0x1a>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_isatty_r+0x1a>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	20000ef8 	.word	0x20000ef8

08006e1c <_init>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr

08006e28 <_fini>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr
