
DMA_Memory_to_Memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001f84  08001f84  00002f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f9c  08001f9c  00003010  2**0
                  CONTENTS
  4 .ARM          00000008  08001f9c  08001f9c  00002f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fa4  08001fa4  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa4  08001fa4  00002fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fa8  08001fa8  00002fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001fac  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08001fbc  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001fbc  00003094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000461f  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ba  00000000  00000000  0000765f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00008820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000367  00000000  00000000  00008cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014549  00000000  00000000  00009037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005dc0  00000000  00000000  0001d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fa1e  00000000  00000000  00023340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001140  00000000  00000000  000a2da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000a3ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001f6c 	.word	0x08001f6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08001f6c 	.word	0x08001f6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9ee 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8e8 	bl	80006a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f892 	bl	8000600 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  hdma_memtomem_dma2_stream0.XferCpltCallback = DmaXferCompleteCallback;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <main+0x54>)
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <main+0x58>)
 80004e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&Source, (uint32_t)&Dest, sizeof(Source));
 80004e2:	4910      	ldr	r1, [pc, #64]	@ (8000524 <main+0x5c>)
 80004e4:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <main+0x60>)
 80004e6:	2301      	movs	r3, #1
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <main+0x54>)
 80004ea:	f000 fc35 	bl	8000d58 <HAL_DMA_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Source++;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000524 <main+0x5c>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <main+0x5c>)
 80004f8:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fe:	480b      	ldr	r0, [pc, #44]	@ (800052c <main+0x64>)
 8000500:	f001 f889 	bl	8001616 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000504:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000508:	f000 fa42 	bl	8000990 <HAL_Delay>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&Source, (uint32_t)&Dest, sizeof(Source));
 800050c:	4905      	ldr	r1, [pc, #20]	@ (8000524 <main+0x5c>)
 800050e:	4a06      	ldr	r2, [pc, #24]	@ (8000528 <main+0x60>)
 8000510:	2301      	movs	r3, #1
 8000512:	4802      	ldr	r0, [pc, #8]	@ (800051c <main+0x54>)
 8000514:	f000 fc20 	bl	8000d58 <HAL_DMA_Start_IT>
	  Source++;
 8000518:	bf00      	nop
 800051a:	e7e8      	b.n	80004ee <main+0x26>
 800051c:	2000002c 	.word	0x2000002c
 8000520:	0800074d 	.word	0x0800074d
 8000524:	20000000 	.word	0x20000000
 8000528:	2000008c 	.word	0x2000008c
 800052c:	40020c00 	.word	0x40020c00

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fce8 	bl	8001f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	@ (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f849 	bl	800164c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f8cf 	bl	8000762 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2103      	movs	r1, #3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 faab 	bl	8001b3c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 f8b9 	bl	8000762 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <MX_DMA_Init+0x9c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a23      	ldr	r2, [pc, #140]	@ (800069c <MX_DMA_Init+0x9c>)
 8000610:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_DMA_Init+0x9c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000624:	4a1f      	ldr	r2, [pc, #124]	@ (80006a4 <MX_DMA_Init+0xa4>)
 8000626:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_DMA_Init+0xa0>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800063a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_DMA_Init+0xa0>)
 800063e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000642:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_DMA_Init+0xa0>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_DMA_Init+0xa0>)
 800065e:	2204      	movs	r2, #4
 8000660:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000664:	2203      	movs	r2, #3
 8000666:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_DMA_Init+0xa0>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <MX_DMA_Init+0xa0>)
 8000676:	f000 fac1 	bl	8000bfc <HAL_DMA_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 8000680:	f000 f86f 	bl	8000762 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2038      	movs	r0, #56	@ 0x38
 800068a:	f000 fa80 	bl	8000b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800068e:	2038      	movs	r0, #56	@ 0x38
 8000690:	f000 fa99 	bl	8000bc6 <HAL_NVIC_EnableIRQ>

}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	40026410 	.word	0x40026410

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <MX_GPIO_Init+0x9c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <MX_GPIO_Init+0xa0>)
 800071a:	f000 ff63 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_GPIO_Init+0xa0>)
 8000738:	f000 fdd0 	bl	80012dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020c00 	.word	0x40020c00

0800074c <DmaXferCompleteCallback>:

/* USER CODE BEGIN 4 */
void DmaXferCompleteCallback(DMA_HandleTypeDef *hdma)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  //Code will reach here if the Transfer completes
  __NOP();
 8000754:	bf00      	nop
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000766:	b672      	cpsid	i
}
 8000768:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f89b 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <DMA2_Stream0_IRQHandler+0x10>)
 8000826:	f000 faef 	bl	8000e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000002c 	.word	0x2000002c

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 fb4d 	bl	8001f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088a:	f7ff fe1d 	bl	80004c8 <main>
  bx  lr    
 800088e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800089c:	08001fac 	.word	0x08001fac
  ldr r2, =_sbss
 80008a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008a4:	20000094 	.word	0x20000094

080008a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_Init+0x40>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <HAL_Init+0x40>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_Init+0x40>)
 80008c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_Init+0x40>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f94f 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff ff46 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023c00 	.word	0x40023c00

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f967 	bl	8000be2 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f92f 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000004 	.word	0x20000004
 8000948:	2000000c 	.word	0x2000000c
 800094c:	20000008 	.word	0x20000008

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000000c 	.word	0x2000000c
 8000974:	20000090 	.word	0x20000090

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000090 	.word	0x20000090

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_Delay+0x44>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffde 	bl	8000978 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000000c 	.word	0x2000000c

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	60d3      	str	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4907      	ldr	r1, [pc, #28]	@ (8000a74 <__NVIC_EnableIRQ+0x38>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	@ (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	@ (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	@ 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff8e 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff29 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff3e 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff8e 	bl	8000acc <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff31 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffa2 	bl	8000b34 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff feb6 	bl	8000978 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e099      	b.n	8000d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0201 	bic.w	r2, r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c38:	e00f      	b.n	8000c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c3a:	f7ff fe9d 	bl	8000978 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d908      	bls.n	8000c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e078      	b.n	8000d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e8      	bne.n	8000c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <HAL_DMA_Init+0x158>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d107      	bne.n	8000cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f023 0307 	bic.w	r3, r3, #7
 8000cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d117      	bne.n	8000d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00e      	beq.n	8000d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 fa6f 	bl	80011e4 <DMA_CheckFifoParam>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2240      	movs	r2, #64	@ 0x40
 8000d10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e016      	b.n	8000d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 fa26 	bl	8001178 <DMA_CalcBaseAndBitshift>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d34:	223f      	movs	r2, #63	@ 0x3f
 8000d36:	409a      	lsls	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	f010803f 	.word	0xf010803f

08000d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d101      	bne.n	8000d7e <HAL_DMA_Start_IT+0x26>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e040      	b.n	8000e00 <HAL_DMA_Start_IT+0xa8>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d12f      	bne.n	8000df2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2202      	movs	r2, #2
 8000d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f9b8 	bl	800111c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000db0:	223f      	movs	r2, #63	@ 0x3f
 8000db2:	409a      	lsls	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0216 	orr.w	r2, r2, #22
 8000dc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d007      	beq.n	8000de0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0208 	orr.w	r2, r2, #8
 8000dde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e005      	b.n	8000dfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e14:	4b8e      	ldr	r3, [pc, #568]	@ (8001050 <HAL_DMA_IRQHandler+0x248>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a8e      	ldr	r2, [pc, #568]	@ (8001054 <HAL_DMA_IRQHandler+0x24c>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	0a9b      	lsrs	r3, r3, #10
 8000e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e32:	2208      	movs	r2, #8
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d01a      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e60:	2208      	movs	r2, #8
 8000e62:	409a      	lsls	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e78:	2201      	movs	r2, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d012      	beq.n	8000eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e96:	2201      	movs	r2, #1
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ea2:	f043 0202 	orr.w	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eae:	2204      	movs	r2, #4
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d012      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ecc:	2204      	movs	r2, #4
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed8:	f043 0204 	orr.w	r2, r3, #4
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d043      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d03c      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f02:	2210      	movs	r2, #16
 8000f04:	409a      	lsls	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d018      	beq.n	8000f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d024      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	4798      	blx	r3
 8000f36:	e01f      	b.n	8000f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d01b      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	4798      	blx	r3
 8000f48:	e016      	b.n	8000f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0208 	bic.w	r2, r2, #8
 8000f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 808f 	beq.w	80010a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 8087 	beq.w	80010a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d136      	bne.n	8001020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0216 	bic.w	r2, r2, #22
 8000fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <HAL_DMA_IRQHandler+0x1da>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0208 	bic.w	r2, r2, #8
 8000ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff6:	223f      	movs	r2, #63	@ 0x3f
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001012:	2b00      	cmp	r3, #0
 8001014:	d07e      	beq.n	8001114 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
        }
        return;
 800101e:	e079      	b.n	8001114 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01d      	beq.n	800106a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10d      	bne.n	8001058 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001040:	2b00      	cmp	r3, #0
 8001042:	d031      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
 800104c:	e02c      	b.n	80010a8 <HAL_DMA_IRQHandler+0x2a0>
 800104e:	bf00      	nop
 8001050:	20000004 	.word	0x20000004
 8001054:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105c:	2b00      	cmp	r3, #0
 800105e:	d023      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	4798      	blx	r3
 8001068:	e01e      	b.n	80010a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10f      	bne.n	8001098 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0210 	bic.w	r2, r2, #16
 8001086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d032      	beq.n	8001116 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d022      	beq.n	8001102 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2205      	movs	r2, #5
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d307      	bcc.n	80010f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f2      	bne.n	80010d4 <HAL_DMA_IRQHandler+0x2cc>
 80010ee:	e000      	b.n	80010f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80010f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	4798      	blx	r3
 8001112:	e000      	b.n	8001116 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001114:	bf00      	nop
    }
  }
}
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b40      	cmp	r3, #64	@ 0x40
 8001148:	d108      	bne.n	800115c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800115a:	e007      	b.n	800116c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	60da      	str	r2, [r3, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3b10      	subs	r3, #16
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <DMA_CalcBaseAndBitshift+0x64>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d909      	bls.n	80011ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	1d1a      	adds	r2, r3, #4
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80011b8:	e007      	b.n	80011ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80011c2:	f023 0303 	bic.w	r3, r3, #3
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	aaaaaaab 	.word	0xaaaaaaab
 80011e0:	08001f94 	.word	0x08001f94

080011e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d11f      	bne.n	800123e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d856      	bhi.n	80012b2 <DMA_CheckFifoParam+0xce>
 8001204:	a201      	add	r2, pc, #4	@ (adr r2, 800120c <DMA_CheckFifoParam+0x28>)
 8001206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120a:	bf00      	nop
 800120c:	0800121d 	.word	0x0800121d
 8001210:	0800122f 	.word	0x0800122f
 8001214:	0800121d 	.word	0x0800121d
 8001218:	080012b3 	.word	0x080012b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d046      	beq.n	80012b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800122c:	e043      	b.n	80012b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001232:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001236:	d140      	bne.n	80012ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800123c:	e03d      	b.n	80012ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001246:	d121      	bne.n	800128c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d837      	bhi.n	80012be <DMA_CheckFifoParam+0xda>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <DMA_CheckFifoParam+0x70>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	08001265 	.word	0x08001265
 8001258:	0800126b 	.word	0x0800126b
 800125c:	08001265 	.word	0x08001265
 8001260:	0800127d 	.word	0x0800127d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
      break;
 8001268:	e030      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d025      	beq.n	80012c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800127a:	e022      	b.n	80012c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001284:	d11f      	bne.n	80012c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800128a:	e01c      	b.n	80012c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d903      	bls.n	800129a <DMA_CheckFifoParam+0xb6>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d003      	beq.n	80012a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001298:	e018      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
      break;
 800129e:	e015      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00e      	beq.n	80012ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
      break;
 80012b0:	e00b      	b.n	80012ca <DMA_CheckFifoParam+0xe6>
      break;
 80012b2:	bf00      	nop
 80012b4:	e00a      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      break;
 80012b6:	bf00      	nop
 80012b8:	e008      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      break;
 80012ba:	bf00      	nop
 80012bc:	e006      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      break;
 80012be:	bf00      	nop
 80012c0:	e004      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      break;
 80012c2:	bf00      	nop
 80012c4:	e002      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      break;   
 80012c6:	bf00      	nop
 80012c8:	e000      	b.n	80012cc <DMA_CheckFifoParam+0xe8>
      break;
 80012ca:	bf00      	nop
    }
  } 
  
  return status; 
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e159      	b.n	80015ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	f040 8148 	bne.w	80015a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d005      	beq.n	800132e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	2b02      	cmp	r3, #2
 800132c:	d130      	bne.n	8001390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d017      	beq.n	80013cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a2 	beq.w	80015a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b57      	ldr	r3, [pc, #348]	@ (80015c4 <HAL_GPIO_Init+0x2e8>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a56      	ldr	r2, [pc, #344]	@ (80015c4 <HAL_GPIO_Init+0x2e8>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b54      	ldr	r3, [pc, #336]	@ (80015c4 <HAL_GPIO_Init+0x2e8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147e:	4a52      	ldr	r2, [pc, #328]	@ (80015c8 <HAL_GPIO_Init+0x2ec>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a49      	ldr	r2, [pc, #292]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x202>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a48      	ldr	r2, [pc, #288]	@ (80015d0 <HAL_GPIO_Init+0x2f4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x1fe>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a47      	ldr	r2, [pc, #284]	@ (80015d4 <HAL_GPIO_Init+0x2f8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a46      	ldr	r2, [pc, #280]	@ (80015d8 <HAL_GPIO_Init+0x2fc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x1f6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a45      	ldr	r2, [pc, #276]	@ (80015dc <HAL_GPIO_Init+0x300>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x1f2>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x204>
 80014de:	2300      	movs	r3, #0
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f002 0203 	and.w	r2, r2, #3
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	@ (80015c8 <HAL_GPIO_Init+0x2ec>)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001576:	4a1a      	ldr	r2, [pc, #104]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a0:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <HAL_GPIO_Init+0x304>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f67f aea2 	bls.w	80012f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001600:	e003      	b.n	800160a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43d9      	mvns	r1, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	400b      	ands	r3, r1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e267      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800166a:	4b88      	ldr	r3, [pc, #544]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d00c      	beq.n	8001690 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4b85      	ldr	r3, [pc, #532]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800167e:	2b08      	cmp	r3, #8
 8001680:	d112      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b82      	ldr	r3, [pc, #520]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b7e      	ldr	r3, [pc, #504]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05b      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d157      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e242      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x74>
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a75      	ldr	r2, [pc, #468]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b70      	ldr	r3, [pc, #448]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6f      	ldr	r2, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b6d      	ldr	r3, [pc, #436]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6c      	ldr	r2, [pc, #432]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016e4:	4b69      	ldr	r3, [pc, #420]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a68      	ldr	r2, [pc, #416]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b66      	ldr	r3, [pc, #408]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a65      	ldr	r2, [pc, #404]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f938 	bl	8000978 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff f934 	bl	8000978 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e207      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b5b      	ldr	r3, [pc, #364]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xc0>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff f924 	bl	8000978 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff f920 	bl	8000978 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	@ 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1f3      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b51      	ldr	r3, [pc, #324]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b44      	ldr	r3, [pc, #272]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1c7      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4937      	ldr	r1, [pc, #220]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <HAL_RCC_OscConfig+0x244>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff f8d9 	bl	8000978 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff f8d5 	bl	8000978 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1a8      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4925      	ldr	r1, [pc, #148]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_RCC_OscConfig+0x244>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff f8b8 	bl	8000978 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff f8b4 	bl	8000978 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e187      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d036      	beq.n	80018a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d016      	beq.n	800186c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_RCC_OscConfig+0x248>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f898 	bl	8000978 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff f894 	bl	8000978 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e167      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_RCC_OscConfig+0x240>)
 8001860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x200>
 800186a:	e01b      	b.n	80018a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x248>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f881 	bl	8000978 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e00e      	b.n	8001898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff f87d 	bl	8000978 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d907      	bls.n	8001898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e150      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	42470000 	.word	0x42470000
 8001894:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800189a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ea      	bne.n	800187a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8097 	beq.w	80019e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b81      	ldr	r3, [pc, #516]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b7d      	ldr	r3, [pc, #500]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a7c      	ldr	r2, [pc, #496]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b77      	ldr	r3, [pc, #476]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ee:	4b74      	ldr	r3, [pc, #464]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a73      	ldr	r2, [pc, #460]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f83d 	bl	8000978 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff f839 	bl	8000978 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e10c      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_OscConfig+0x474>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x2ea>
 8001928:	4b64      	ldr	r3, [pc, #400]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192c:	4a63      	ldr	r2, [pc, #396]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	@ 0x70
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x324>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x30c>
 800193e:	4b5f      	ldr	r3, [pc, #380]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001942:	4a5e      	ldr	r2, [pc, #376]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6713      	str	r3, [r2, #112]	@ 0x70
 800194a:	4b5c      	ldr	r3, [pc, #368]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	4a5b      	ldr	r2, [pc, #364]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6713      	str	r3, [r2, #112]	@ 0x70
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x324>
 8001958:	4b58      	ldr	r3, [pc, #352]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195c:	4a57      	ldr	r2, [pc, #348]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	@ 0x70
 8001964:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001968:	4a54      	ldr	r2, [pc, #336]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d015      	beq.n	80019a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7fe fffe 	bl	8000978 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7fe fffa 	bl	8000978 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0cb      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001996:	4b49      	ldr	r3, [pc, #292]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ee      	beq.n	8001980 <HAL_RCC_OscConfig+0x334>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7fe ffe8 	bl	8000978 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7fe ffe4 	bl	8000978 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0b5      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c2:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ee      	bne.n	80019ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	4a38      	ldr	r2, [pc, #224]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a1 	beq.w	8001b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ea:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d05c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d141      	bne.n	8001a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <HAL_RCC_OscConfig+0x478>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7fe ffb8 	bl	8000978 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7fe ffb4 	bl	8000978 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e087      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	491b      	ldr	r1, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x478>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe ff8d 	bl	8000978 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe ff89 	bl	8000978 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e05c      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x416>
 8001a80:	e054      	b.n	8001b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_RCC_OscConfig+0x478>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe ff76 	bl	8000978 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7fe ff72 	bl	8000978 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e045      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_RCC_OscConfig+0x470>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x444>
 8001aae:	e03d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e038      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d028      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d121      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d11a      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cc      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d90c      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a58      	ldr	r2, [pc, #352]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba8:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a52      	ldr	r2, [pc, #328]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b50      	ldr	r3, [pc, #320]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d044      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e067      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4934      	ldr	r1, [pc, #208]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7fe fea4 	bl	8000978 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7fe fea0 	bl	8000978 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e032      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4916      	ldr	r1, [pc, #88]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	490e      	ldr	r1, [pc, #56]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cc2:	f000 f821 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	490a      	ldr	r1, [pc, #40]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	5ccb      	ldrb	r3, [r1, r3]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	4a09      	ldr	r2, [pc, #36]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fe04 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08001f84 	.word	0x08001f84
 8001d00:	20000004 	.word	0x20000004
 8001d04:	20000008 	.word	0x20000008

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d0c:	b094      	sub	sp, #80	@ 0x50
 8001d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d20:	4b79      	ldr	r3, [pc, #484]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d00d      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	f200 80e1 	bhi.w	8001ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x34>
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d3a:	e0db      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b73      	ldr	r3, [pc, #460]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d40:	e0db      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d42:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d46:	e0d8      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d48:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d52:	4b6d      	ldr	r3, [pc, #436]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	2200      	movs	r2, #0
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	462b      	mov	r3, r5
 8001d7e:	f04f 0000 	mov.w	r0, #0
 8001d82:	f04f 0100 	mov.w	r1, #0
 8001d86:	0159      	lsls	r1, r3, #5
 8001d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d8c:	0150      	lsls	r0, r2, #5
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4621      	mov	r1, r4
 8001d94:	1a51      	subs	r1, r2, r1
 8001d96:	6139      	str	r1, [r7, #16]
 8001d98:	4629      	mov	r1, r5
 8001d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dac:	4659      	mov	r1, fp
 8001dae:	018b      	lsls	r3, r1, #6
 8001db0:	4651      	mov	r1, sl
 8001db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001db6:	4651      	mov	r1, sl
 8001db8:	018a      	lsls	r2, r1, #6
 8001dba:	4651      	mov	r1, sl
 8001dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc0:	4659      	mov	r1, fp
 8001dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dda:	4690      	mov	r8, r2
 8001ddc:	4699      	mov	r9, r3
 8001dde:	4623      	mov	r3, r4
 8001de0:	eb18 0303 	adds.w	r3, r8, r3
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	462b      	mov	r3, r5
 8001de8:	eb49 0303 	adc.w	r3, r9, r3
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	024b      	lsls	r3, r1, #9
 8001dfe:	4621      	mov	r1, r4
 8001e00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e04:	4621      	mov	r1, r4
 8001e06:	024a      	lsls	r2, r1, #9
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e18:	f7fe f9de 	bl	80001d8 <__aeabi_uldivmod>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4613      	mov	r3, r2
 8001e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e24:	e058      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e26:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	4611      	mov	r1, r2
 8001e32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e40:	4642      	mov	r2, r8
 8001e42:	464b      	mov	r3, r9
 8001e44:	f04f 0000 	mov.w	r0, #0
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	0159      	lsls	r1, r3, #5
 8001e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e52:	0150      	lsls	r0, r2, #5
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4641      	mov	r1, r8
 8001e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e5e:	4649      	mov	r1, r9
 8001e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e78:	ebb2 040a 	subs.w	r4, r2, sl
 8001e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	00eb      	lsls	r3, r5, #3
 8001e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e8e:	00e2      	lsls	r2, r4, #3
 8001e90:	4614      	mov	r4, r2
 8001e92:	461d      	mov	r5, r3
 8001e94:	4643      	mov	r3, r8
 8001e96:	18e3      	adds	r3, r4, r3
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eae:	4629      	mov	r1, r5
 8001eb0:	028b      	lsls	r3, r1, #10
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb8:	4621      	mov	r1, r4
 8001eba:	028a      	lsls	r2, r1, #10
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	61fa      	str	r2, [r7, #28]
 8001ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ecc:	f7fe f984 	bl	80001d8 <__aeabi_uldivmod>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ef2:	e002      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3750      	adds	r7, #80	@ 0x50
 8001f00:	46bd      	mov	sp, r7
 8001f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	007a1200 	.word	0x007a1200

08001f14 <memset>:
 8001f14:	4402      	add	r2, r0
 8001f16:	4603      	mov	r3, r0
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <memset+0xa>
 8001f1c:	4770      	bx	lr
 8001f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f22:	e7f9      	b.n	8001f18 <memset+0x4>

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4d0d      	ldr	r5, [pc, #52]	@ (8001f5c <__libc_init_array+0x38>)
 8001f28:	4c0d      	ldr	r4, [pc, #52]	@ (8001f60 <__libc_init_array+0x3c>)
 8001f2a:	1b64      	subs	r4, r4, r5
 8001f2c:	10a4      	asrs	r4, r4, #2
 8001f2e:	2600      	movs	r6, #0
 8001f30:	42a6      	cmp	r6, r4
 8001f32:	d109      	bne.n	8001f48 <__libc_init_array+0x24>
 8001f34:	4d0b      	ldr	r5, [pc, #44]	@ (8001f64 <__libc_init_array+0x40>)
 8001f36:	4c0c      	ldr	r4, [pc, #48]	@ (8001f68 <__libc_init_array+0x44>)
 8001f38:	f000 f818 	bl	8001f6c <_init>
 8001f3c:	1b64      	subs	r4, r4, r5
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	2600      	movs	r6, #0
 8001f42:	42a6      	cmp	r6, r4
 8001f44:	d105      	bne.n	8001f52 <__libc_init_array+0x2e>
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4c:	4798      	blx	r3
 8001f4e:	3601      	adds	r6, #1
 8001f50:	e7ee      	b.n	8001f30 <__libc_init_array+0xc>
 8001f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f56:	4798      	blx	r3
 8001f58:	3601      	adds	r6, #1
 8001f5a:	e7f2      	b.n	8001f42 <__libc_init_array+0x1e>
 8001f5c:	08001fa4 	.word	0x08001fa4
 8001f60:	08001fa4 	.word	0x08001fa4
 8001f64:	08001fa4 	.word	0x08001fa4
 8001f68:	08001fa8 	.word	0x08001fa8

08001f6c <_init>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr

08001f78 <_fini>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr
